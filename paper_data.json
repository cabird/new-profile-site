{
  "metadata": {
    "created": "2025-10-01 09:38:35",
    "total_bibtex": 114,
    "total_pdfs": 99,
    "mapped_count": 117,
    "last_updated": "2025-10-01 20:52:37",
    "status_legend": {
      "NOT_INVESTIGATED": "Initial state - not yet examined",
      "INVESTIGATING": "Currently being examined",
      "MAPPED": "Successfully matched to a PDF/bib entry",
      "NO_PDF": "Investigated, no matching PDF found",
      "NO_BIBTEX": "PDF exists but no matching bib entry",
      "MULTIPLE_CANDIDATES": "Ambiguous, needs human review"
    }
  },
  "bibtex": {
    "DBLP:journals/cacm/LahiriSBMC25": {
      "status": "MAPPED",
      "type": "article",
      "title": "Program Merge: What's Deep Learning Got to Do with It?",
      "authors": "Shuvendu K. Lahiri and Alexey Svyatkovskiy and Christian Bird and Erik Miejer and Terry Coatta",
      "year": "2025",
      "venue": "Commun. {ACM",
      "mapped_pdf": "program_merge_cacm.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 12:04:51",
      "extracted_paper_info": {
        "tldr": "Applies token-level deep-learning models trained on historical Git merges to automatically suggest resolutions for non-trivial merge conflicts, while emphasizing careful data curation and strong user-experience and explainability needs.",
        "details": {
          "topic": "Machine learning for program merge conflict resolution",
          "problem": "Merge conflicts in collaborative software development are time-consuming and error-prone, tooling is limited, and resolving complex, token-level or semantic conflicts remains difficult for developers.",
          "approach": "The team mined merge conflicts and resolutions from GitHub and internal Microsoft repositories, curated datasets to remove trivial cases, used Tree-sitter and tokenizers to represent edits at token granularity, fine-tuned transformer-based/code models (and explored GPT-style prompting) to predict merges, and validated results via developer/user studies and iterative UX design.",
          "key_insights": [
            "Token-level representation (rather than only high-level ASTs) is crucial for capturing interleaved edits and new-token cases needed to resolve many real-world conflicts.",
            "A large fraction of historical merges (~70%) simply pick one side, so focusing training and UX on the non-trivial interleaving cases yields more value.",
            "Treating user resolutions from commit history as empirical 'ground truth' is pragmatic but imperfect—semantic equivalence may differ from textual match—so evaluation must account for equivalence and developer acceptance.",
            "User experience and explainability are as important as model accuracy: developers want provenance, multiple views (base/ours/theirs), and textual justification to trust AI-suggested merges."
          ],
          "implications": "The work shows ML can substantially assist in resolving complex merge conflicts and reduce developer toil, but practical adoption requires careful dataset curation, language-agnostic token handling, integration into IDE workflows, explainability, and further research on correlated and semantic conflicts; researchers should combine empirical training data with developer studies and prioritize UX when deploying such tools."
        }
      },
      "tags": [
        "ai-for-software-engineering",
        "version-control-and-branching",
        "repository-mining",
        "dataset-and-tooling",
        "tool-adoption-and-trust"
      ],
      "journal": "Commun. ACM",
      "volume": "68",
      "number": "3",
      "pages": "34--41",
      "doi": "10.1145/3704254",
      "url": "https://doi.org/10.1145/3704254",
      "raw_bibtex": "@article{DBLP:journals/cacm/LahiriSBMC25,\n  author       = {Shuvendu K. Lahiri and\n                  Alexey Svyatkovskiy and\n                  Christian Bird and\n                  Erik Miejer and\n                  Terry Coatta},\n  title        = {Program Merge: What's Deep Learning Got to Do with It?},\n  journal      = {Commun. {ACM}},\n  volume       = {68},\n  number       = {3},\n  pages        = {34--41},\n  year         = {2025},\n  url          = {https://doi.org/10.1145/3704254},\n  doi          = {10.1145/3704254},\n  timestamp    = {Tue, 08 Apr 2025 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/cacm/LahiriSBMC25.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse-seip/NaharKBPZB25": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Beyond the Comfort Zone: Emerging Solutions to Overcome Challenges in Integrating LLMs into Software Products",
      "authors": "Nadia Nahar and Christian Kästner and Jenna L. Butler and Chris Parnin and Thomas Zimmermann and Christian Bird",
      "year": "2025",
      "venue": "47th {IEEE/ACM",
      "mapped_pdf": "nahar.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 11:49:26",
      "extracted_paper_info": {
        "tldr": "Identifies and quantifies 19 emerging quality‑assurance solutions that Microsoft product teams use to manage the disruptions caused by integrating LLMs into software products, based on 26 interviews and a survey of 332 practitioners.",
        "details": {
          "topic": "Software engineering for LLM-enabled products (quality assurance)",
          "problem": "Integrating large language models into software breaks many traditional development and testing assumptions, creating hard-to-specify, subjective, non-deterministic, and compliance-sensitive failure modes that teams struggle to evaluate and monitor effectively.",
          "approach": "Sequential exploratory mixed methods: qualitative analysis of 26 semi-structured interviews across Microsoft product teams to surface challenges and candidate solutions, followed by a company-wide survey (332 responses, 182 LLM-section responses) to quantify prevalence, adoption, and perceptions of identified solutions; produced a catalog of 19 QA-focused emerging solutions (plus additional development/prompting solutions in appendix).",
          "key_insights": [
            "Teams commonly create custom, hybrid evaluation strategies (combining qualitative and quantitative metrics and rubrics) because standard metrics and oracles are inadequate for subjective, multi‑acceptable LLM outputs.",
            "Using LLMs as validators (LLM‑as‑a‑judge) and automated validators is widespread and reduces manual effort, but is flaky and can produce misleading confidence unless paired with human review or more objective checks.",
            "Practical engineering responses—automated scheduled offline evaluations, end-to-end test infrastructure, A/B testing, canary releases, extensive guardrails, and richer telemetry (including LLM-based eyes-off analysis)—are being adopted to increase reliability and detect regressions.",
            "Responsible AI practices (standardized RAI checks, red teaming, and mandatory audits/DSB approvals) are now integral to deployment workflows, adding process overhead but reducing risk."
          ],
          "implications": "Provides a pragmatic, empirically grounded menu of practices and tool patterns that engineering teams can adopt (or evaluate) when shipping LLM features; signals to researchers where rigorous comparative evaluation is needed (e.g., effectiveness of LLM validators, telemetry signals, and automated pipelines) and to tool builders the priority areas for better, more reliable LLMOps solutions and RAI automation."
        }
      },
      "tags": [
        "interviews",
        "surveys",
        "ai-for-software-engineering",
        "release-engineering",
        "tool-adoption-and-trust"
      ],
      "booktitle": "47th IEEE/ACM International Conference on Software Engineering: Software Engineering in Practice, SEIP@ICSE 2025, Ottawa, ON, Canada, April 27 - May 3, 2025",
      "publisher": "IEEE",
      "pages": "516--527",
      "doi": "10.1109/ICSE-SEIP66354.2025.00051",
      "url": "https://doi.org/10.1109/ICSE-SEIP66354.2025.00051",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse-seip/NaharKBPZB25,\n  author       = {Nadia Nahar and\n                  Christian K{\\\"{a}}stner and\n                  Jenna L. Butler and\n                  Chris Parnin and\n                  Thomas Zimmermann and\n                  Christian Bird},\n  title        = {Beyond the Comfort Zone: Emerging Solutions to Overcome Challenges\n                  in Integrating LLMs into Software Products},\n  booktitle    = {47th {IEEE/ACM} International Conference on Software Engineering:\n                  Software Engineering in Practice, SEIP@ICSE 2025, Ottawa, ON, Canada,\n                  April 27 - May 3, 2025},\n  pages        = {516--527},\n  publisher    = {{IEEE}},\n  year         = {2025},\n  url          = {https://doi.org/10.1109/ICSE-SEIP66354.2025.00051},\n  doi          = {10.1109/ICSE-SEIP66354.2025.00051},\n  timestamp    = {Sun, 07 Sep 2025 20:27:02 +0200},\n  biburl       = {https://dblp.org/rec/conf/icse-seip/NaharKBPZB25.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse-seip/VajjalaVBBDDDEFHMSSZ25": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Enhancing Differential Testing: LLM-Powered Automation in Release Engineering",
      "authors": "Ajay Krishna Vajjala and Arun Krishna Vajjala and Carmen Badea and Christian Bird and Jade D'Souza and Robert DeLine and Mikhail O. Demyanyuk and Jason Entenmann and Nicole Forsgren and Aliaksandr Hramadski and Haris Mohammad and Sandeepan Sanyal and Oleg Surmachev and Thomas Zimmermann",
      "year": "2025",
      "venue": "47th {IEEE/ACM",
      "mapped_pdf": "Automatic_Diff_Labeler.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 12:21:24",
      "extracted_paper_info": {
        "tldr": "Automating labeling of behavioral differences (diffs) between test and production using LLMs (in-context and fine-tuned) greatly speeds release engineering workflows and reduces on-call engineer effort.",
        "details": {
          "topic": "LLM-based automation for differential testing / release engineering",
          "problem": "On-call engineers must manually inspect and label thousands of diffs produced by differential testing (UserMarkedNoise, NewFeature, Regression), a time-consuming, error-prone bottleneck in release workflows.",
          "approach": "Collected labeled diff datasets from Microsoft IDNA (3.9k and 12.7k diffs), represented each diff with seven attributes (category, description, calls, tags, comments, test logs, prod logs, plus an automated 'OCE Insight'), and evaluated two LLM strategies: few-shot in-context prompting (static and dynamic example retrieval via embeddings) and LoRA fine-tuning of GPT-3.5 and GPT-4; performed offline and four-week online evaluations and an ablation study removing comments.",
          "key_insights": [
            "Dynamic few-shot retrieval (retrieve similar examples per test diff) improved in-context accuracy from ~50% to ~71%, showing example selection matters.",
            "Fine-tuning GPT-4 with a larger labeled dataset produced strong offline performance (≈97.4% overall accuracy; Regression accuracy improved to 81.25%), whereas GPT-3.5 struggled on the rare but critical Regression class.",
            "Textual metadata (especially engineer comments) materially improves labeling quality; removing comments degrades NewFeature and Regression performance substantially.",
            "In online snapshots the model consistently labeled UserMarkedNoise and NewFeature with high accuracy (>90% and mostly >80%), but Regression remained less reliable, so human verification remains desirable."
          ],
          "implications": "LLMs can meaningfully automate diff labeling in release engineering—reducing weekly on-call labeling from hours to minutes, speeding releases and lowering burnout—while fine-tuning on in-domain labeled data and preserving rich textual metadata are key; however, teams should combine automated labels with confidence measures, human-in-the-loop verification for critical (Regression) cases, and continued data collection to improve rare-class performance and generalize across teams."
        }
      },
      "tags": [
        "release-engineering",
        "ai-for-software-engineering",
        "field-deployment",
        "dataset-and-tooling"
      ],
      "booktitle": "47th IEEE/ACM International Conference on Software Engineering: Software Engineering in Practice, SEIP@ICSE 2025, Ottawa, ON, Canada, April 27 - May 3, 2025",
      "publisher": "IEEE",
      "pages": "607--617",
      "doi": "10.1109/ICSE-SEIP66354.2025.00059",
      "url": "https://doi.org/10.1109/ICSE-SEIP66354.2025.00059",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse-seip/VajjalaVBBDDDEFHMSSZ25,\n  author       = {Ajay Krishna Vajjala and\n                  Arun Krishna Vajjala and\n                  Carmen Badea and\n                  Christian Bird and\n                  Jade D'Souza and\n                  Robert DeLine and\n                  Mikhail O. Demyanyuk and\n                  Jason Entenmann and\n                  Nicole Forsgren and\n                  Aliaksandr Hramadski and\n                  Haris Mohammad and\n                  Sandeepan Sanyal and\n                  Oleg Surmachev and\n                  Thomas Zimmermann},\n  title        = {Enhancing Differential Testing: LLM-Powered Automation in Release\n                  Engineering},\n  booktitle    = {47th {IEEE/ACM} International Conference on Software Engineering:\n                  Software Engineering in Practice, SEIP@ICSE 2025, Ottawa, ON, Canada,\n                  April 27 - May 3, 2025},\n  pages        = {607--617},\n  publisher    = {{IEEE}},\n  year         = {2025},\n  url          = {https://doi.org/10.1109/ICSE-SEIP66354.2025.00059},\n  doi          = {10.1109/ICSE-SEIP66354.2025.00059},\n  timestamp    = {Sun, 07 Sep 2025 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/conf/icse-seip/VajjalaVBBDDDEFHMSSZ25.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/VajjalaVBBDDDEF25": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Using Large Language Models to Support the Workflow of Differential Testing",
      "authors": "Arun Krishna Vajjala and Ajay Krishna Vajjala and Carmen Badea and Christian Bird and Jade D'Souza and Robert DeLine and Mikhail O. Demyanyuk and Jason Entenmann and Nicole Forsgren and Aliaksandr Hramadski and Haris Mohammad and Sandeepan Sanyal and Oleg Surmachev and Thomas Zimmermann",
      "year": "2025",
      "venue": "Proceedings of the 33rd {ACM",
      "mapped_pdf": "arun-differential-testing.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 12:18:47",
      "extracted_paper_info": {
        "tldr": "Integrating fine-tuned LLMs (for diff-label prediction and summarization) with a redesigned UI can automate much of differential testing work and reduce cognitive load, but engineers require transparent rationales and careful UX design to trust and adopt these features.",
        "details": {
          "topic": "LLM-enhanced tooling for differential testing / release engineering",
          "problem": "On-call release engineers must manually inspect large, repetitive textual artifacts (logs, comments, code changes) to label behavioral differences between production and test builds, a time-consuming and cognitively demanding process prone to inefficiencies.",
          "approach": "Partnered with an Azure release team to design a prototype DiffViewer that adds LLM-based diff label prediction (fine-tuned on thousands of historical diffs), AI-generated log/comment summaries, embedding-based clustering (k-means with cached OpenAI embeddings), and UI improvements (tile/block layout, flagging, progress/inbox views); elicited feedback via design-probe interviews, transcripts and a post-demo survey with five experienced on-call engineers.",
          "key_insights": [
            "LLM-based label prediction (model fine-tuned on historical diffs) can be highly accurate (reported 97.38%) and would save significant manual effort, but engineers demand explicit rationales and links to supporting artifacts to trust and act on predictions.",
            "AI-generated summaries and comment summarization reduce manual search and interpretation work and are useful starting points, though participants noted some summaries are wordy and want concise, actionable context.",
            "Non-AI UX changes (clustering/grouping, tile-based layout, flagging, progress/inbox views, reduced mouse travel) were immediately valued and often preferred; participants favored hybrid solutions that combine reliable UI affordances with AI assistance.",
            "Study results are promising but preliminary: small participant pool (5 of 30), single-team deployment, and a prototype system limit generalizability and highlight the need for longitudinal evaluation and improved explainability."
          ],
          "implications": "For researchers: explore hybrid AI+HCI designs, transparency/explainability techniques, and longitudinal field studies to measure real productivity and trust effects; for tool builders and practitioners: prioritize combining strong UX improvements with ML assistance (predictive labels, summaries, clustering), expose supporting evidence/rationale for AI outputs, and roll out incrementally to build trust and safely reduce on-call workload and release-cycle costs."
        }
      },
      "tags": [
        "release-engineering",
        "ai-for-software-engineering",
        "tool-adoption-and-trust",
        "interviews"
      ],
      "booktitle": "Proceedings of the 33rd ACM International Conference on the Foundations of Software Engineering, FSE Companion 2025, Clarion Hotel Trondheim, Trondheim, Norway, June 23-28, 2025",
      "publisher": "ACM",
      "pages": "355--365",
      "doi": "10.1145/3696630.3728559",
      "url": "https://doi.org/10.1145/3696630.3728559",
      "editor": "Leonardo Montecchi and Jingyue Li and Denys Poshyvanyk and Dongmei Zhang",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/VajjalaVBBDDDEF25,\n  author       = {Arun Krishna Vajjala and\n                  Ajay Krishna Vajjala and\n                  Carmen Badea and\n                  Christian Bird and\n                  Jade D'Souza and\n                  Robert DeLine and\n                  Mikhail O. Demyanyuk and\n                  Jason Entenmann and\n                  Nicole Forsgren and\n                  Aliaksandr Hramadski and\n                  Haris Mohammad and\n                  Sandeepan Sanyal and\n                  Oleg Surmachev and\n                  Thomas Zimmermann},\n  editor       = {Leonardo Montecchi and\n                  Jingyue Li and\n                  Denys Poshyvanyk and\n                  Dongmei Zhang},\n  title        = {Using Large Language Models to Support the Workflow of Differential\n                  Testing},\n  booktitle    = {Proceedings of the 33rd {ACM} International Conference on the Foundations\n                  of Software Engineering, {FSE} Companion 2025, Clarion Hotel Trondheim,\n                  Trondheim, Norway, June 23-28, 2025},\n  pages        = {355--365},\n  publisher    = {{ACM}},\n  year         = {2025},\n  url          = {https://doi.org/10.1145/3696630.3728559},\n  doi          = {10.1145/3696630.3728559},\n  timestamp    = {Sat, 09 Aug 2025 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/VajjalaVBBDDDEF25.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/pacmse/LiangBBDFF024": {
      "status": "MAPPED",
      "type": "article",
      "title": "Can GPT-4 Replicate Empirical Software Engineering Research?",
      "authors": "Jenny T. Liang and Carmen Badea and Christian Bird and Robert DeLine and Denae Ford and Nicole Forsgren and Thomas Zimmermann",
      "year": "2024",
      "venue": "Proc. {ACM",
      "mapped_pdf": "_FSE_24__Replicating_Software_Engineering_Research_with_LLMs.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 12:23:08",
      "extracted_paper_info": {
        "tldr": "The authors evaluate GPT-4's ability to replicate quantitative empirical software engineering studies by generating assumptions, analysis plans, and code for seven papers and finding it can capture high-level structure but lacks domain-specific knowledge and reliable low-level implementation correctness.",
        "details": {
          "topic": "Using large language models to replicate empirical software engineering research",
          "problem": "Empirical SE analyses are valuable but rarely replicated on new production data because doing so requires methodological expertise and engineering effort; LLMs might democratize replication but their capability to extract assumptions, design pipelines, and write correct analysis code is unknown.",
          "approach": "Selected seven quantitative empirical SE papers, prompted GPT-4 to produce (1) assumptions underlying each methodology, (2) analysis plans as modular specifications, and (3) Python code implementing modules; evaluated assumptions and plans in a user study with 14 SE researchers and performed a manual code review of 23 GPT-4-generated code snippets by three authors, with quantitative and qualitative analyses of correctness, relevance, and descriptiveness.",
          "key_insights": [
            "GPT-4 reliably surfaces many explicit assumptions and produces analysis plans that capture correct high-level structure (86% of assumptions and 89% of plans rated partially or fully correct), but often misses implicit domain knowledge.",
            "Generated analysis plans lack descriptive detail needed for autonomous replication and sometimes contain ordering or input/output errors; modules were rated descriptive only ~38% of the time.",
            "Code shows correct high-level logic and common API usage but frequent low-level errors (wrong data sources, missing methodology steps, guessed or hallucinated implementations/APIs); only ~30% of generated code modules executed without modification."
          ],
          "implications": "LLMs like GPT-4 can scaffold study replications and help brainstorm assumptions or pipeline structure, but human oversight is required for correctness; improving performance will need domain-adaptation (fine-tuning or specialized datasets), richer context input (data schemas, replication artifacts), and clearer methodology reporting so tools can produce executable, trustworthy analysis pipelines for researchers and practitioners."
        }
      },
      "tags": [
        "ai-for-software-engineering",
        "ai-assisted-programming",
        "tool-adoption-and-trust"
      ],
      "journal": "Proc. ACM Softw. Eng.",
      "volume": "1",
      "number": "FSE",
      "pages": "1330--1353",
      "doi": "10.1145/3660767",
      "url": "https://doi.org/10.1145/3660767",
      "raw_bibtex": "@article{DBLP:journals/pacmse/LiangBBDFF024,\n  author       = {Jenny T. Liang and\n                  Carmen Badea and\n                  Christian Bird and\n                  Robert DeLine and\n                  Denae Ford and\n                  Nicole Forsgren and\n                  Thomas Zimmermann},\n  title        = {Can {GPT-4} Replicate Empirical Software Engineering Research?},\n  journal      = {Proc. {ACM} Softw. Eng.},\n  volume       = {1},\n  number       = {{FSE}},\n  pages        = {1330--1353},\n  year         = {2024},\n  url          = {https://doi.org/10.1145/3660767},\n  doi          = {10.1145/3660767},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/pacmse/LiangBBDFF024.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/queue/LahiriSBMC24": {
      "status": "MAPPED",
      "type": "article",
      "title": "Program Merge: What's Deep Learning Got to Do with It?: A discussion with Shuvendu Lahiri, Alexey Svyatkovskiy, Christian Bird, Erik Meijer and Terry Coatta",
      "authors": "Shuvendu K. Lahiri and Alexey Svyatkovskiy and Christian Bird and Erik Meijer and Terry Coatta",
      "year": "2024",
      "venue": "{ACM",
      "mapped_pdf": "program_merge_queue.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 12:06:10",
      "extracted_paper_info": {
        "tldr": "DeepMerge uses token-level transformer models fine-tuned on mined Git and internal merge histories, combined with token alignment and careful UX, to propose and explain nontrivial program merge resolutions and reduce developer merge burden.",
        "details": {
          "topic": "Machine learning for program merge / merge conflict resolution",
          "problem": "Merge conflicts in large collaborative codebases are frequent, time-consuming, and often lack intelligent tooling; existing approaches either drop changes, rely on brittle symbolic methods, or provide poor user experience for complex, token-level conflicts.",
          "approach": "The team mined merge conflicts and their human resolutions from GitHub and Microsoft repositories, curated datasets (excluding trivial one-sided merges and noisy edits), represented edits at token level (using Tree-sitter and language tokenizers), fine-tuned pretrained transformer models for classification/generation of merges, ran user studies with developers using real conflicts from their work to guide UI design and evaluate suggestions, and explored prompt-driven LLM approaches (e.g., GPT-4) and explainability features.",
          "key_insights": [
            "Token-level granularity is crucial: many complex merges require token-level alignment and insertion/deletion handling rather than line-level or purely syntactic approaches.",
            "A large fraction of merges are trivial (often choosing one side), so careful dataset curation is necessary to focus models on meaningful, nontrivial conflicts.",
            "User experience and explainability matter as much as model accuracy: developers need provenance, the base context, and editable suggestions; multiple ranked suggestions improve acceptance.",
            "Empirical (data-driven) correctness from developer resolutions is a practical ground truth but semantic/correctness ambiguity remains, motivating future work on semantic/silent conflicts and correlated conflict resolution."
          ],
          "implications": "For researchers: combining token-level representations, pretrained transformers, and curated real-world data is a promising direction for automated merging and invites further work on semantics and correlated conflicts; for tool builders and practitioners: integrating ML merge suggestions with clear provenance, editable UI, and explainability can significantly reduce merge friction but requires careful dataset engineering and UX design to gain developer trust and adoption."
        }
      },
      "tags": [
        "ai-for-software-engineering",
        "repository-mining",
        "version-control-and-branching",
        "recommendation-systems"
      ],
      "journal": "ACM Queue",
      "volume": "22",
      "number": "4",
      "pages": "50",
      "doi": "10.1145/3688155",
      "url": "https://doi.org/10.1145/3688155",
      "raw_bibtex": "@article{DBLP:journals/queue/LahiriSBMC24,\n  author       = {Shuvendu K. Lahiri and\n                  Alexey Svyatkovskiy and\n                  Christian Bird and\n                  Erik Meijer and\n                  Terry Coatta},\n  title        = {Program Merge: What's Deep Learning Got to Do with It?: {A} discussion\n                  with Shuvendu Lahiri, Alexey Svyatkovskiy, Christian Bird, Erik Meijer\n                  and Terry Coatta},\n  journal      = {{ACM} Queue},\n  volume       = {22},\n  number       = {4},\n  pages        = {50},\n  year         = {2024},\n  url          = {https://doi.org/10.1145/3688155},\n  doi          = {10.1145/3688155},\n  timestamp    = {Sun, 12 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/queue/LahiriSBMC24.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/Butler0B24": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Objectives and Key Results in Software Teams: Challenges, Opportunities and Impact on Development",
      "authors": "Jenna L. Butler and Thomas Zimmermann and Christian Bird",
      "year": "2024",
      "venue": "Proceedings of the 46th International Conference on Software Engineering:\n                  Software Engineering in Practice, {ICSE-SEIP",
      "mapped_pdf": "butler2024okr.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 11:02:15",
      "extracted_paper_info": {
        "tldr": "Mixed-methods study of a 4,000+ engineer organization shows that adopting OKRs is difficult in practice, identifies organizational and technical factors correlated with successful OKR maturity, and offers concrete recommendations to improve goal-setting.",
        "details": {
          "topic": "Objectives and Key Results (OKR) adoption in software engineering teams",
          "problem": "Large software organizations struggle to translate high-level strategic objectives into measurable, shared, and actionable goals; teams face problems setting, measuring, communicating and coordinating goals across distributed groups and toolchains.",
          "approach": "Mixed methods: 47 semi-structured interviews informed a Qualtrics survey sent to ~4,000 employees with 512 responses; authors performed thematic analysis of interview/open-text responses, constructed OKR maturity and Modern Engineering scores, and used linear regression and hypothesis tests to identify correlations and major challenges.",
          "key_insights": [
            "Higher OKR maturity correlates with a unified team mission, valuing creativity, years in industry, and modern engineering practices (notably experimentation and rapid iterations); remote/satellite teams reported higher OKR maturity than those at the main office.",
            "Major barriers are practical: data access and instrumentation gaps, fragmented tooling and lack of a centralized process, poor cross-team alignment, shifting priorities, and middle managers often failing to translate high-level OKRs into actionable team metrics.",
            "Teams that practice experimentation and rapid iterations are more likely to set measurable outcomes and adapt OKRs effectively, suggesting OKRs complement agile/modern engineering practices."
          ],
          "implications": "For researchers, the study provides an empirically grounded OKR maturity measure and evidence linking OKRs to engineering practices; for practitioners and managers, improving goal-setting requires investment in data pipelines and tooling, consistent rollout and governance, manager training to translate objectives, increased transparency, and cross-team learning communities to share best practices—otherwise OKRs risk fragmentation and limited impact."
        }
      },
      "tags": [
        "engineering-management",
        "interviews",
        "surveys",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 46th International Conference on Software Engineering: Software Engineering in Practice, ICSE-SEIP 2024, Lisbon, Portugal, April 14-20, 2024",
      "publisher": "ACM",
      "pages": "358--368",
      "doi": "10.1145/3639477.3639747",
      "url": "https://doi.org/10.1145/3639477.3639747",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/Butler0B24,\n  author       = {Jenna L. Butler and\n                  Thomas Zimmermann and\n                  Christian Bird},\n  title        = {Objectives and Key Results in Software Teams: Challenges, Opportunities\n                  and Impact on Development},\n  booktitle    = {Proceedings of the 46th International Conference on Software Engineering:\n                  Software Engineering in Practice, {ICSE-SEIP} 2024, Lisbon, Portugal,\n                  April 14-20, 2024},\n  pages        = {358--368},\n  publisher    = {{ACM}},\n  year         = {2024},\n  url          = {https://doi.org/10.1145/3639477.3639747},\n  doi          = {10.1145/3639477.3639747},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/Butler0B24.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/cacm/BirdFZFKLG23": {
      "status": "MAPPED",
      "type": "article",
      "title": "Taking Flight with Copilot",
      "authors": "Christian Bird and Denae Ford and Thomas Zimmermann and Nicole Forsgren and Eirini Kalliamvakou and Travis Lowdermilk and Idan Gazit",
      "year": "2023",
      "venue": "Commun. {ACM",
      "mapped_pdf": "taking_flight_cacm.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 10:56:52",
      "extracted_paper_info": {
        "tldr": "Early empirical studies of GitHub Copilot show developers adopt AI pair programming to speed coding and feel more productive, but it shifts work toward reviewing and raises concerns about understanding, security, licensing, and provenance.",
        "details": {
          "topic": "AI-assisted pair programming (GitHub Copilot)",
          "problem": "How developers actually use an AI pair programmer, how it affects productivity and workflows, and what challenges (code quality, security, legal/licensing, trust, and provenance) emerge as these tools enter real development practice.",
          "approach": "Mixed-methods investigation of Copilot's early technical preview: analysis of 279 GitHub Discussion posts, a think-aloud case study with five professional Python developers performing realistic tasks (prime check, tic-tac-toe, send-email API), and a large-scale opt-in survey (2,047 responses) correlating usage metrics (e.g., acceptance rate, persistence, contribution speed, volume) with perceived productivity.",
          "key_insights": [
            "Acceptance rate of Copilot suggestions has the strongest positive correlation with users' self-reported productivity (r = 0.24), suggesting perceived benefit when suggestions are accepted even if edited.",
            "Using Copilot shifts activity from typing to reading and reviewing suggested code—developers accept suggestions for efficiency but may lose some understanding and control over the code.",
            "Copilot can speed tasks and reduce reliance on resources like Stack Overflow, but it sometimes produces incomplete 'defensive' coding, inappropriate suggestions, or leaks (e.g., PII), raising security and quality concerns.",
            "Users and communities surfaced unresolved legal/licensing and provenance questions, highlighting the need for mechanisms to track AI-generated code and clear policies about reuse and attribution."
          ],
          "implications": "For tool builders: improve context, explainability, provenance, and safety filters to build trust and reduce vulnerabilities; for developers and teams: shift training and code-review practices toward assessing AI suggestions and verifying correctness/security; for organizations: establish policies for licensing, auditing, and tracking AI-generated code; for researchers: empirically evaluate impacts on defects, maintainability, and long-term knowledge transfer as AI assistants reshape development workflows."
        }
      },
      "tags": [
        "ai-assisted-programming",
        "tool-adoption-and-trust",
        "surveys",
        "developer-productivity"
      ],
      "journal": "Commun. ACM",
      "volume": "66",
      "number": "6",
      "pages": "56--62",
      "doi": "10.1145/3589996",
      "url": "https://doi.org/10.1145/3589996",
      "raw_bibtex": "@article{DBLP:journals/cacm/BirdFZFKLG23,\n  author       = {Christian Bird and\n                  Denae Ford and\n                  Thomas Zimmermann and\n                  Nicole Forsgren and\n                  Eirini Kalliamvakou and\n                  Travis Lowdermilk and\n                  Idan Gazit},\n  title        = {Taking Flight with Copilot},\n  journal      = {Commun. {ACM}},\n  volume       = {66},\n  number       = {6},\n  pages        = {56--62},\n  year         = {2023},\n  url          = {https://doi.org/10.1145/3589996},\n  doi          = {10.1145/3589996},\n  timestamp    = {Sat, 06 Sep 2025 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/cacm/BirdFZFKLG23.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tse/DinellaMSBNL23": {
      "status": "MAPPED",
      "type": "article",
      "title": "DeepMerge: Learning to Merge Programs",
      "authors": "Elizabeth Dinella and Todd Mytkowicz and Alexey Svyatkovskiy and Christian Bird and Mayur Naik and Shuvendu K. Lahiri",
      "year": "2023",
      "venue": "{IEEE",
      "mapped_pdf": "dinella2023deepmerge.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 11:01:26",
      "extracted_paper_info": {
        "tldr": "A neural system called DEEPMERGE learns to automatically resolve unstructured merge conflicts by copying and reordering lines from the inputs using an edit-aware embedding and pointer-style decoder, yielding substantially higher automatic resolution rates on real-world JavaScript merges.",
        "details": {
          "topic": "Automated program merge conflict resolution with machine learning",
          "problem": "Textual three-way merges often produce conflicts that require manual resolution, stalling development and CI; existing structured or semantics-based approaches either still conflict or are impractical for dynamic languages like JavaScript.",
          "approach": "Curate a large real-world dataset of localized non-trivial JavaScript merge tuples (A, B, O, R); design an edit-aware input representation (Merge2Matrix / aligned-linearized edits); train a sequence-to-sequence model with a pointer-network-like decoder that outputs line indices from A/B; evaluate against seq2seq and semistructured baselines and analyze confidence thresholds and input-size sensitivity.",
          "key_insights": [
            "Most human merge resolutions reuse only lines from the inputs (≈80%), so generating resolutions by copying/reordering lines is expressive and effective.",
            "An edit-aware, aligned and linearized input embedding (Merge2Matrix) substantially improves learning compared to naive concatenation or other edit encodings.",
            "A pointer-style decoder that outputs line selections (rather than token-by-token generation) enables accurate synthesis of many real-world resolutions and yields fast inference.",
            "DEEPMERGE achieves much higher accuracy than baselines (37% top-1 overall, 78% for ≤3-line merges; ~9× better than a semistructured JS baseline) and can trade recall for high precision via confidence thresholds (72% precision at 34% recall)."
          ],
          "implications": "Learning-based merge resolution can meaningfully reduce manual conflict handling and speed CI by automatically producing many correct resolutions, especially for small edits; the work provides a practical, language-agnostic blueprint (and dataset) for integrating ML-assisted merging into developer tools and motivates further research on combining edit-aware encodings, copying decoders, and program analyses for broader and more semantic merge synthesis."
        }
      },
      "tags": [
        "ai-for-software-engineering",
        "version-control-and-branching",
        "repository-mining",
        "dataset-and-tooling"
      ],
      "journal": "IEEE Trans. Software Eng.",
      "volume": "49",
      "number": "4",
      "pages": "1599--1614",
      "doi": "10.1109/TSE.2022.3183955",
      "url": "https://doi.org/10.1109/TSE.2022.3183955",
      "raw_bibtex": "@article{DBLP:journals/tse/DinellaMSBNL23,\n  author       = {Elizabeth Dinella and\n                  Todd Mytkowicz and\n                  Alexey Svyatkovskiy and\n                  Christian Bird and\n                  Mayur Naik and\n                  Shuvendu K. Lahiri},\n  title        = {DeepMerge: Learning to Merge Programs},\n  journal      = {{IEEE} Trans. Software Eng.},\n  volume       = {49},\n  number       = {4},\n  pages        = {1599--1614},\n  year         = {2023},\n  url          = {https://doi.org/10.1109/TSE.2022.3183955},\n  doi          = {10.1109/TSE.2022.3183955},\n  timestamp    = {Sat, 29 Apr 2023 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/tse/DinellaMSBNL23.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/ZhangMBBRAJHD23": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Using Large-scale Heterogeneous Graph Representation Learning for Code Review Recommendations at Microsoft",
      "authors": "Jiyang Zhang and Chandra Shekhar Maddila and Ram Bairi and Christian Bird and Ujjwal Raizada and Apoorva Agrawal and Yamini Jhawar and Kim Herzig and Arie van Deursen",
      "year": "2023",
      "venue": "45th {IEEE/ACM",
      "mapped_pdf": "zhang2023coral.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 11:00:47",
      "extracted_paper_info": {
        "tldr": "Leverages a large heterogeneous socio-technical graph and a 2-layer graph convolutional network to recommend code reviewers, surfacing qualified reviewers that file-history heuristics miss and improving recommendations particularly for large projects.",
        "details": {
          "topic": "Code reviewer recommendation via graph neural networks",
          "problem": "Existing reviewer recommenders rely mainly on historical file-change information and therefore miss developers who have relevant expertise but have never touched the exact files; this can slow development and concentrate review load on a few people.",
          "approach": "Build a large socio-technical graph (authors, reviewers, PRs, files, work items, tokenized text) from 332 Microsoft repositories (5.86M nodes, 23.8M edges, ~2.5 years of history), augment with text tokens and word co-occurrence, train a 2-layer relational Graph Convolutional Network as a link-prediction task to produce embeddings, perform inductive inference for new PRs by aggregating neighbor embeddings, and evaluate via retrospective tests on 254K PR-review pairs, comparison with a production rule-based baseline, a 500-PR user study (287 responses), and an ablation study.",
          "key_insights": [
            "CORAL reproduces historical reviewer choices well (73% top-3 accuracy; strong MRR) and models complex socio-technical relations beyond file authorship.",
            "CORAL outperforms a rule-based file-history baseline on large and medium projects, while the baseline performs better on small projects, indicating complementary strengths.",
            "A large user study found 67.6% positive relevance feedback (59% willing to act), showing CORAL surfaces qualified reviewers who were not previously invited.",
            "Ablation shows both file-change information and natural-language tokens are important; files give a larger boost but combining files+words yields the best performance."
          ],
          "implications": "Heterogeneous repository graphs plus GNNs can broaden and improve reviewer recommendations (reducing bottlenecks and discovering latent expertise across projects), suggesting production systems should combine graph-based ML with heuristics; practical deployment needs to handle user role/movement, edge decay and noisy automated PRs, and may benefit from project-size or domain-specific models."
        }
      },
      "tags": [
        "recommendation-systems",
        "code-review",
        "ai-for-software-engineering",
        "repository-mining"
      ],
      "booktitle": "45th IEEE/ACM International Conference on Software Engineering: Software Engineering in Practice, SEIP@ICSE 2023, Melbourne, Australia, May 14-20, 2023",
      "publisher": "IEEE",
      "pages": "162--172",
      "doi": "10.1109/ICSE-SEIP58684.2023.00020",
      "url": "https://doi.org/10.1109/ICSE-SEIP58684.2023.00020",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/ZhangMBBRAJHD23,\n  author       = {Jiyang Zhang and\n                  Chandra Shekhar Maddila and\n                  Ram Bairi and\n                  Christian Bird and\n                  Ujjwal Raizada and\n                  Apoorva Agrawal and\n                  Yamini Jhawar and\n                  Kim Herzig and\n                  Arie van Deursen},\n  title        = {Using Large-scale Heterogeneous Graph Representation Learning for\n                  Code Review Recommendations at Microsoft},\n  booktitle    = {45th {IEEE/ACM} International Conference on Software Engineering:\n                  Software Engineering in Practice, SEIP@ICSE 2023, Melbourne, Australia,\n                  May 14-20, 2023},\n  pages        = {162--172},\n  publisher    = {{IEEE}},\n  year         = {2023},\n  url          = {https://doi.org/10.1109/ICSE-SEIP58684.2023.00020},\n  doi          = {10.1109/ICSE-SEIP58684.2023.00020},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/ZhangMBBRAJHD23.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/JohnsonBFFZ23": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Make Your Tools Sparkle with Trust: The PICSE Framework for Trust in Software Tools",
      "authors": "Brittany Johnson and Christian Bird and Denae Ford and Nicole Forsgren and Thomas Zimmermann",
      "year": "2023",
      "venue": "45th {IEEE/ACM",
      "mapped_pdf": "PICSE-BrittanyJohnson-ICSESEIP2023.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 11:00:08",
      "extracted_paper_info": {
        "tldr": "Introduces the PICSE framework—Personal, Interaction, Control, System, Expectations—derived from interviews with 18 engineers to identify the factors that shape trust in software tools (including AI-assisted tools) and to guide building more trustworthy tools.",
        "details": {
          "topic": "Trust in software tools",
          "problem": "Engineers depend on many software tools but adoption and effective use hinge on trust, and there's limited understanding of which factors create, erode, or rebuild trust—especially for newer AI-assisted tools.",
          "approach": "Semi-structured interviews with 18 engineers (internal and external to Microsoft), iterative deductive+inductive coding and thematic analysis using ATLAS.ti, validation by an external auditor, and synthesis of findings into the PICSE framework plus practical guidance and comparisons between traditional and AI-assisted tools.",
          "key_insights": [
            "Trust is multi-dimensional and organized into five categories (PICSE): Personal (community, source reputation, clear advantages), Interaction (contribution validation, feedback loops, educational value), Control (ownership, autonomy, workflow integration), System (ease of use, polish, security, correctness, consistency, performance), and Expectations (transparent data practices, style/goal matching, meeting expectations).",
            "Initial adoption is driven more by Personal and System signals (community, reputation, ease of installation, polished presentation), whereas sustained or rebuilt trust depends on Interaction, Control, and Expectations (validation support, autonomy, goal matching, transparency).",
            "AI-assisted tools amplify the need for transparent data practices, contribution validation and explainability, and higher expectation of improvement—engineers may accept AI for boilerplate but require extra vigilance for project-specific or debugging tasks."
          ],
          "implications": "Provides a practical taxonomy for researchers to measure and extend studies of trust and for tool developers to prioritize design and engineering decisions (community/reputation building, easy setup, polished UI, security/privacy transparency, validation/explanation mechanisms, and seamless workflow integration) to increase adoption and safe use of both traditional and AI-assisted software tools."
        }
      },
      "tags": [
        "tool-adoption-and-trust",
        "interviews",
        "ai-assisted-programming"
      ],
      "booktitle": "45th IEEE/ACM International Conference on Software Engineering: Software Engineering in Practice, SEIP@ICSE 2023, Melbourne, Australia, May 14-20, 2023",
      "publisher": "IEEE",
      "pages": "409--419",
      "doi": "10.1109/ICSE-SEIP58684.2023.00043",
      "url": "https://doi.org/10.1109/ICSE-SEIP58684.2023.00043",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/JohnsonBFFZ23,\n  author       = {Brittany Johnson and\n                  Christian Bird and\n                  Denae Ford and\n                  Nicole Forsgren and\n                  Thomas Zimmermann},\n  title        = {Make Your Tools Sparkle with Trust: The {PICSE} Framework for Trust\n                  in Software Tools},\n  booktitle    = {45th {IEEE/ACM} International Conference on Software Engineering:\n                  Software Engineering in Practice, SEIP@ICSE 2023, Melbourne, Australia,\n                  May 14-20, 2023},\n  pages        = {409--419},\n  publisher    = {{IEEE}},\n  year         = {2023},\n  url          = {https://doi.org/10.1109/ICSE-SEIP58684.2023.00043},\n  doi          = {10.1109/ICSE-SEIP58684.2023.00043},\n  timestamp    = {Sat, 06 Sep 2025 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/conf/icse/JohnsonBFFZ23.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/hhci/Pe-ThanNFBSH22": {
      "status": "MAPPED",
      "type": "article",
      "title": "Corporate hackathons, how and why? A multiple case study of motivation, projects proposal and selection, goal setting, coordination, and outcomes",
      "authors": "Ei Pa Pa Pe-Than and Alexander Nolte and Anna Filippova and Christian Bird and Steve Scallen and James D. Herbsleb",
      "year": "2022",
      "venue": "Hum. Comput. Interact.",
      "mapped_pdf": "than2020hackathon.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Compares how preexisting and newly-formed teams operate in a large corporate hackathon and identifies coordination styles, factors that influence whether projects are sustained, and the event's perceived benefits for participants.",
        "details": {
          "topic": "Corporate hackathons — team coordination, project sustainability, and participant impacts",
          "problem": "Corporate hackathons are widespread but poorly understood: it's unclear how team familiarity (preexisting vs newly-formed teams) shapes coordination, project selection, goal setting, continuation after the event, and individual outcomes.",
          "approach": "A mixed-methods multiple-case study of five teams (three flash teams, two preexisting teams) at the 2017 Microsoft OneWeek Hackathon using ethnographic observation (15–24.5 hours per team), 39 semi-structured interviews (pre-event, post-event, and 4-month follow-up), and grounded coding (open and axial) with cross-case comparison.",
          "key_insights": [
            "Different coordination styles: preexisting teams (PETs) worked much like 'another day at the office' leveraging shared norms to produce more complete, immediately useful artifacts; flash teams (FTs) used role-based coordination (developer/UX/PM/marketing roles) to produce lighter prototypes and demos aimed at external audiences.",
            "Project sustainability depended on leadership and preparation: career-oriented leaders, project-focused pre-event preparation, matching tasks to existing skills, active promotion (science fair + outreach), and alignment with existing product portfolios increased the chance a project would be continued.",
            "Tradeoffs exist: FTs offered stronger networking, learning, and opportunities to try new roles (valuable for horizontal career moves), but pursuing novel roles/ideas and focusing on demos reduced likelihood of continuation compared with PETs working on in-scope extensions of existing work.",
            "Hackathon participation produced perceived benefits including technical and project-management skill gains, expanded internal networks, and career impacts (both promotions and lateral moves), even when projects themselves were not continued."
          ],
          "implications": "For organizers and managers: enable and incentivize pre-event team preparation, improve matchmaking and mentor/apprentice role slots for flash teams, and help teams find 'homes' (product groups) to boost continuation; for practitioners: align hackathon goals (learning vs productization) with team composition and leader orientation; for researchers: test generalizability across companies and analyze long-term effects on innovation pipelines and social networks."
        }
      },
      "tags": [
        "interviews",
        "case-study",
        "developer-social-networks",
        "engineering-management"
      ],
      "journal": "Hum. Comput. Interact.",
      "volume": "37",
      "number": "4",
      "pages": "281--313",
      "doi": "10.1080/07370024.2020.1760869",
      "url": "https://doi.org/10.1080/07370024.2020.1760869",
      "raw_bibtex": "@article{DBLP:journals/hhci/Pe-ThanNFBSH22,\n  author       = {Ei Pa Pa Pe{-}Than and\n                  Alexander Nolte and\n                  Anna Filippova and\n                  Christian Bird and\n                  Steve Scallen and\n                  James D. Herbsleb},\n  title        = {Corporate hackathons, how and why? {A} multiple case study of motivation,\n                  projects proposal and selection, goal setting, coordination, and outcomes},\n  journal      = {Hum. Comput. Interact.},\n  volume       = {37},\n  number       = {4},\n  pages        = {281--313},\n  year         = {2022},\n  url          = {https://doi.org/10.1080/07370024.2020.1760869},\n  doi          = {10.1080/07370024.2020.1760869},\n  timestamp    = {Mon, 05 Feb 2024 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/hhci/Pe-ThanNFBSH22.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/queue/BirdFZFKLG22": {
      "status": "MAPPED",
      "type": "article",
      "title": "Taking Flight with Copilot: Early insights and opportunities of AI-powered pair-programming tools",
      "authors": "Christian Bird and Denae Ford and Thomas Zimmermann and Nicole Forsgren and Eirini Kalliamvakou and Travis Lowdermilk and Idan Gazit",
      "year": "2022",
      "venue": "{ACM",
      "mapped_pdf": "taking_flight.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 10:54:45",
      "extracted_paper_info": {
        "tldr": "Analyzed early Copilot usage through forum posts, a small in-person case study, and a large survey with telemetry to show that accepting AI suggestions correlates with higher perceived productivity while shifting developer work toward reviewing, raising trust, safety, and provenance concerns.",
        "details": {
          "topic": "AI-assisted programming / GitHub Copilot and developer productivity",
          "problem": "Understand how an AI pair-programmer (Copilot) affects developers' productivity, workflows, and concerns (e.g., trust, code quality, security, and licensing) during its early public preview.",
          "approach": "Mixed-methods study: qualitative analysis of 279 Copilot Discussion forum posts to surface use cases and issues; an in‑depth two-day case study with five professional Python developers performing coding tasks while using Copilot; and a large-scale survey (2,047 responses) combined with telemetry linking 11 usage metrics to self-reported productivity.",
          "key_insights": [
            "Acceptance of Copilot suggestions correlates positively with perceived productivity (acceptance rate had the strongest positive correlation among measured metrics).",
            "Using Copilot shifts developer activity from typing code to reading and reviewing suggestions, changing required skills toward assessment and verification.",
            "Users employ Copilot for diverse tasks beyond simple completion (e.g., learning languages, writing tests, generating servers, even text translation), showing broad utility.",
            "Early adopters raised important challenges: potential leakage of secrets, lack of defensive checks in generated code, licensing/copyright uncertainty, and the need for provenance and trust-building UX."
          ],
          "implications": "For researchers and tool builders: design UX that builds trust, surfaces provenance, and helps developers assess suggestions (not just accept them); for organizations and practitioners: invest in review practices, security checks, and legal guidance when adopting AI-generated code; and for future research: measure downstream effects of AI-generated code on defects, testing, and maintenance over the full development lifecycle."
        }
      },
      "tags": [
        "ai-assisted-programming",
        "surveys",
        "telemetry-analysis",
        "tool-adoption-and-trust"
      ],
      "journal": "ACM Queue",
      "volume": "20",
      "number": "6",
      "pages": "35--57",
      "doi": "10.1145/3582083",
      "url": "https://doi.org/10.1145/3582083",
      "raw_bibtex": "@article{DBLP:journals/queue/BirdFZFKLG22,\n  author       = {Christian Bird and\n                  Denae Ford and\n                  Thomas Zimmermann and\n                  Nicole Forsgren and\n                  Eirini Kalliamvakou and\n                  Travis Lowdermilk and\n                  Idan Gazit},\n  title        = {Taking Flight with Copilot: Early insights and opportunities of AI-powered\n                  pair-programming tools},\n  journal      = {{ACM} Queue},\n  volume       = {20},\n  number       = {6},\n  pages        = {35--57},\n  year         = {2022},\n  url          = {https://doi.org/10.1145/3582083},\n  doi          = {10.1145/3582083},\n  timestamp    = {Thu, 09 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/queue/BirdFZFKLG22.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tosem/MaddilaNBGD22": {
      "status": "MAPPED",
      "type": "article",
      "title": "ConE: A Concurrent Edit Detection Tool for Large-scale Software Development",
      "authors": "Chandra Shekhar Maddila and Nachiappan Nagappan and Christian Bird and Georgios Gousios and Arie van Deursen",
      "year": "2022",
      "venue": "{ACM",
      "mapped_pdf": "maddila2022cone.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 10:51:45",
      "extracted_paper_info": {
        "tldr": "ConE is a scalable Azure DevOps service that detects concurrently edited files in active pull requests using lightweight heuristics (Extent of Overlap and Rarely Concurrently Edited files), showing concurrent edits correlate with higher bug risk and providing actionable, low-noise warnings in a large industrial deployment.",
        "details": {
          "topic": "Concurrent edit detection for pull-request-based software development",
          "problem": "Developers working in large, distributed teams often edit the same files in overlapping pull requests, which can cause merge conflicts, semantic bugs, duplicated effort, and lost developer productivity, and existing tools either generate too many false alarms or do not scale.",
          "approach": "The authors performed an empirical study on six large Microsoft repositories (six months of pull-request data, ~67K bug-tagged PRs after filtering) to show correlations between concurrent edits and bug fixes, designed the ConE algorithm based on two heuristics—Extent of Overlap (EOO) and Rarely Concurrently Edited files (RCEs)—tuned conservative thresholds (e.g., EOO ≥ 50%, ≥2 overlapping files, RCE ≥ 2), implemented ConE on Azure DevOps, ran a shadow deployment and then enabled it on 234 repositories, analyzed 26,000 PRs, generated 775 notifications, collected telemetry and developer interviews for evaluation.",
          "key_insights": [
            "Files edited concurrently across active pull requests are more likely to appear in later bug-fix PRs, and concurrent-edit counts correlate with bug fixes more strongly than non-concurrent edits.",
            "Simple, language-agnostic heuristics (EOO and RCE) plus conservative thresholds can drastically reduce false alarms while still surfacing relevant conflicting changes at scale.",
            "Operational deployment (234 repos) yielded 775 recommendations with 71.5% explicitly positive feedback and high interaction (≈2.8 clicks/notification); developers—especially on large, distributed repos—report time savings and reduced duplicate work."
          ],
          "implications": "For researchers: validates lightweight, scalable heuristics as a foundation for more advanced semantic/diff or learned models; for tool builders and platform providers: demonstrates a non-intrusive, configurable service design that integrates into existing workflows and scales to tens of thousands of PRs; for practitioners and developers: offers an actionable early-warning mechanism to reduce merge conflicts, prevent duplicated effort, and save developer time, with tunable thresholds to balance precision and coverage."
        }
      },
      "tags": [
        "recommendation-systems",
        "version-control-and-branching",
        "field-deployment",
        "repository-mining"
      ],
      "journal": "ACM Trans. Softw. Eng. Methodol.",
      "volume": "31",
      "number": "2",
      "pages": "22:1--22:26",
      "doi": "10.1145/3478019",
      "url": "https://doi.org/10.1145/3478019",
      "raw_bibtex": "@article{DBLP:journals/tosem/MaddilaNBGD22,\n  author       = {Chandra Shekhar Maddila and\n                  Nachiappan Nagappan and\n                  Christian Bird and\n                  Georgios Gousios and\n                  Arie van Deursen},\n  title        = {ConE: {A} Concurrent Edit Detection Tool for Large-scale Software\n                  Development},\n  journal      = {{ACM} Trans. Softw. Eng. Methodol.},\n  volume       = {31},\n  number       = {2},\n  pages        = {22:1--22:26},\n  year         = {2022},\n  url          = {https://doi.org/10.1145/3478019},\n  doi          = {10.1145/3478019},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/tosem/MaddilaNBGD22.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tosem/FordSZBJMBHN22": {
      "status": "MAPPED",
      "type": "article",
      "title": "A Tale of Two Cities: Software Developers Working from Home during the COVID-19 Pandemic",
      "authors": "Denae Ford and Margaret-Anne D. Storey and Thomas Zimmermann and Christian Bird and Sonia Jaffe and Chandra Shekhar Maddila and Jenna L. Butler and Brian Houck and Nachiappan Nagappan",
      "year": "2022",
      "venue": "{ACM",
      "mapped_pdf": "ford2022covid.pdf",
      "notes": "Auto-mapped via PDF investigation, score: 0.90",
      "found_pdf": true,
      "found_date": "2025-10-01 10:50:18",
      "extracted_paper_info": {
        "tldr": "Surveying 3,634 Microsoft engineers, the study shows pandemic-driven work-from-home produced a 'tale of two cities' where many developers maintained or increased productivity thanks to focus and flexibility while a substantial minority suffered productivity losses due to interruptions, childcare, communication and connectivity issues.",
        "details": {
          "topic": "Developer productivity and remote work during COVID-19",
          "problem": "An abrupt, organization-wide shift from co-located to home-based work created unknown effects on software engineers' productivity, well‑being, collaboration and what employers should provide to support remote or hybrid work.",
          "approach": "Two anonymous surveys of Microsoft engineers (Survey 1: 1,369 responses from King County; Survey 2: 2,265 responses across the U.S.) combining qualitative open-coding (thematic analysis) and quantitative analysis (descriptive stats, subgroup tests, Lasso + logistic regression), plus triangulation with engineering system data (pull request counts) to identify common benefits, challenges, their prevalence, and association with self-reported productivity; recommendations and limitations are discussed.",
          "key_insights": [
            "Dichotomous outcomes: ~62–68% of respondents reported unchanged or improved productivity while ~32–38% reported decreased productivity, and the share reporting lower productivity declined over the study period.",
            "Benefits strongly associated with preserved or improved productivity include better focus time, fewer distractions/interruptions, flexible schedules and improved home work environments (focus and fewer interruptions have the largest positive effects).",
            "Challenges most strongly linked to reduced productivity are increased distractions/interruptions, lack of motivation, communication friction, connectivity problems, poor home ergonomics/workspace and childcare constraints; interacting challenges (e.g., childcare + less time) greatly amplify negative impact.",
            "Company-level engineering metrics (normalized pull request counts) remained stable or slightly increased, highlighting that aggregate system measures can mask substantial individual variation."
          ],
          "implications": "Organizations should avoid one-size-fits-all remote policies and instead provide targeted support (better hardware, connectivity/VPN, ergonomic stipends, childcare support where possible), clearer guidance and manager training for hybrid/remote work, and preserve both focus time and social/communication practices; researchers should combine self-reports with engineering-system data and study heterogeneous, longitudinal impacts to inform policy and tooling for future hybrid work models."
        }
      },
      "tags": [
        "developer-productivity",
        "surveys",
        "telemetry-analysis",
        "statistical-analysis"
      ],
      "journal": "ACM Trans. Softw. Eng. Methodol.",
      "volume": "31",
      "number": "2",
      "pages": "27:1--27:37",
      "doi": "10.1145/3487567",
      "url": "https://doi.org/10.1145/3487567",
      "raw_bibtex": "@article{DBLP:journals/tosem/FordSZBJMBHN22,\n  author       = {Denae Ford and\n                  Margaret{-}Anne D. Storey and\n                  Thomas Zimmermann and\n                  Christian Bird and\n                  Sonia Jaffe and\n                  Chandra Shekhar Maddila and\n                  Jenna L. Butler and\n                  Brian Houck and\n                  Nachiappan Nagappan},\n  title        = {A Tale of Two Cities: Software Developers Working from Home during\n                  the {COVID-19} Pandemic},\n  journal      = {{ACM} Trans. Softw. Eng. Methodol.},\n  volume       = {31},\n  number       = {2},\n  pages        = {27:1--27:37},\n  year         = {2022},\n  url          = {https://doi.org/10.1145/3487567},\n  doi          = {10.1145/3487567},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/tosem/FordSZBJMBHN22.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/SvyatkovskiyFGM22": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Program merge conflict resolution via neural transformers",
      "authors": "Alexey Svyatkovskiy and Sarah Fakhoury and Negar Ghorbani and Todd Mytkowicz and Elizabeth Dinella and Christian Bird and Jinu Jang and Neel Sundaresan and Shuvendu K. Lahiri",
      "year": "2022",
      "venue": "Proceedings of the 30th {ACM",
      "mapped_pdf": "svyatkovskiy2022merge.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 10:49:29",
      "extracted_paper_info": {
        "tldr": "MergeBERT uses token-level three-way differencing plus a multi-input transformer to classify and synthesize merge conflict resolutions, achieving substantially higher accuracy than prior tools across multiple languages.",
        "details": {
          "topic": "Automated program merge / merge conflict resolution using neural transformers",
          "problem": "Merge conflicts during collaborative development are frequent, time-consuming, and often require manual intervention; existing structured, semi-structured and prior neural approaches either lack coverage, fail on token-level interleavings, or are language-specific.",
          "approach": "The authors introduce MergeBERT: (1) apply token-level diff3 to localize conflicts and produce aligned token sequences and edit sequences, (2) define a small set of primitive token-level merge patterns (classification labels) observed in real merges, (3) encode the multi-input (a|o, o|a, b|o, o|b) sequences with edit-type embeddings into a shared transformer encoder (pretrained CodeBERT finetuned), and (4) classify each token-level conflict into one of the primitive resolution patterns and reconstruct the merged lines; evaluated on ~220k train / 54k test merges mined from 100k GitHub repos across JavaScript, TypeScript, Java, and C#, compared to baselines (LM, DeepMerge) and structured/semi-structured tools, plus an interview-based user study with 25 developers on 122 real conflicts.",
          "key_insights": [
            "Token-level three-way differencing localizes conflicts and reveals that the vast majority of token-level resolutions follow a small set of primitive patterns (≈74% are exactly tokens from one side, ≈23% are simple concatenations), enabling casting resolution as classification.",
            "MergeBERT (transformer + edit-type embeddings) achieves large gains over prior approaches: top-1 precision/accuracy in the mid-60% range (precision ≈63–69%, accuracy ≈63–68%), ≈2–3× improvement over state-of-the-art structured/semi-structured and prior neural methods; token-level diff3 alone has high precision but low coverage.",
            "The model is language-agnostic in practice (supports JS, TS, Java, C#) and produces syntactically valid suggestions >97% of the time; a multilingual model performs nearly as well as language-specific models.",
            "A user study shows practical acceptance is higher than strict string-matching metrics: for 54% of sampled conflicts at least one of the top-3 suggestions was deemed acceptable (many semantically equivalent), while ≈16% require external/project-level context and some oracles contain tangled unrelated changes."
          ],
          "implications": "For researchers: demonstrates a viable, language-flexible neural strategy (token-diff + classification) for merge synthesis and highlights the need to incorporate external/project context and better oracles; for tool builders and practitioners: MergeBERT can reduce manual merge effort and CI delays by automatically resolving many real conflicts or providing high-quality suggestions, but should be integrated with syntax checks, options for human review, and mechanisms to access project-level context to handle the remaining cases."
        }
      },
      "tags": [
        "ai-for-software-engineering",
        "recommendation-systems",
        "repository-mining",
        "interviews"
      ],
      "booktitle": "Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2022, Singapore, Singapore, November 14-18, 2022",
      "publisher": "ACM",
      "pages": "822--833",
      "doi": "10.1145/3540250.3549163",
      "url": "https://doi.org/10.1145/3540250.3549163",
      "editor": "Abhik Roychoudhury and Cristian Cadar and Miryung Kim",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/SvyatkovskiyFGM22,\n  author       = {Alexey Svyatkovskiy and\n                  Sarah Fakhoury and\n                  Negar Ghorbani and\n                  Todd Mytkowicz and\n                  Elizabeth Dinella and\n                  Christian Bird and\n                  Jinu Jang and\n                  Neel Sundaresan and\n                  Shuvendu K. Lahiri},\n  editor       = {Abhik Roychoudhury and\n                  Cristian Cadar and\n                  Miryung Kim},\n  title        = {Program merge conflict resolution via neural transformers},\n  booktitle    = {Proceedings of the 30th {ACM} Joint European Software Engineering\n                  Conference and Symposium on the Foundations of Software Engineering,\n                  {ESEC/FSE} 2022, Singapore, Singapore, November 14-18, 2022},\n  pages        = {822--833},\n  publisher    = {{ACM}},\n  year         = {2022},\n  url          = {https://doi.org/10.1145/3540250.3549163},\n  doi          = {10.1145/3540250.3549163},\n  timestamp    = {Sun, 19 Jan 2025 13:13:21 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/SvyatkovskiyFGM22.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tse/JohnsonZB21": {
      "status": "MAPPED",
      "type": "article",
      "title": "The Effect of Work Environments on Productivity and Satisfaction of Software Engineers",
      "authors": "Brittany Johnson and Thomas Zimmermann and Christian Bird",
      "year": "2021",
      "venue": "{IEEE",
      "mapped_pdf": "johnson2019environment.pdf",
      "notes": "Auto-mapped via PDF investigation, score: 2.10",
      "extracted_paper_info": {
        "tldr": "A mixed-method study of 1,159 Microsoft employees finds that the ability to work privately and to communicate with team members are the strongest predictors of software engineers' satisfaction and self‑reported productivity, and that private offices, easy access to focus rooms, ergonomic furniture, and team-centered open spaces with social norms improve outcomes.",
        "details": {
          "topic": "Physical work environments and software engineer productivity",
          "problem": "Organizations have adopted many office layouts (open, private, hybrid) but there is little empirical evidence about which physical-environment factors specifically affect software engineers' satisfaction and productivity compared with other office workers.",
          "approach": "Mixed methods at Microsoft: an anonymous recruitment survey (297 responses), 19 semi-structured interviews with card-sorted qualitative analysis (589 quote cards → six themes), and a large follow-up survey (843 responses) for a total of 1,159 participants across five job disciplines; used regression models (linear and logistic) to relate survey factors (e.g., privacy, communication, furniture, social norms, room availability) and demographics to self-reported satisfaction and perceived productivity.",
          "key_insights": [
            "Ability to work privately with few interruptions and ability to communicate with team/leads are the strongest, consistent predictors of overall satisfaction across disciplines.",
            "Overall satisfaction and the ability to work privately are the largest contributors to self‑assessed productivity; private offices are associated with higher perceived productivity across all groups.",
            "For software engineers specifically, proximity to team members (room composition), social norms/signaling, ergonomic furniture, and access to windows/decoration additionally influence satisfaction and productivity.",
            "Open/shared spaces can work when teams are colocated and supportive social norms exist, but productivity declines in larger shared spaces or when teammates are not nearby; easy access to focus/meeting rooms improves both satisfaction and perceived productivity."
          ],
          "implications": "Designers and managers should balance private and collaborative spaces (team-centric pods, private offices or focus rooms), invest in ergonomics and meeting/focus room availability, and cultivate explicit social norms to reduce interruptions; researchers should not assume general office findings transfer to software engineering and should combine qualitative and quantitative measures (including objective productivity metrics) in future work."
        }
      },
      "tags": [
        "developer-productivity",
        "surveys",
        "interviews",
        "statistical-analysis"
      ],
      "journal": "IEEE Trans. Software Eng.",
      "volume": "47",
      "number": "4",
      "pages": "736--757",
      "doi": "10.1109/TSE.2019.2903053",
      "url": "https://doi.org/10.1109/TSE.2019.2903053",
      "raw_bibtex": "@article{DBLP:journals/tse/JohnsonZB21,\n  author       = {Brittany Johnson and\n                  Thomas Zimmermann and\n                  Christian Bird},\n  title        = {The Effect of Work Environments on Productivity and Satisfaction of\n                  Software Engineers},\n  journal      = {{IEEE} Trans. Software Eng.},\n  volume       = {47},\n  number       = {4},\n  pages        = {736--757},\n  year         = {2021},\n  url          = {https://doi.org/10.1109/TSE.2019.2903053},\n  doi          = {10.1109/TSE.2019.2903053},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/tse/JohnsonZB21.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tse/MeyerBBZ21": {
      "status": "MAPPED",
      "type": "article",
      "title": "Today Was a Good Day: The Daily Life of Software Developers",
      "authors": "André N. Meyer and Earl T. Barr and Christian Bird and Thomas Zimmermann",
      "year": "2021",
      "venue": "{IEEE",
      "mapped_pdf": "meyer2019today.pdf",
      "notes": "Auto-mapped via PDF investigation, score: 1.40",
      "extracted_paper_info": {
        "tldr": "A large-scale survey of 5,971 Microsoft developers identifies what makes a workday feel good or typical, showing that developer agency and a balance between focused coding and collaboration are central while meetings and email have nuanced effects.",
        "details": {
          "topic": "Developer workdays, productivity, and job satisfaction",
          "problem": "Software teams lack a clear, evidence-based understanding of what makes a developer's workday 'good' or 'typical', which limits informed choices about processes, tools, scheduling and evaluation that could improve productivity and job satisfaction.",
          "approach": "Mixed-method study: preliminary interviews to build an activity taxonomy, then a large anonymous survey (37,792 invitations, 5,971 responses) asking about the previous workday (time-use in minutes, binary good/typical ratings and free-text explanations). Qualitative analysis used grounded-theory coding to build conceptual frameworks for 'good' and 'typical' days; quantitative analysis computed time-use statistics, tested relationships (interruptions, meetings), and clustered days into six workday types using PAM.",
          "key_insights": [
            "Agency (developers' control over their day) is a primary driver: when workdays align with expectations and developers can avoid unwanted disruptions they are more likely to report good and typical days.",
            "Good workdays are defined by creating value and making visible progress plus efficient, uninterrupted time—successful days balance focused development work and necessary collaboration.",
            "Meetings and interruptions are not uniformly negative: they harm productivity during coding-focused phases but are often constructive and acceptable during planning, specification and release phases; scheduling and phase-awareness matter.",
            "Contrary to common assumptions, email was rarely cited as a cause of bad or atypical days; clustering of time-use revealed six distinct day types (e.g., Coding Day, Meeting Day) and development-heavy days were rated better more often."
          ],
          "implications": "For managers: increase developer agency (flexible hours, veto power over meeting placement, no-meeting days, support work-from-home for focused tasks), prioritize reducing administrative and infrastructure friction, and evaluate collaborative contributions alongside coding output; for developers and teams: schedule collaboration when phases benefit from it and protect uninterrupted coding blocks during development phases; for researchers: account for project phase, day type and autonomy when measuring and modeling developer productivity and well‑being rather than assuming uniform effects (e.g., of meetings or email)."
        }
      },
      "tags": [
        "developer-productivity",
        "surveys",
        "interviews",
        "statistical-analysis"
      ],
      "journal": "IEEE Trans. Software Eng.",
      "volume": "47",
      "number": "5",
      "pages": "863--880",
      "doi": "10.1109/TSE.2019.2904957",
      "url": "https://doi.org/10.1109/TSE.2019.2904957",
      "raw_bibtex": "@article{DBLP:journals/tse/MeyerBBZ21,\n  author       = {Andr{\\'{e}} N. Meyer and\n                  Earl T. Barr and\n                  Christian Bird and\n                  Thomas Zimmermann},\n  title        = {Today Was a Good Day: The Daily Life of Software Developers},\n  journal      = {{IEEE} Trans. Software Eng.},\n  volume       = {47},\n  number       = {5},\n  pages        = {863--880},\n  year         = {2021},\n  url          = {https://doi.org/10.1109/TSE.2019.2904957},\n  doi          = {10.1109/TSE.2019.2904957},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/tse/MeyerBBZ21.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tse/KochharKNZB21": {
      "status": "MAPPED",
      "type": "article",
      "title": "Moving from Closed to Open Source: Observations from Six Transitioned Projects to GitHub",
      "authors": "Pavneet Singh Kochhar and Eirini Kalliamvakou and Nachiappan Nagappan and Thomas Zimmermann and Christian Bird",
      "year": "2021",
      "venue": "{IEEE",
      "mapped_pdf": "kochhar2020moving.pdf",
      "notes": "Auto-mapped via PDF investigation, score: 2.10",
      "extracted_paper_info": {
        "tldr": "Analyzes why and how six large Microsoft projects moved from closed to open source on GitHub, documenting the preparation steps, process changes, developer perceptions, and community response.",
        "details": {
          "topic": "Transition from closed-source to open-source development (GitHub migrations)",
          "problem": "Organizations frequently consider open-sourcing internal projects but there is little systematic knowledge about the motivations, engineering and organizational steps required, the challenges encountered, and how communities respond.",
          "approach": "Mixed-method study of six Microsoft projects (CoreFX, CoreCLR, Roslyn, Entity Framework, MVC, Orleans) using 11 internal developer interviews, 5 manager interviews, 11 external contributor interviews, a survey of Microsoft developers (62 valid responses), and quantitative analysis of GitHub activity (issues, pull requests, comments) before and after open-sourcing.",
          "key_insights": [
            "Primary motivations to open-source included engaging and building trust with the community, getting faster feedback/bug reports, improving developer skills and recruiting potential hires, and gaining business/trust benefits.",
            "Successful transition requires substantial preparation: sanitizing code, changing build systems, adding documentation, enabling cross-platform support, and moving from internal tools/TFS to Git/GitHub with CI and test frameworks.",
            "Outcomes are mixed: Git/GitHub and CI improved speed, transparency, and community participation, but testing, deep code reviews, and some internal tooling/bug-tracking features became harder and required new processes.",
            "The community responded actively with issues and pull requests that improved bug quality and features, but maintaining two code copies, triaging contributions, and setting clear contribution expectations are ongoing challenges."
          ],
          "implications": "Teams planning to open-source should invest in infrastructure (build/test/CI), sanitize and document code, harmonize processes across projects, choose an accessible hosting platform (e.g., GitHub), communicate clear goals and contribution guidelines, and be prepared for increased community engagement and both benefits (faster feedback, talent pipeline) and costs (review/testing overhead, permission management)."
        }
      },
      "tags": [
        "open-source-software",
        "repository-mining",
        "interviews",
        "surveys"
      ],
      "journal": "IEEE Trans. Software Eng.",
      "volume": "47",
      "number": "9",
      "pages": "1838--1856",
      "doi": "10.1109/TSE.2019.2937025",
      "url": "https://doi.org/10.1109/TSE.2019.2937025",
      "raw_bibtex": "@article{DBLP:journals/tse/KochharKNZB21,\n  author       = {Pavneet Singh Kochhar and\n                  Eirini Kalliamvakou and\n                  Nachiappan Nagappan and\n                  Thomas Zimmermann and\n                  Christian Bird},\n  title        = {Moving from Closed to Open Source: Observations from Six Transitioned\n                  Projects to GitHub},\n  journal      = {{IEEE} Trans. Software Eng.},\n  volume       = {47},\n  number       = {9},\n  pages        = {1838--1856},\n  year         = {2021},\n  url          = {https://doi.org/10.1109/TSE.2019.2937025},\n  doi          = {10.1109/TSE.2019.2937025},\n  timestamp    = {Mon, 28 Aug 2023 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/tse/KochharKNZB21.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tse/StoreyZBCMK21": {
      "status": "MAPPED",
      "type": "article",
      "title": "Towards a Theory of Software Developer Job Satisfaction and Perceived Productivity",
      "authors": "Margaret-Anne D. Storey and Thomas Zimmermann and Christian Bird and Jacek Czerwonka and Brendan Murphy and Eirini Kalliamvakou",
      "year": "2021",
      "venue": "{IEEE",
      "mapped_pdf": "storey2020productivity.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Develops and validates a theory that developer job satisfaction and perceived productivity are bidirectionally linked and mediated by specific social and technical factors and by work-context variables.",
        "details": {
          "topic": "Software developer job satisfaction and perceived productivity",
          "problem": "Organizations and researchers often assume satisfaction and productivity are interchangeable or directly correlated, but which factors drive each construct and how they relate across development contexts is unclear.",
          "approach": "Combined literature review and a three-month site visit at Microsoft to derive candidate factors, then iteratively designed and deployed surveys (final N=465 developers) measuring importance and satisfaction for 44 factors, impact of 24 challenges, and self-reported time on activities; used Spearman correlations (with Bonferroni correction), hierarchical clustering to form composite factors, PAM clustering for work-type groups, and stepwise linear regression (with subgroup analyses by tenure and work-type) to build and instantiate a descriptive theory.",
          "key_insights": [
            "Overall job satisfaction and perceived productivity exhibit a bidirectional relationship, but that relationship is mediated by multiple social and technical composite factors (e.g., impactful work, work culture, autonomy, and engineering systems) so one cannot substitute for the other.",
            "Manager quality and team/work culture strongly influence many satisfaction dimensions: when 'manager' is reported as a challenge it correlates with lower satisfaction across numerous factors.",
            "High-impact challenges for developers are poor software architecture, legacy code, and lack of documentation; engineering tools/processes, interruptions, and many external dependencies also substantially reduce perceived productivity and satisfaction.",
            "Work context (seniority and developer 'type of work' clusters) changes which factors explain satisfaction and perceived productivity: juniors, seniors, heavy coders and those spending more time in meetings have different significant predictors."
          ],
          "implications": "Researchers should treat satisfaction and perceived productivity as related but distinct constructs, adopt multi-factor models and context-aware analyses, and can reuse the survey/instrument to instantiate the theory in other settings; practitioners should address both technical issues (architecture, legacy code, documentation, tools/processes) and non-technical ones (manager behavior, work culture, meaningful/impactful tasks, autonomy) and tailor interventions to developer experience and time-allocation profiles rather than relying on a single proxy metric."
        }
      },
      "tags": [
        "developer-productivity",
        "engineering-management",
        "surveys",
        "statistical-analysis"
      ],
      "journal": "IEEE Trans. Software Eng.",
      "volume": "47",
      "number": "10",
      "pages": "2125--2142",
      "doi": "10.1109/TSE.2019.2944354",
      "url": "https://doi.org/10.1109/TSE.2019.2944354",
      "raw_bibtex": "@article{DBLP:journals/tse/StoreyZBCMK21,\n  author       = {Margaret{-}Anne D. Storey and\n                  Thomas Zimmermann and\n                  Christian Bird and\n                  Jacek Czerwonka and\n                  Brendan Murphy and\n                  Eirini Kalliamvakou},\n  title        = {Towards a Theory of Software Developer Job Satisfaction and Perceived\n                  Productivity},\n  journal      = {{IEEE} Trans. Software Eng.},\n  volume       = {47},\n  number       = {10},\n  pages        = {2125--2142},\n  year         = {2021},\n  url          = {https://doi.org/10.1109/TSE.2019.2944354},\n  doi          = {10.1109/TSE.2019.2944354},\n  timestamp    = {Wed, 03 Nov 2021 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/tse/StoreyZBCMK21.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tse/KovalenkoTPBB20": {
      "status": "MAPPED",
      "type": "article",
      "title": "Does Reviewer Recommendation Help Developers?",
      "authors": "Vladimir Kovalenko and Nava Tintarev and Evgeny Pasynkov and Christian Bird and Alberto Bacchelli",
      "year": "2020",
      "venue": "{IEEE",
      "mapped_pdf": "kovalenko2019revrec.pdf",
      "notes": "Auto-mapped via PDF investigation, score: 1.50",
      "extracted_paper_info": {
        "tldr": "An in vivo study at JetBrains and Microsoft shows that historical reviewer recommenders are accurate by offline metrics but rarely influence reviewer choice or provide added value for most developers, who usually already know whom to ask.",
        "details": {
          "topic": "Reviewer recommendation for code review tools",
          "problem": "Academic evaluations of reviewer recommenders focus on offline accuracy against historical reviewers and ignore whether recommendations influence users, are perceived as helpful, or meet developers' information needs in real-world contexts.",
          "approach": "Mixed-method in vivo study: reproduced recommendations for over 21,000 JetBrains reviews (comparing two deployed models: Recency and Recency+Size) to measure accuracy, coverage, and any change around a model switch; conducted 4 interviews and a 16-person survey at JetBrains; validated and broadened findings with a 507-response survey at Microsoft; analyzed developers' information needs and difficult reviewer-selection scenarios.",
          "key_insights": [
            "No measurable influence of the deployed recommender on reviewers chosen—accuracy did not shift when the production model changed, suggesting users rarely follow recommendations in this setting.",
            "Developers generally perceive recommendations as relevant but often find them unhelpful because they typically already know the appropriate reviewer (high prior knowledge/code ownership).",
            "A more conservative model (Recency+Size) produced fewer, more focused recommendations and higher 'intersection/recommended' ratios, highlighting that coverage and candidate quality matter beyond raw accuracy metrics.",
            "Developers need additional information (review history, ownership, code-dependency context, reviewer qualities and availability), and certain contexts (legacy code, unfamiliar areas, new team members, unclear ownership) make reviewer selection harder and where recommenders could be more useful."
          ],
          "implications": "Evaluation and design of reviewer recommenders should be user- and context-centric: researchers should measure impact on behavior and UX (not only offline accuracy) and explore metrics like coverage, sparsity, and situational usefulness; tool builders should surface richer signals (review history, ownership, dependencies, reviewer reputation/availability), trigger recommendations only when helpful (e.g., newcomers or unfamiliar code), and consider objectives beyond matching past reviewers (knowledge transfer, shared ownership); practitioners should not assume out-of-the-box recommenders are universally valuable—their benefit is likely higher in large teams, onboarding, or open-source contexts."
        }
      },
      "tags": [
        "code-review",
        "recommendation-systems",
        "tool-adoption-and-trust",
        "field-deployment"
      ],
      "journal": "IEEE Trans. Software Eng.",
      "volume": "46",
      "number": "7",
      "pages": "710--731",
      "doi": "10.1109/TSE.2018.2868367",
      "url": "https://doi.org/10.1109/TSE.2018.2868367",
      "raw_bibtex": "@article{DBLP:journals/tse/KovalenkoTPBB20,\n  author       = {Vladimir Kovalenko and\n                  Nava Tintarev and\n                  Evgeny Pasynkov and\n                  Christian Bird and\n                  Alberto Bacchelli},\n  title        = {Does Reviewer Recommendation Help Developers?},\n  journal      = {{IEEE} Trans. Software Eng.},\n  volume       = {46},\n  number       = {7},\n  pages        = {710--731},\n  year         = {2020},\n  url          = {https://doi.org/10.1109/TSE.2018.2868367},\n  doi          = {10.1109/TSE.2018.2868367},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/tse/KovalenkoTPBB20.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/HenkelBLR20": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Learning from, understanding, and supporting DevOps artifacts for docker",
      "authors": "Jordan Henkel and Christian Bird and Shuvendu K. Lahiri and Thomas W. Reps",
      "year": "2020",
      "venue": "{ICSE",
      "mapped_pdf": "henkel2020docker.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Introduces binnacle, a toolset that uses phased parsing to build structured ASTs for Dockerfiles, automatically mines semantic Tree Association Rules from a large GitHub corpus, and enforces those rules to detect and reduce best‑practice and bug-prone patterns.",
        "details": {
          "topic": "Static analysis and rule mining for DevOps artifacts (Dockerfiles)",
          "problem": "DevOps artifacts like Dockerfiles embed nested languages (e.g., shell and command‑specific option grammars) and lack semantics-aware tooling; as a result, many Dockerfiles on GitHub (and in industry) violate expert best practices, causing build failures, larger images, and longer builds.",
          "approach": "Built binnacle: a distributed data ingestor and toolset that (1) collected ~900k GitHub repos and 178k unique Dockerfiles (with a 400-file Gold Set from docker-library), (2) introduced phased parsing (three phases: top-level, embedded shell, command-option grammars) and abstraction via regexes to resolve nested language structure, (3) encoded rules as Tree Association Rules (TARs), (4) implemented a frequent sub-tree based rule miner (CMTreeMiner) to mine local TARs, and (5) implemented a static TAR enforcement engine; evaluated phased parsing effectiveness, miner recall against 15 filtered Gold Rules (9 local), and corpus violation rates.",
          "key_insights": [
            "Phased parsing (including parsers for top-50 command tools) reduced effectively-uninterpretable AST leaves by over 80%: Phase I had ~19.3% EU leaves, Phase II rose to ~33.2% EU, and Phase III left only ~3.7% unresolved on average.",
            "Automated mining returned 26 local TARs, recovering 6 of 9 local Gold Rules (≈67% recall) and discovering 16 previously uncollected rules (including 4 novel semantic rules), showing practical automated discovery of actionable patterns.",
            "Dockerfiles in the wild violate expert-derived Gold Rules about five times more often than Docker's official Gold Set (average violation rate ~33.15% vs ~6.65%), and industrial Dockerfiles showed similarly poor quality."
          ],
          "implications": "For researchers: demonstrates that semantic rule mining over nested DevOps artifacts is tractable with staged parsing and frequent subtree mining and provides a dataset and encoding (TARs) for further work; for tool builders and practitioners: mined rules and the enforcement engine can be integrated into IDEs, linters, and CI to prevent build failures, reduce image size and latency, and raise Dockerfile quality across open-source and industrial codebases."
        }
      },
      "tags": [
        "devops-and-infrastructure-as-code",
        "program-analysis",
        "dataset-and-tooling",
        "repository-mining"
      ],
      "booktitle": "ICSE '20: 42nd International Conference on Software Engineering, Seoul, South Korea, 27 June - 19 July, 2020",
      "publisher": "ACM",
      "pages": "38--49",
      "doi": "10.1145/3377811.3380406",
      "url": "https://doi.org/10.1145/3377811.3380406",
      "editor": "Gregg Rothermel and Doo-Hwan Bae",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/HenkelBLR20,\n  author       = {Jordan Henkel and\n                  Christian Bird and\n                  Shuvendu K. Lahiri and\n                  Thomas W. Reps},\n  editor       = {Gregg Rothermel and\n                  Doo{-}Hwan Bae},\n  title        = {Learning from, understanding, and supporting DevOps artifacts for\n                  docker},\n  booktitle    = {{ICSE} '20: 42nd International Conference on Software Engineering,\n                  Seoul, South Korea, 27 June - 19 July, 2020},\n  pages        = {38--49},\n  publisher    = {{ACM}},\n  year         = {2020},\n  url          = {https://doi.org/10.1145/3377811.3380406},\n  doi          = {10.1145/3377811.3380406},\n  timestamp    = {Mon, 04 Jan 2021 15:18:44 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/HenkelBLR20.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/msr/HenkelBLR20": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "A Dataset of Dockerfiles",
      "authors": "Jordan Henkel and Christian Bird and Shuvendu K. Lahiri and Thomas W. Reps",
      "year": "2020",
      "venue": "{MSR",
      "mapped_pdf": "henkel2020dockermsr.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "A curated corpus of ~178,000 GitHub Dockerfiles is provided in five progressively richer representations (from raw source to abstracted, three-level ASTs) together with parsers and schemas to enable structured mining, static checking, and analysis of nested shell commands and common utilities.",
        "details": {
          "topic": "Dataset and tooling for Dockerfile analysis",
          "problem": "Dockerfiles are widely used but hard to analyze semantically because they contain nested languages (Dockerfile syntax, embedded shell scripts, and command-specific options), and existing tooling often only handles shallow syntactic checks.",
          "approach": "The authors collected Dockerfiles from GitHub (initially ~250k, filtered to ~219k then deduplicated to ~178k unique), captured metadata and a Gold subset of expert-maintained files, and produced five dataset representations: raw sources, deduplicated sources, Phase-I ASTs (Docker ASTs), Phase-II ASTs (embedded shell parsed with ShellCheck), Phase-III ASTs (third-level parsers for the 50 most common shell commands generated from hand-crafted schemas), and an abstracted Phase-III with regex-based literal annotations; all artifacts and tools (parsers, schemas, metadata, JSONL outputs) were released for mining and static checking experiments.",
          "key_insights": [
            "Providing three nested levels of structured parsing (Dockerfile → shell script → command-specific options) makes semantic mining and static checking tractable for many real-world Dockerfiles.",
            "Manually encoding schemas and generating parsers for the 50 most used commands (15–30 minutes per schema) yields fast, reusable third-level parsers that enable fine-grained checks (e.g., enforcing specific npm flags).",
            "A Gold set of 432 expert Dockerfiles allows comparative studies; the authors found ~5× more rule violations in the general corpus than in Gold files using mined/static rules.",
            "Lightweight abstractions (regex-based literal annotations) on top of ASTs make exploratory analyses—like detecting URLs or package references—straightforward without further deep parsing."
          ],
          "implications": "The dataset and tooling lower the barrier for researchers to mine tree-based rules, build semantics-aware linters/static analyzers, and explore automated repair or dependency analyses for containerized software; practitioners and tool developers can use the provided ASTs, parsers, and Gold rules to improve IDE support, detect common misconfigurations, and prioritize fixes, though findings are limited to Dockerfiles sourced from GitHub."
        }
      },
      "tags": [
        "dataset-and-tooling",
        "devops-and-infrastructure-as-code",
        "repository-mining",
        "program-analysis"
      ],
      "booktitle": "MSR '20: 17th International Conference on Mining Software Repositories, Seoul, Republic of Korea, 29-30 June, 2020",
      "publisher": "ACM",
      "pages": "528--532",
      "doi": "10.1145/3379597.3387498",
      "url": "https://doi.org/10.1145/3379597.3387498",
      "editor": "Sunghun Kim and Georgios Gousios and Sarah Nadi and Joseph Hejderup",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/HenkelBLR20,\n  author       = {Jordan Henkel and\n                  Christian Bird and\n                  Shuvendu K. Lahiri and\n                  Thomas W. Reps},\n  editor       = {Sunghun Kim and\n                  Georgios Gousios and\n                  Sarah Nadi and\n                  Joseph Hejderup},\n  title        = {A Dataset of Dockerfiles},\n  booktitle    = {{MSR} '20: 17th International Conference on Mining Software Repositories,\n                  Seoul, Republic of Korea, 29-30 June, 2020},\n  pages        = {528--532},\n  publisher    = {{ACM}},\n  year         = {2020},\n  url          = {https://doi.org/10.1145/3379597.3387498},\n  doi          = {10.1145/3379597.3387498},\n  timestamp    = {Wed, 19 Mar 2025 17:29:46 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/HenkelBLR20.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/nsdi/MehtaB0BMAABK20": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Rex: Preventing Bugs and Misconfiguration in Large Services Using Correlated Change Analysis",
      "authors": "Sonu Mehta and Ranjita Bhagwan and Rahul Kumar and Chetan Bansal and Chandra Shekhar Maddila and Balasubramanyan Ashok and Sumit Asthana and Christian Bird and Aditya Kumar",
      "year": "2020",
      "venue": "17th {USENIX",
      "mapped_pdf": "mehta2020rex.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Rex uses file-level association rule mining combined with syntactic differencing and generalization to automatically detect and suggest missing correlated code and configuration changes, reducing bugs and misconfiguration-induced outages in large services.",
        "details": {
          "topic": "Correlated change analysis for code and configuration management",
          "problem": "Engineers frequently miss making correlated changes across code and configuration files (e.g., tests, flighting configs, firewall rules), causing build failures, security risks, deployment delays, or service outages, and these correlations are not documented or consistently machine-checkable.",
          "approach": "Rex mines months of commit histories per repository using FP-Growth to discover file-level frequent item-sets and association rules, then refines rules by computing syntactic diffs on changed files (parse-tree differencing) and applying anti-unification to learn generalized change patterns; a suggestion engine surfaces recommendations as pull-request comments, models are tuned per-repo daily (varying minimum support) and Rex has been deployed on 360 Microsoft repositories with evaluation and a user study (4926 accepted suggestions reported).",
          "key_insights": [
            "A two-step method—coarse file-level association rule mining followed by syntactic generalization/refinement—scales to large repositories and substantially reduces false positives compared to association mining alone.",
            "Model precision on historical test data is reasonably high (≈66–82%) but deployment precision is much lower (≈7–17%) because many correlations are already addressed before PRs; nonetheless Rex still catches high-impact missed changes.",
            "Correlations are diverse, service-specific, and time-varying, so per-repository and periodic parameter tuning (especially minimum support) is essential to maintain effectiveness.",
            "Engineers value interpretable suggestions with example commits; many false-positives are still considered relevant or useful for awareness even if not immediately acted upon."
          ],
          "implications": "For practitioners, Rex demonstrates a practical, generally-applicable tool that can be integrated into CI/PR workflows to surface high-impact missing changes and prevent outages; for researchers, it shows that combining scalable, coarse-grained mining with syntactic refinement and per-project tuning is an effective strategy for detecting emergent cross-file correlations, while highlighting trade-offs between recall, precision, and deployment timing that warrant further study (e.g., IDE-level suggestions, finer-grained semantics, and improved refinement to reduce false-positives)."
        }
      },
      "tags": [
        "recommendation-systems",
        "repository-mining",
        "field-deployment",
        "program-analysis"
      ],
      "booktitle": "17th USENIX Symposium on Networked Systems Design and Implementation, NSDI 2020, Santa Clara, CA, USA, February 25-27, 2020",
      "publisher": "USENIX Association",
      "pages": "435--448",
      "url": "https://www.usenix.org/conference/nsdi20/presentation/mehta",
      "editor": "Ranjita Bhagwan and George Porter",
      "raw_bibtex": "@inproceedings{DBLP:conf/nsdi/MehtaB0BMAABK20,\n  author       = {Sonu Mehta and\n                  Ranjita Bhagwan and\n                  Rahul Kumar and\n                  Chetan Bansal and\n                  Chandra Shekhar Maddila and\n                  Balasubramanyan Ashok and\n                  Sumit Asthana and\n                  Christian Bird and\n                  Aditya Kumar},\n  editor       = {Ranjita Bhagwan and\n                  George Porter},\n  title        = {Rex: Preventing Bugs and Misconfiguration in Large Services Using\n                  Correlated Change Analysis},\n  booktitle    = {17th {USENIX} Symposium on Networked Systems Design and Implementation,\n                  {NSDI} 2020, Santa Clara, CA, USA, February 25-27, 2020},\n  pages        = {435--448},\n  publisher    = {{USENIX} Association},\n  year         = {2020},\n  url          = {https://www.usenix.org/conference/nsdi20/presentation/mehta},\n  timestamp    = {Fri, 15 Apr 2022 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/conf/nsdi/MehtaB0BMAABK20.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/software/Pe-ThanNFBSH19": {
      "status": "MAPPED",
      "type": "article",
      "title": "Designing Corporate Hackathons With a Purpose: The Future of Software Development",
      "authors": "Ei Pa Pa Pe-Than and Alexander Nolte and Anna Filippova and Christian Bird and Steve Scallen and James D. Herbsleb",
      "year": "2019",
      "venue": "{IEEE",
      "mapped_pdf": "than2018designing.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Analyzes how specific hackathon design choices (competition vs collaboration, participant selection, project/team formation, pre/post work) influence outcomes such as product innovation, learning, networking, and workforce development, based on empirical studies and literature.",
        "details": {
          "topic": "Design and outcomes of hackathons in organizational contexts",
          "problem": "Organizations run hackathons for many purposes (innovation, learning, networking, culture change), but it is unclear which design choices best achieve particular goals and what tradeoffs those choices introduce.",
          "approach": "Mixed-methods empirical study and literature synthesis: ethnographic observation of 10 hackathons across scientific communities, a large corporate event, and universities; 103 interviews with organizers and participants; four post-hackathon surveys; and a review of published research to identify goals, design options, and tradeoffs—with a focus on corporate hackathons.",
          "key_insights": [
            "Hackathons can serve multiple distinct goals beyond prototyping (enriching intracompany networks, collaborative learning, culture change, workforce development), and organizers and participants often have different priorities.",
            "Core design choices—competitive vs. collaborative incentives, attendee skill mix, project selection method, team formation, and pre/post work—strongly shape which goals are achieved and produce tradeoffs.",
            "Skill diversity and open idea generation increase creativity and learning but can slow technical progress and coordination; mentoring and manageable novice-to-expert ratios help mitigate this.",
            "Competition increases effort and distinct solutions but can reduce cross-team communication and demotivate many participants; sustained impact of prototypes typically requires organizational follow-up and support."
          ],
          "implications": "Design hackathons intentionally to match stated goals: choose incentives (competition or collaboration), recruitment/selection, and team formation practices that align with desired outcomes; provide mentorship, encourage appropriate prework, and plan post-event support and evaluation so prototypes and social learning persist—insights useful for researchers studying organizing forms and practitioners implementing hackathons in companies and universities."
        }
      },
      "tags": [
        "engineering-management",
        "developer-social-networks",
        "interviews",
        "surveys",
        "case-study"
      ],
      "journal": "IEEE Softw.",
      "volume": "36",
      "number": "1",
      "pages": "15--22",
      "doi": "10.1109/MS.2018.290110547",
      "url": "https://doi.org/10.1109/MS.2018.290110547",
      "raw_bibtex": "@article{DBLP:journals/software/Pe-ThanNFBSH19,\n  author       = {Ei Pa Pa Pe{-}Than and\n                  Alexander Nolte and\n                  Anna Filippova and\n                  Christian Bird and\n                  Steve Scallen and\n                  James D. Herbsleb},\n  title        = {Designing Corporate Hackathons With a Purpose: The Future of Software\n                  Development},\n  journal      = {{IEEE} Softw.},\n  volume       = {36},\n  number       = {1},\n  pages        = {15--22},\n  year         = {2019},\n  url          = {https://doi.org/10.1109/MS.2018.290110547},\n  doi          = {10.1109/MS.2018.290110547},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/software/Pe-ThanNFBSH19.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tse/KalliamvakouBZB19": {
      "status": "MAPPED",
      "type": "article",
      "title": "What Makes a Great Manager of Software Engineers?",
      "authors": "Eirini Kalliamvakou and Christian Bird and Thomas Zimmermann and Andrew Begel and Robert DeLine and Daniel M. Germán",
      "year": "2019",
      "venue": "{IEEE",
      "mapped_pdf": "kalliamvakou2018managers.pdf",
      "notes": "Auto-mapped via PDF investigation, score: 2.10",
      "extracted_paper_info": {
        "tldr": "Using interviews and a large survey at Microsoft, the authors identify fifteen attributes that engineers and managers perceive as defining great software engineering managers and show that people-management skills (not peak technical skill) are the most important.",
        "details": {
          "topic": "Management of software engineering teams",
          "problem": "There is little domain-specific, empirical evidence about what makes a great manager for software engineers, leaving practitioners without clear, research-backed guidance on which manager attributes matter in software development contexts.",
          "approach": "Mixed methods: 37 semi-structured interviews with engineers and managers to elicit attributes and examples, followed by a confirmatory survey (3,646 invited; 563 responses) that rated the emergent 15 attributes on a 1–10 importance scale; additional cross-domain survey (7,100 invited; 1,082 responses) compared perceptions across knowledge-worker groups; analysis used qualitative coding and card-sorting to form a conceptual framework, descriptive statistics, PCA, regression models, and a scenario hiring question.",
          "key_insights": [
            "Fifteen attributes grouped into three manager functions (cultivates engineering wisdom, motivates engineers, mediates communication) capture what respondents view as great; top-rated attributes include maintaining a positive working environment, growing talent, and enabling autonomy.",
            "Being sufficiently technical is useful (for respect, comprehension, and advocacy) but technical excellence is not the primary determinant of a great engineering manager—social/people skills are more critical, and 75% preferred a candidate with excellent social skills over one with excellent technical skills in a hiring scenario.",
            "Engineers and managers largely agree on important attributes, but managers value team-level, motivational attributes (inspiring, building culture, relationships) more highly than engineers do.",
            "Comparing domains, software engineers place relatively higher importance on clearing the path to execution and technical comprehension but lower importance on building team culture and driving alignment than several other knowledge-worker groups."
          ],
          "implications": "For researchers: the 15-attribute framework suggests measurable constructs to study how manager behaviors affect developer productivity, quality, and retention and to integrate organizational-psychology constructs into SE research; for practitioners and organizations: hiring, promotion, and training should emphasize people-management skills (coaching, autonomy, feedback, shielding teams) alongside ‘sufficient’ technical understanding, and management-development programs should be tailored to software engineering's specific priorities (e.g., protecting flow, enabling experimentation); for multi-disciplinary coordination, recognize domain differences when transferring management practices across functions."
        }
      },
      "tags": [
        "engineering-management",
        "interviews",
        "surveys",
        "statistical-analysis"
      ],
      "journal": "IEEE Trans. Software Eng.",
      "volume": "45",
      "number": "1",
      "pages": "87--106",
      "doi": "10.1109/TSE.2017.2768368",
      "url": "https://doi.org/10.1109/TSE.2017.2768368",
      "raw_bibtex": "@article{DBLP:journals/tse/KalliamvakouBZB19,\n  author       = {Eirini Kalliamvakou and\n                  Christian Bird and\n                  Thomas Zimmermann and\n                  Andrew Begel and\n                  Robert DeLine and\n                  Daniel M. Germ{\\'{a}}n},\n  title        = {What Makes a Great Manager of Software Engineers?},\n  journal      = {{IEEE} Trans. Software Eng.},\n  volume       = {45},\n  number       = {1},\n  pages        = {87--106},\n  year         = {2019},\n  url          = {https://doi.org/10.1109/TSE.2017.2768368},\n  doi          = {10.1109/TSE.2017.2768368},\n  timestamp    = {Fri, 18 Jan 2019 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/tse/KalliamvakouBZB19.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/AmershiBBDGKNN019": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Software engineering for machine learning: a case study",
      "authors": "Saleema Amershi and Andrew Begel and Christian Bird and Robert DeLine and Harald C. Gall and Ece Kamar and Nachiappan Nagappan and Besmira Nushi and Thomas Zimmermann",
      "year": "2019",
      "venue": "Proceedings of the 41st International Conference on Software Engineering:\n                  Software Engineering in Practice, {ICSE",
      "mapped_pdf": "amershi2018se4ml.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "An empirical case study of Microsoft teams showing how ML is integrated into software engineering, cataloging a nine-stage workflow, common challenges, best practices, and a proposed ML process maturity metric.",
        "details": {
          "topic": "Software engineering for machine learning",
          "problem": "As organizations add machine learning to products and platforms, existing development processes must evolve but practical, repeatable engineering practices and tools for data, models, and team workflows are poorly understood.",
          "approach": "Qualitative and quantitative case study at Microsoft: 14 semi-structured interviews and a wide internal survey (551 responses); card-sorted open responses, logistic regression analyses, synthesis of best practices, and construction/validation of a six-dimension Activity Maturity Index (AMI) for ML workflow stages.",
          "key_insights": [
            "Data is the central engineering challenge: discovery, collection, cleaning, versioning, provenance, and continual evolution of datasets are more complex and persistent problems than code management.",
            "Three domain-specific differences from traditional software engineering: (1) data complexity and lifecycle, (2) model customization/reuse requires ML expertise beyond typical software skills, and (3) ML components are hard to modularize because of entanglement and non-monotonic error interactions.",
            "Effective practices include integrated end-to-end automated pipelines, rigorous data and model provenance/versioning, combo-flighting with human-in-the-loop evaluation and scorecards, and company-wide education/training; tooling needs change as teams gain ML experience.",
            "The proposed ML process maturity model (AMI) — combining defined goals, consistency, documentation, automation, measurement, and continuous improvement — correlates with perceived effectiveness and helps distinguish maturity across teams and domains."
          ],
          "implications": "Teams and tool builders should prioritize scalable data management, provenance/versioning, integrated pipelines, and training to operationalize ML; researchers should address modularity, model composability, and objective maturity measures, while practitioners can use the proposed maturity metric and best practices to plan investments and process improvements."
        }
      },
      "tags": [
        "case-study",
        "interviews",
        "surveys",
        "engineering-management"
      ],
      "booktitle": "Proceedings of the 41st International Conference on Software Engineering: Software Engineering in Practice, ICSE (SEIP) 2019, Montreal, QC, Canada, May 25-31, 2019",
      "publisher": "IEEE / ACM",
      "pages": "291--300",
      "doi": "10.1109/ICSE-SEIP.2019.00042",
      "url": "https://doi.org/10.1109/ICSE-SEIP.2019.00042",
      "editor": "Helen Sharp and Mike Whalen",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/AmershiBBDGKNN019,\n  author       = {Saleema Amershi and\n                  Andrew Begel and\n                  Christian Bird and\n                  Robert DeLine and\n                  Harald C. Gall and\n                  Ece Kamar and\n                  Nachiappan Nagappan and\n                  Besmira Nushi and\n                  Thomas Zimmermann},\n  editor       = {Helen Sharp and\n                  Mike Whalen},\n  title        = {Software engineering for machine learning: a case study},\n  booktitle    = {Proceedings of the 41st International Conference on Software Engineering:\n                  Software Engineering in Practice, {ICSE} {(SEIP)} 2019, Montreal,\n                  QC, Canada, May 25-31, 2019},\n  pages        = {291--300},\n  publisher    = {{IEEE} / {ACM}},\n  year         = {2019},\n  url          = {https://doi.org/10.1109/ICSE-SEIP.2019.00042},\n  doi          = {10.1109/ICSE-SEIP.2019.00042},\n  timestamp    = {Sat, 06 Sep 2025 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/conf/icse/AmershiBBDGKNN019.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}",
      "awards": [
        "IEEE Software ICSE Software Engineering in Practice Best Paper Award"
      ]
    },
    "DBLP:conf/sigsoft/AsthanaKBBBMMA19": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "WhoDo: automating reviewer suggestions at scale",
      "authors": "Sumit Asthana and Rahul Kumar and Ranjita Bhagwan and Christian Bird and Chetan Bansal and Chandra Shekhar Maddila and Sonu Mehta and Balasubramanyan Ashok",
      "year": "2019",
      "venue": "Proceedings of the {ACM",
      "mapped_pdf": "asthana2019whodo.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "The authors build, deploy, and evaluate WhoDo, an interpretable reviewer-recommendation system that uses past commit/review history plus a load‑balancing penalty to automatically suggest reviewers at scale and reduce review latency.",
        "details": {
          "topic": "Automated code-reviewer recommendation and load balancing",
          "problem": "Manually selecting reviewers is time-consuming and scales poorly in large repositories, often overloading a small set of experienced reviewers and increasing review latency.",
          "approach": "They designed WhoDo, a simple, interpretable scoring model that ranks candidate reviewers by past commits and review activity on the changed files and directories with time decay and tunable weights; added a load‑balancing penalty based on a reviewer’s open review count (controlled by a θ parameter); deployed the service to 123 Microsoft repositories and evaluated it quantitatively on five repos (metrics: hit rate, average reviews per PR, PR completion time, per-reviewer active load), ran a 75-person user study to understand manual additions, and performed retrospective comparisons to prior methods.",
          "key_insights": [
            "WhoDo increased the average number of reviews per PR across repositories and achieved high PR-hit rates (many PRs included at least one suggested reviewer), with precision/recall comparable to prior systems.",
            "In small repositories WhoDo reduced PR completion time substantially; in large repositories recommending without load balancing overloaded senior reviewers and increased latency, but adding load balancing reduced median/upper-bound completion time and halved per-reviewer active load.",
            "Load balancing trades some reviewer expertise for better distribution and lower latency—more available reviewers reduce long-tail review delays.",
            "Owners still manually add reviewers due to team/author affinity and reviewer availability, indicating future models should incorporate organizational proximity and availability signals."
          ],
          "implications": "A lightweight, history-based recommender can be deployed at scale to reduce reviewer discovery effort and improve review throughput, but production systems should include load‑balancing to avoid overloading experts and augment recommendations with team/affinity and availability information to increase acceptance and quality."
        }
      },
      "tags": [
        "recommendation-systems",
        "code-review",
        "field-deployment",
        "repository-mining"
      ],
      "booktitle": "Proceedings of the ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/SIGSOFT FSE 2019, Tallinn, Estonia, August 26-30, 2019",
      "publisher": "ACM",
      "pages": "937--945",
      "doi": "10.1145/3338906.3340449",
      "url": "https://doi.org/10.1145/3338906.3340449",
      "editor": "Marlon Dumas and Dietmar Pfahl and Sven Apel and Alessandra Russo",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/AsthanaKBBBMMA19,\n  author       = {Sumit Asthana and\n                  Rahul Kumar and\n                  Ranjita Bhagwan and\n                  Christian Bird and\n                  Chetan Bansal and\n                  Chandra Shekhar Maddila and\n                  Sonu Mehta and\n                  Balasubramanyan Ashok},\n  editor       = {Marlon Dumas and\n                  Dietmar Pfahl and\n                  Sven Apel and\n                  Alessandra Russo},\n  title        = {WhoDo: automating reviewer suggestions at scale},\n  booktitle    = {Proceedings of the {ACM} Joint Meeting on European Software Engineering\n                  Conference and Symposium on the Foundations of Software Engineering,\n                  {ESEC/SIGSOFT} {FSE} 2019, Tallinn, Estonia, August 26-30, 2019},\n  pages        = {937--945},\n  publisher    = {{ACM}},\n  year         = {2019},\n  url          = {https://doi.org/10.1145/3338906.3340449},\n  doi          = {10.1145/3338906.3340449},\n  timestamp    = {Sat, 30 Sep 2023 09:56:36 +0200},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/AsthanaKBBBMMA19.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/pacmhci/NoltePFBSH18": {
      "status": "MAPPED",
      "type": "article",
      "title": "You Hacked and Now What?: - Exploring Outcomes of a Corporate Hackathon",
      "authors": "Alexander Nolte and Ei Pa Pa Pe-Than and Anna Filippova and Christian Bird and Steve Scallen and James D. Herbsleb",
      "year": "2018",
      "venue": "Proc. {ACM",
      "mapped_pdf": "nolte2018you.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Analyzes a large corporate hackathon to identify how leader motivations, team preparation and post-event dissemination influence whether hackathon projects are continued and how participation affects individuals' skills, networks and careers.",
        "details": {
          "topic": "Corporate hackathons and innovation outcomes",
          "problem": "Companies run internal hackathons expecting sustained innovation and employee development, but we lack detailed knowledge about which activities and motivations before, during, and after events lead to projects being continued or to tangible individual benefits.",
          "approach": "Mixed-method case study of Microsoft's One Week hackathon (Redmond site): selected five teams varying in member familiarity and relation to day-to-day work; performed pre-hackathon interviews with leaders, continuous observation during the event, post-event interviews and questionnaires, and follow-up interviews four months later; qualitative open-coding analysis reconstructed project trajectories and perceived individual impacts.",
          "key_insights": [
            "Career-oriented leadership plus active stakeholder outreach and thorough pre-event preparation correlated with project continuation.",
            "Matching tasks to team skills, domain-focused learning, and 'hitting the ground running' (producing a mature prototype and dissemination materials by ~day 2) increased the chance a project found a home.",
            "Projects that fit or extended existing product lines and that teams actively promoted (science fair + outside dissemination) were more likely to be adopted; radical or novel ideas often attracted attention but less reliably continued and sometimes exposed 'fatal attraction' risks.",
            "Participants reported clear individual benefits (technical and project-management skills, expanded networks, and even promotions), but there is a trade-off between pursuing personal learning/networking goals and producing a project optimized for continuation."
          ],
          "implications": "For practitioners: decide early whether the goal is project continuation or personal learning, and if continuation is desired invest in weeks of preparation, skill-aligned team formation, and post-hackathon dissemination to find a product home; for organizers: enable pre-event stakeholder discovery and post-event matchmaking to product groups and provide tools to surface relevant product lines and contacts; for researchers: examine generalizability across companies, design interventions that balance radical innovation with continuity, and explore tooling to better match motivations, skills and project fit."
        }
      },
      "tags": [
        "case-study",
        "interviews",
        "engineering-management",
        "developer-social-networks"
      ],
      "journal": "Proc. ACM Hum. Comput. Interact.",
      "volume": "2",
      "number": "CSCW",
      "pages": "129:1--129:23",
      "doi": "10.1145/3274398",
      "url": "https://doi.org/10.1145/3274398",
      "raw_bibtex": "@article{DBLP:journals/pacmhci/NoltePFBSH18,\n  author       = {Alexander Nolte and\n                  Ei Pa Pa Pe{-}Than and\n                  Anna Filippova and\n                  Christian Bird and\n                  Steve Scallen and\n                  James D. Herbsleb},\n  title        = {You Hacked and Now What?: - Exploring Outcomes of a Corporate Hackathon},\n  journal      = {Proc. {ACM} Hum. Comput. Interact.},\n  volume       = {2},\n  number       = {{CSCW}},\n  pages        = {129:1--129:23},\n  year         = {2018},\n  url          = {https://doi.org/10.1145/3274398},\n  doi          = {10.1145/3274398},\n  timestamp    = {Mon, 05 Feb 2024 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/pacmhci/NoltePFBSH18.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/queue/CzerwonkaGBPC18": {
      "status": "MAPPED",
      "type": "article",
      "title": "CodeFlow: Improving the Code Review Process at Microsoft",
      "authors": "Jacek Czerwonka and Michaela Greiler and Christian Bird and Lucas Panjer and Terry Coatta",
      "year": "2018",
      "venue": "{ACM",
      "mapped_pdf": "codeflow2018.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Large-scale instrumentation and analysis of Microsoft's CodeFlow code-review tool shows how tooling, metrics, and process changes can make reviews faster and more valuable by focusing on maintainability, reviewer selection, and review size.",
        "details": {
          "topic": "Code review processes, tooling, and metrics in large software organizations",
          "problem": "Code reviews are ubiquitous and costly but poorly measured and optimized: teams struggle with long turnaround, finding appropriate reviewers, noisy comments, and unclear benefits (many expect bug-finding but behavior differs).",
          "approach": "Instrumented Microsoft's CodeFlow client, collected raw telemetry and database-level data, built a metrics/analytics layer and a machine-learning classifier to categorize comments; analyzed ~3 million reviews across tens of thousands of developers and hundreds of millions of lines of code, supplemented with qualitative observations, surveys, small studies, and deployed features like reviewer recommenders, tagging, and UI improvements.",
          "key_insights": [
            "Most review value comes from maintainability, style, API usage and knowledge transfer rather than direct bug-finding (only ~15% of comments related to bugs; ~50% relate to maintainability).",
            "Smaller reviews produce denser and more useful comments; reviews with more than ~20 files show significantly degraded comment usefulness.",
            "Reviewer expertise matters: reviewers familiar with the codebase produce higher-quality feedback, and automated reviewer recommenders reduce turnaround time.",
            "Instrumenting tooling and surfacing metrics (dashboards, scorecards, tags, context) enables teams to find training needs, optimize workflows (e.g., lighter-weight paths for low-risk changes), and improve overall review efficiency."
          ],
          "implications": "For researchers: mixed-method, large-scale instrumentation combined with ML categorization yields actionable insights about developer behavior and review quality; for engineers and managers: invest in review tooling, telemetry, and lightweight processes—keep reviews small, provide context and tags, use reviewer recommenders and selective policies (e.g., single reviewer for trivial changes), and surface metrics to drive training and continuous improvement—these steps reduce cost and improve long-term maintainability."
        }
      },
      "tags": [
        "code-review",
        "telemetry-analysis",
        "recommendation-systems",
        "field-deployment"
      ],
      "journal": "ACM Queue",
      "volume": "16",
      "number": "5",
      "pages": "20",
      "doi": "10.1145/3291276.3292420",
      "url": "https://doi.org/10.1145/3291276.3292420",
      "raw_bibtex": "@article{DBLP:journals/queue/CzerwonkaGBPC18,\n  author       = {Jacek Czerwonka and\n                  Michaela Greiler and\n                  Christian Bird and\n                  Lucas Panjer and\n                  Terry Coatta},\n  title        = {CodeFlow: Improving the Code Review Process at Microsoft},\n  journal      = {{ACM} Queue},\n  volume       = {16},\n  number       = {5},\n  pages        = {20},\n  year         = {2018},\n  url          = {https://doi.org/10.1145/3291276.3292420},\n  doi          = {10.1145/3291276.3292420},\n  timestamp    = {Tue, 22 Jan 2019 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/queue/CzerwonkaGBPC18.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/software/AdamsBBDKMO18": {
      "status": "MAPPED",
      "type": "article",
      "title": "Release Engineering 3.0",
      "authors": "Bram Adams and Stephany Bellomo and Christian Bird and Boris Debic and Foutse Khomh and Kim Moir and John ODuinn",
      "year": "2018",
      "venue": "{IEEE",
      "mapped_pdf": "Release_Engineering_3.0.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 11:47:49",
      "extracted_paper_info": {
        "tldr": "Defines Release Engineering 3.0 as the next iteration of release engineering focused on enabling safe, automated, and tailored release practices for small organizations, civic bodies, safety-critical domains, and emerging platforms (IoT, robotic swarms), and surveys challenges and example solutions across build systems, experimentation, government adoption, and over-the-air updates.",
        "details": {
          "topic": "Release engineering for new domains (Release Engineering 3.0)",
          "problem": "Current automated release engineering practices (continuous delivery/deployment) were developed largely for large cloud and mobile vendors and don't yet provide out-of-the-box, empirically validated processes, tools, or guidance suited to small organizations, civic institutions, safety-critical industries, IoT, and robotic swarms, which present unique technical and organizational risks.",
          "approach": "An editorial overview curating four peer-reviewed articles that (1) review continuous experimentation techniques and challenges, (2) survey advances and future needs in build systems, (3) report on continuous-delivery adoption in a large government organization, and (4) propose gossip-based over-the-air update approaches for robotic swarms; the issue frames open challenges and research directions for Release Engineering 3.0.",
          "key_insights": [
            "Release Engineering 3.0 emphasizes safe, tailored, and repeatable pipelines for the 'other 80%' of software (small orgs, civic and safety-critical systems, IoT, swarms) rather than only large cloud/mobile providers.",
            "Scaling CI/CD requires not just automation but infrastructure-as-code, robust rollback mechanisms, API/DB compatibility practices (for canary/dark launches), and improved dependency management across autonomous microservices.",
            "There is a shortage of validated, out-of-the-box process/tool chains and empirical best practices for many real-world domains; targeted research and experience reports (build systems, experimentation, government case studies, swarm updates) begin to fill this gap.",
            "Emerging domains (government, robotic swarms, IoT) demand new technical approaches (e.g., gossip-based OTA updates) and organizational strategies to balance rapid delivery with safety, auditability, and regulatory constraints."
          ],
          "implications": "Researchers should investigate domain-specific safety, dependency, and experiment design challenges and build validated tooling; tool vendors and practitioners need to develop configurable, auditable pipelines and build-system optimizations tailored to small and safety-critical deployments; and organizations (including governments and startups) can use the lessons and case studies to begin adopting continuous practices while accounting for regulatory, reliability, and connectivity constraints."
        }
      },
      "tags": [
        "release-engineering",
        "devops-and-infrastructure-as-code",
        "surveys"
      ],
      "journal": "IEEE Softw.",
      "volume": "35",
      "number": "2",
      "pages": "22--25",
      "doi": "10.1109/MS.2018.1661327",
      "url": "https://doi.org/10.1109/MS.2018.1661327",
      "raw_bibtex": "@article{DBLP:journals/software/AdamsBBDKMO18,\n  author       = {Bram Adams and\n                  Stephany Bellomo and\n                  Christian Bird and\n                  Boris Debic and\n                  Foutse Khomh and\n                  Kim Moir and\n                  John ODuinn},\n  title        = {Release Engineering 3.0},\n  journal      = {{IEEE} Softw.},\n  volume       = {35},\n  number       = {2},\n  pages        = {22--25},\n  year         = {2018},\n  url          = {https://doi.org/10.1109/MS.2018.1661327},\n  doi          = {10.1109/MS.2018.1661327},\n  timestamp    = {Sat, 09 Apr 2022 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/software/AdamsBBDKMO18.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/software/MacLeodGSBC18": {
      "status": "MAPPED",
      "type": "article",
      "title": "Code Reviewing in the Trenches: Challenges and Best Practices",
      "authors": "Laura MacLeod and Michaela Greiler and Margaret-Anne D. Storey and Christian Bird and Jacek Czerwonka",
      "year": "2018",
      "venue": "{IEEE",
      "mapped_pdf": "macleod2018codereviewing.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Empirical study of Microsoft developers that identifies common code review challenges and synthesizes practical best practices and trade-offs for code authors, reviewers, and organizations.",
        "details": {
          "topic": "Code review practices and best practices in industry",
          "problem": "Lessons about effective code review are dispersed and context-dependent, leaving practitioners unsure which challenges to expect and which practices or tools to adopt in large industrial teams.",
          "approach": "Ethnographic observations with four Microsoft teams, 18 semi-structured contextual interviews, and a company-wide survey (4,300 distributed, 911 responses) complemented by analysis of tool usage (e.g., CodeFlow) to synthesize challenges, best practices, and trade-offs for authors, reviewers, and organizations.",
          "key_insights": [
            "Code review is valued for defect detection, knowledge transfer, and confidence building, but common pain points are slow or missing feedback, difficulty finding willing/appropriate reviewers, and reviews that are too large or hard to understand.",
            "Concrete, actionable practices reduce friction: authors should prepare small, well-documented, tested changes and choose reviewers carefully; reviewers should allocate bounded review time, prioritize core issues, use checklists, and pick appropriate communication channels for contentious vs. traceable issues.",
            "Organizational support matters: clear policies, tooling that fits team workflow, recognition of review work, training, and continuous measurement are necessary—while balancing trade-offs such as speed vs. rigor and traceability vs. richer communication."
          ],
          "implications": "Provides practitioners with a synthesized, evidence-based set of practices and trade-offs to improve review speed, quality, and knowledge sharing; guides tool builders and researchers to focus on reviewer selection, reducing review size, better notifications/integration with informal channels, and measuring the organizational effects of review policies."
        }
      },
      "tags": [
        "code-review",
        "interviews",
        "surveys",
        "engineering-management",
        "telemetry-analysis"
      ],
      "journal": "IEEE Softw.",
      "volume": "35",
      "number": "4",
      "pages": "34--42",
      "doi": "10.1109/MS.2017.265100500",
      "url": "https://doi.org/10.1109/MS.2017.265100500",
      "raw_bibtex": "@article{DBLP:journals/software/MacLeodGSBC18,\n  author       = {Laura MacLeod and\n                  Michaela Greiler and\n                  Margaret{-}Anne D. Storey and\n                  Christian Bird and\n                  Jacek Czerwonka},\n  title        = {Code Reviewing in the Trenches: Challenges and Best Practices},\n  journal      = {{IEEE} Softw.},\n  volume       = {35},\n  number       = {4},\n  pages        = {34--42},\n  year         = {2018},\n  url          = {https://doi.org/10.1109/MS.2017.265100500},\n  doi          = {10.1109/MS.2017.265100500},\n  timestamp    = {Mon, 08 Jun 2020 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/software/MacLeodGSBC18.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/software/DevanbuZB18": {
      "status": "MAPPED",
      "type": "article",
      "title": "Belief and Evidence: How Software Engineers Form Their Opinions",
      "authors": "Premkumar T. Devanbu and Thomas Zimmermann and Christian Bird",
      "year": "2018",
      "venue": "{IEEE",
      "mapped_pdf": "devanbu2018belief.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "A mixed survey and observational study at Microsoft finds developers form opinions mostly from personal experience and peer opinion, and those beliefs often do not correspond closely to archived project evidence.",
        "details": {
          "topic": "Evidence-based software engineering; developer beliefs versus empirical evidence",
          "problem": "Developers hold strongly held beliefs about software practices, but it's unclear whether those beliefs come from rigorous evidence or from personal and social sources, and whether they match actual project data.",
          "approach": "The authors ran a triangulated study: a survey of ~2,500 Microsoft developers (564 responses) asking agreement and source of belief on a set of software-engineering propositions, collected demographics and project identifiers, and carried out observational analyses on archived repository data from two large projects (A and B) to test one controversial proposition (effects of geographic distribution on defect occurrence) while controlling for confounders.",
          "key_insights": [
            "Developers rank personal experience and peer opinion as the primary sources of their beliefs, with research papers ranked low.",
            "In the two-project observational study, geographic distribution had a statistically significant but practically negligible effect on defect rates after controlling for confounders.",
            "Developers' subjective beliefs sometimes matched project-level evidence (project B) but often did not (project A), indicating beliefs are frequently formed subjectively rather than from rigorous evidence."
          ],
          "implications": "Promoting evidence-based software engineering (through better dissemination of research, data-driven process improvement, and curricular change) is necessary to align practitioner beliefs with empirical findings; researchers should make results more accessible and actionable and practitioners should rely less on anecdote and more on controlled evidence when shaping practices."
        }
      },
      "tags": [
        "surveys",
        "repository-mining",
        "statistical-analysis"
      ],
      "journal": "IEEE Softw.",
      "volume": "35",
      "number": "6",
      "pages": "72--76",
      "doi": "10.1109/MS.2018.4321246",
      "url": "https://doi.org/10.1109/MS.2018.4321246",
      "raw_bibtex": "@article{DBLP:journals/software/DevanbuZB18,\n  author       = {Premkumar T. Devanbu and\n                  Thomas Zimmermann and\n                  Christian Bird},\n  title        = {Belief and Evidence: How Software Engineers Form Their Opinions},\n  journal      = {{IEEE} Softw.},\n  volume       = {35},\n  number       = {6},\n  pages        = {72--76},\n  year         = {2018},\n  url          = {https://doi.org/10.1109/MS.2018.4321246},\n  doi          = {10.1109/MS.2018.4321246},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/software/DevanbuZB18.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tse/AllamanisBBDMS18": {
      "status": "MAPPED",
      "type": "article",
      "title": "Mining Semantic Loop Idioms",
      "authors": "Miltiadis Allamanis and Earl T. Barr and Christian Bird and Premkumar T. Devanbu and Mark Marron and Charles Sutton",
      "year": "2018",
      "venue": "{IEEE",
      "mapped_pdf": "allamanis2018loopidioms.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Automatically augmenting ASTs with lightweight semantic information (coiling) and mining them with nonparametric probabilistic tree substitution grammars uncovers high-coverage, meaningful loop idioms that can guide refactorings, APIs, and language design.",
        "details": {
          "topic": "Semantic idiom mining / program analysis for loop patterns",
          "problem": "Developers and language/tool designers lack scalable, evidence-based ways to discover the common, semantically meaningful code patterns (idioms) that would justify new refactorings, APIs, or language features because syntactic searches suffer from extreme sparsity and shallow patterns.",
          "approach": "They introduce 'coiling' to produce coiled ASTs (CASTs) that encode semantic facts (e.g., variable mutability, purity, collection vs unitary) discovered via property modulo testing (PMT), then mine those CASTs with a Pitman–Yor-based probabilistic tree substitution grammar (pTSG) learner (MCMC) tailored to code; they analyze two C# corpora (25.4MLOC, 277k loops for a large-scale study; and a 577kLOC buildable corpus with tests for PMT-driven mining), rank idioms by coverage and cross-entropy gain, and evaluate utility via case studies (LINQ refactoring suggestion engine, API and language feature prospecting).",
          "key_insights": [
            "Real-world loops are surprisingly simple and repetitive: ~90% have no nesting and are under 15 LOC, enabling abstraction and pattern mining.",
            "Coiling (semantic enrichment + AST projection) combined with a Pitman–Yor pTSG recovers compact, informative loop idioms: e.g., top 50 idioms cover ≈50% of loops and top 100 cover ≈62% in the buildable corpus.",
            "Property modulo testing yields useful, scalable (≈93% accuracy on a sample) dynamic estimates of mutability/purity that, when encoded in CASTs, enable distinguishing map vs reduce and other semantic loop classes.",
            "Mined idioms are actionable: a proof-of-concept idiom-to-LINQ engine covering ~45% of loops produced suggestions judged correct 89% of the time; idioms also reveal API and language feature opportunities (e.g., Enumerate ~12% of loops, AddDocuments, 2-D Range, Slice)."
          ],
          "implications": "For researchers: provides a reproducible framework (coiling + PMT + nonparametric pTSG) to mine semantic code patterns and extend to other program analyses; for tool builders: offers prioritized, high-coverage left-hand patterns to implement refactorings (e.g., loop-to-LINQ) and reduces wasted effort on rare/nonidiomatic loops; for language and API designers: supplies empirical evidence to justify new constructs or library additions and to prioritize which features will cover the most real code."
        }
      },
      "tags": [
        "program-analysis",
        "repository-mining",
        "dataset-and-tooling"
      ],
      "journal": "IEEE Trans. Software Eng.",
      "volume": "44",
      "number": "7",
      "pages": "651--668",
      "doi": "10.1109/TSE.2018.2832048",
      "url": "https://doi.org/10.1109/TSE.2018.2832048",
      "raw_bibtex": "@article{DBLP:journals/tse/AllamanisBBDMS18,\n  author       = {Miltiadis Allamanis and\n                  Earl T. Barr and\n                  Christian Bird and\n                  Premkumar T. Devanbu and\n                  Mark Marron and\n                  Charles Sutton},\n  title        = {Mining Semantic Loop Idioms},\n  journal      = {{IEEE} Trans. Software Eng.},\n  volume       = {44},\n  number       = {7},\n  pages        = {651--668},\n  year         = {2018},\n  url          = {https://doi.org/10.1109/TSE.2018.2832048},\n  doi          = {10.1109/TSE.2018.2832048},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/tse/AllamanisBBDMS18.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/chi/HenleyMCFB18": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "CFar: A Tool to Increase Communication, Productivity, and Review Quality in Collaborative Code Reviews",
      "authors": "Austin Z. Henley and KIotavanç Muçlu and Maria Christakis and Scott D. Fleming and Christian Bird",
      "year": "2018",
      "venue": "Proceedings of the 2018 {CHI",
      "mapped_pdf": "henley2018cfar.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "CFar adds an automated, program-analysis-based reviewer into code-review systems and—via a production implementation and mixed field/lab evaluation—shows it can increase reviewer communication, save reviewers time, and help find defects while surfacing challenges around noise and configuration.",
        "details": {
          "topic": "Automated program-analysis in collaborative code review",
          "problem": "Human code reviewers often miss shallow defects or spend time on clerical checks, which reduces review quality and reviewer productivity and limits useful discussion of deeper design issues.",
          "approach": "Designed and implemented CFar (CodeFlow Automated Reviewer) by integrating program analyses (OACR/CloudBuild) into CodeFlow; deployed the production-quality extension at Microsoft (98 programmers across three teams for 15 weeks; 354 reviews, 149 analysis comments) and ran a controlled lab study (7 professional programmers) collecting usage logs, surveys, videos, and interviews for a mixed-method evaluation.",
          "key_insights": [
            "Automated comments increased collaboration and conversations: 61% of respondents said comments enhanced collaboration and 45% said CFar inspired more conversations, often prompting both shallow and deeper discussions.",
            "Productivity gains from automation: 38% reported increased productivity because CFar handled many shallow/clerical issues and delivered earlier feedback, letting humans focus on higher-level review tasks.",
            "Quality improvements and uptake: 48% reported improved code quality; 97% of CFar comments were marked resolved (either by humans or automatically) and users often acted on automated warnings.",
            "Practical limitations: some users experienced information overload and perceived noise; proper per-team configuration and filtering of analyses is required to maintain relevance and usability."
          ],
          "implications": "Integrating program-analysis warnings directly into the review UI can improve communication, speed, and defect detection in real-world teams, but successful deployment requires per-team tuning, good filtering and presentation to avoid overload; researchers should explore adaptive filtering, richer automated-human interactions, and ways to surface more context or suggested fixes to increase relevance and reduce noise."
        }
      },
      "tags": [
        "code-review",
        "program-analysis",
        "field-deployment",
        "tool-adoption-and-trust"
      ],
      "booktitle": "Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems, CHI 2018, Montreal, QC, Canada, April 21-26, 2018",
      "publisher": "ACM",
      "pages": "157",
      "doi": "10.1145/3173574.3173731",
      "url": "https://doi.org/10.1145/3173574.3173731",
      "editor": "Regan L. Mandryk and Mark Hancock and Mark Perry and Anna L. Cox",
      "raw_bibtex": "@inproceedings{DBLP:conf/chi/HenleyMCFB18,\n  author       = {Austin Z. Henley and\n                  KIotavan{\\c{c}} Mu{\\c{c}}lu and\n                  Maria Christakis and\n                  Scott D. Fleming and\n                  Christian Bird},\n  editor       = {Regan L. Mandryk and\n                  Mark Hancock and\n                  Mark Perry and\n                  Anna L. Cox},\n  title        = {CFar: {A} Tool to Increase Communication, Productivity, and Review\n                  Quality in Collaborative Code Reviews},\n  booktitle    = {Proceedings of the 2018 {CHI} Conference on Human Factors in Computing\n                  Systems, {CHI} 2018, Montreal, QC, Canada, April 21-26, 2018},\n  pages        = {157},\n  publisher    = {{ACM}},\n  year         = {2018},\n  url          = {https://doi.org/10.1145/3173574.3173731},\n  doi          = {10.1145/3173574.3173731},\n  timestamp    = {Mon, 05 Feb 2024 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/chi/HenleyMCFB18.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/HellendoornBBA18": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Deep learning type inference",
      "authors": "Vincent J. Hellendoorn and Christian Bird and Earl T. Barr and Miltiadis Allamanis",
      "year": "2018",
      "venue": "Proceedings of the 2018 {ACM",
      "mapped_pdf": "hellendoorn2018deep.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "DeepTyper uses deep learning trained on an automatically aligned corpus of TypeScript/JavaScript code to suggest missing variable, parameter and return type annotations, achieving high-precision suggestions that complement conventional type inference.",
        "details": {
          "topic": "Deep learning for type inference / type suggestion in JavaScript/TypeScript",
          "problem": "Migrating dynamically typed JavaScript to typed variants (like TypeScript) is time-consuming and static type inference cannot always determine types (due to duck-typing, eval, etc.), so developers need reliable, automated type suggestions to reduce annotation effort.",
          "approach": "Build an aligned corpus by taking TypeScript projects, removing annotations to simulate untyped code, and train a bidirectional GRU-based sequence tagging model (DeepTyper) with a consistency layer that averages representations of same-named identifiers; vocabularies: ~40k tokens and ~11.8k types; evaluate on held-out projects using top-K accuracy, precision/recall at confidence thresholds, a hybrid integration with the TypeScript compiler + CheckJS, and comparison/combination with JSNice.",
          "key_insights": [
            "DeepTyper attains nearly 60% top-1 and over 80% top-5 accuracy on developer annotations (GOLD dataset) and can predict thousands of useful annotations with high confidence.",
            "A consistency layer that shares averaged representations across same-named identifier occurrences reduces inconsistent type assignments (from ~17.3% to ~15.4%) while slightly improving accuracy.",
            "Using prediction-confidence thresholds yields practical trade-offs: >80% precision at ~50% recall and >95% precision at ~15% recall, enabling safe, high-precision suggestions.",
            "DeepTyper is complementary to existing tools: combined with the TypeScript compiler it can add thousands of additional verified annotations, and pairing with JSNice boosts overall coverage and accuracy."
          ],
          "implications": "For developers and tool builders, DeepTyper can significantly reduce the annotation tax when migrating or incrementally typing code by providing verifiable, high-confidence suggestions that a compiler can check; for researchers, the work demonstrates that large aligned corpora let neural models learn rich type distributions but also exposes challenges (long-range consistency, type drift, large output vocabularies) that motivate improved architectures and hybrid approaches combining probabilistic learners with sound type checkers."
        }
      },
      "tags": [
        "ai-for-software-engineering",
        "recommendation-systems",
        "repository-mining",
        "program-analysis"
      ],
      "booktitle": "Proceedings of the 2018 ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/SIGSOFT FSE 2018, Lake Buena Vista, FL, USA, November 04-09, 2018",
      "publisher": "ACM",
      "pages": "152--162",
      "doi": "10.1145/3236024.3236051",
      "url": "https://doi.org/10.1145/3236024.3236051",
      "editor": "Gary T. Leavens and Alessandro Garcia and Corina S. Pasareanu",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/HellendoornBBA18,\n  author       = {Vincent J. Hellendoorn and\n                  Christian Bird and\n                  Earl T. Barr and\n                  Miltiadis Allamanis},\n  editor       = {Gary T. Leavens and\n                  Alessandro Garcia and\n                  Corina S. Pasareanu},\n  title        = {Deep learning type inference},\n  booktitle    = {Proceedings of the 2018 {ACM} Joint Meeting on European Software Engineering\n                  Conference and Symposium on the Foundations of Software Engineering,\n                  {ESEC/SIGSOFT} {FSE} 2018, Lake Buena Vista, FL, USA, November 04-09,\n                  2018},\n  pages        = {152--162},\n  publisher    = {{ACM}},\n  year         = {2018},\n  url          = {https://doi.org/10.1145/3236024.3236051},\n  doi          = {10.1145/3236024.3236051},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/HellendoornBBA18.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/software/StolLB17": {
      "status": "MAPPED",
      "type": "article",
      "title": "Crowdsourcing for Software Engineering",
      "authors": "Klaas-Jan Stol and Thomas D. LaToza and Christian Bird",
      "year": "2017",
      "venue": "{IEEE",
      "mapped_pdf": "Crowdsourcing_for_Software_Engineering.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 11:44:38",
      "extracted_paper_info": {
        "tldr": "A synthesis of how crowdsourcing is being used and can be applied across the software-engineering lifecycle, offering a task taxonomy, motivating reasons, platform examples, and an overview of six studies that highlight benefits and challenges.",
        "details": {
          "topic": "Crowdsourcing in software engineering",
          "problem": "Software organizations can benefit from tapping large, diverse, and distributed contributors for development, testing, requirements, and knowledge, but they face questions about when to use crowds, how to structure tasks and incentives, how to integrate contributions, and how to onboard and manage crowd participants.",
          "approach": "An editorial review that synthesizes historical and contemporary examples, proposes and explains a 2×2 taxonomy of crowdsourcing tasks (emergent vs nonemergent and homogeneous vs heterogeneous → rating, processing, creation, problem solving), surveys platforms and use cases (Mechanical Turk, Topcoder, Netflix Prize, Stack Overflow, GitHub, app stores), and introduces six selected articles from a theme issue that empirically and practically examine barriers to newcomers, requirements elicitation, Stack Overflow uses, crowdsourced testing, crowd-generated code summaries, and app-store feedback architectures.",
          "key_insights": [
            "Crowdsourcing maps to four task types—rating, processing, creation, and problem solving—each with different requirements for crowd size, incentives, and integration strategy.",
            "Practical crowdsourcing applications exist across the development lifecycle (requirements, testing, code summarization, feedback) and can accelerate time-to-market, bring diverse solutions, and provide specialized expertise.",
            "Successful crowdsourcing depends on platform design choices (locus of control, incentives, context provided) and addressing social/organizational barriers such as newcomer onboarding and contribution quality.",
            "Hybrid and recombination strategies (e.g., combining intermediate results or using crowd evaluations) can help leverage partial contributions and balance reward structures."
          ],
          "implications": "For researchers: a structured agenda to study task types, incentives, integration methods, and socio-technical barriers; for practitioners and platform designers: guidance to choose appropriate crowdsourcing approaches for specific lifecycle tasks, to design incentives and context to improve participation and quality, and to expect crowdsourcing to be a disruptive but complementary alternative to traditional outsourcing and open-source practices."
        }
      },
      "tags": [
        "surveys",
        "tool-adoption-and-trust",
        "developer-social-networks"
      ],
      "journal": "IEEE Softw.",
      "volume": "34",
      "number": "2",
      "pages": "30--36",
      "doi": "10.1109/MS.2017.52",
      "url": "https://doi.org/10.1109/MS.2017.52",
      "raw_bibtex": "@article{DBLP:journals/software/StolLB17,\n  author       = {Klaas{-}Jan Stol and\n                  Thomas D. LaToza and\n                  Christian Bird},\n  title        = {Crowdsourcing for Software Engineering},\n  journal      = {{IEEE} Softw.},\n  volume       = {34},\n  number       = {2},\n  pages        = {30--36},\n  year         = {2017},\n  url          = {https://doi.org/10.1109/MS.2017.52},\n  doi          = {10.1109/MS.2017.52},\n  timestamp    = {Mon, 08 Jun 2020 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/software/StolLB17.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tse/BosuCBOC17": {
      "status": "MAPPED",
      "type": "article",
      "title": "Process Aspects and Social Dynamics of Contemporary Code Review: Insights from Open Source Development and Industrial Practice at Microsoft",
      "authors": "Amiangshu Bosu and Jeffrey C. Carver and Christian Bird and Jonathan D. Orbeck and Christopher Chockley",
      "year": "2017",
      "venue": "{IEEE",
      "mapped_pdf": "bosu2017review.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Surveys of open-source and Microsoft developers characterize contemporary code review as a tool-intensive practice that consumes about 10–15% of developer time and provides substantial non-technical benefits (knowledge sharing, maintainability, and impression formation) beyond defect detection.",
        "details": {
          "topic": "Contemporary peer code review practices",
          "problem": "Developers widely use lightweight, tool-based code review, but its costs, how developers use it, and its non-technical benefits and social effects are not well understood across open-source and commercial settings.",
          "approach": "The authors designed and validated a survey instrument and ran two large surveys (287 responses from 36 popular OSS projects and 416 responses from Microsoft developers, including collocated and distributed teams), analyzed quantitative responses (behavioral scales, rankings, time estimates) and coded 2,626 open-ended responses to compare practices, motivations, and perceived impacts.",
          "key_insights": [
            "Developers spend roughly 10–15% of their work time on code reviews (median ~5 hours/week OSS, ~4 hours/week Microsoft), with more experienced and paid contributors spending more time.",
            "Finding defects is important but secondary; primary perceived benefits are maintainability, knowledge dissemination, community building, mentorship, and building impressions of peers' expertise and reliability.",
            "Author identity, reputation, relationship, and perceived expertise strongly influence whether reviewers accept requests and how much scrutiny a change receives; high-quality submissions increase trust and collaboration while low-quality ones harm impressions and future interactions.",
            "OSS and Microsoft respondents show broad agreement on many points, but OSS emphasizes impression formation and relationship-building more, whereas Microsoft emphasizes knowledge transfer, expertise alignment, and time/effort constraints; distributed vs. collocated Microsoft teams showed little difference."
          ],
          "implications": "For researchers: prioritize study of non-technical effects of code review (impression formation, knowledge transfer), reviewer-comment sentiment, and program-comprehension support; for practitioners and tool builders: recognize code review as valuable for more than defect detection, encourage simple self-documenting patches, provide guidance/templates to help reviewers phrase constructive comments, and invest in tooling and practices that reduce comprehension effort and support mentorship during reviews."
        }
      },
      "tags": [
        "code-review",
        "surveys",
        "open-source-software",
        "developer-social-networks"
      ],
      "journal": "IEEE Trans. Software Eng.",
      "volume": "43",
      "number": "1",
      "pages": "56--75",
      "doi": "10.1109/TSE.2016.2576451",
      "url": "https://doi.org/10.1109/TSE.2016.2576451",
      "raw_bibtex": "@article{DBLP:journals/tse/BosuCBOC17,\n  author       = {Amiangshu Bosu and\n                  Jeffrey C. Carver and\n                  Christian Bird and\n                  Jonathan D. Orbeck and\n                  Christopher Chockley},\n  title        = {Process Aspects and Social Dynamics of Contemporary Code Review: Insights\n                  from Open Source Development and Industrial Practice at Microsoft},\n  journal      = {{IEEE} Trans. Software Eng.},\n  volume       = {43},\n  number       = {1},\n  pages        = {56--75},\n  year         = {2017},\n  url          = {https://doi.org/10.1109/TSE.2016.2576451},\n  doi          = {10.1109/TSE.2016.2576451},\n  timestamp    = {Wed, 16 Mar 2022 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/tse/BosuCBOC17.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/esem/FordZBN17": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Characterizing Software Engineering Work with Personas Based on Knowledge Worker Actions",
      "authors": "Denae Ford and Tom Zimmermann and Christian Bird and Nachiappan Nagappan",
      "year": "2017",
      "venue": "2017 {ACM/IEEE",
      "mapped_pdf": "ford2017personas.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Identifies seven empirically-derived software engineer personas by clustering how engineers allocate weekly time across adapted knowledge-worker actions using interviews and a large company survey.",
        "details": {
          "topic": "Software engineering work styles and personas",
          "problem": "Organizations often treat software engineers as a single homogeneous group, which can lead to poor task assignment and mismatches between engineers' skills/styles and work demands.",
          "approach": "Mixed-methods study: 21 semi-structured interviews and a survey of 868 software engineers at one large company; adapted Reinhardt et al.'s knowledge-worker actions to software engineering (11 actions), asked respondents to estimate weekly hours per action, normalized time distributions, applied k-means clustering (k=7), validated clusters with statistical tests and interview quotes, produced seven personas and performed member checking.",
          "key_insights": [
            "Engineers cluster into seven distinct personas (Autonomist, Continuous Learner, Investigator, Communicator, Interactive, Advisor, Team Coder) characterized by different time allocations across actions such as Authoring, Co-authoring, Analyzing, Feedback, and Learning.",
            "Collaboration partner roles are broadly similar (mostly other engineers, managers, scientists), but personas differ materially in collaborative activities and frequency (e.g., Advisors spend much more time on code review, meetings, and interruptions; Team Coders spend much more time co-authoring and fixing bugs).",
            "Common coordination costs are measurable and persona-dependent: average weekly time ~3.2 hours in code review, ~5 hours in meetings, ~6 hours in email and interruptions, with substantial variation by persona.",
            "Personas are fluid—engineers can shift modes across projects—suggesting time-allocation profiles reflect roles/modes rather than immutable categories."
          ],
          "implications": "For researchers: report and consider engineer personas when designing studies or tools; for tool-builders and product teams: tailor features and workflows to distinct time-allocation profiles (e.g., debugging support for Investigators, collaboration tooling for Team Coders, mentoring resources for Learners); for managers and orgs: assign tasks, training, and workflows to better match engineers' working styles and plan for transitions between personas; note generalizability is limited by single-company sampling and self-reported data."
        }
      },
      "tags": [
        "interviews",
        "surveys",
        "developer-productivity",
        "statistical-analysis"
      ],
      "booktitle": "2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM 2017, Toronto, ON, Canada, November 9-10, 2017",
      "publisher": "IEEE Computer Society",
      "pages": "394--403",
      "doi": "10.1109/ESEM.2017.54",
      "url": "https://doi.org/10.1109/ESEM.2017.54",
      "editor": "Ayse Bener and Burak Turhan and Stefan Biffl",
      "raw_bibtex": "@inproceedings{DBLP:conf/esem/FordZBN17,\n  author       = {Denae Ford and\n                  Tom Zimmermann and\n                  Christian Bird and\n                  Nachiappan Nagappan},\n  editor       = {Ayse Bener and\n                  Burak Turhan and\n                  Stefan Biffl},\n  title        = {Characterizing Software Engineering Work with Personas Based on Knowledge\n                  Worker Actions},\n  booktitle    = {2017 {ACM/IEEE} International Symposium on Empirical Software Engineering\n                  and Measurement, {ESEM} 2017, Toronto, ON, Canada, November 9-10,\n                  2017},\n  pages        = {394--403},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2017},\n  url          = {https://doi.org/10.1109/ESEM.2017.54},\n  doi          = {10.1109/ESEM.2017.54},\n  timestamp    = {Fri, 24 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/esem/FordZBN17.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/GaoBB17": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "To type or not to type: quantifying detectable bugs in JavaScript",
      "authors": "Zheng Gao and Christian Bird and Earl T. Barr",
      "year": "2017",
      "venue": "Proceedings of the 39th International Conference on Software Engineering,\n                  {ICSE",
      "mapped_pdf": "gao2017javascript.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Applying Flow or TypeScript with minimal, localized annotations to historical JavaScript bug commits shows static typing would have flagged about 15% of public bugs.",
        "details": {
          "topic": "Static type systems for JavaScript",
          "problem": "JavaScript is dynamically typed and widely used in large projects, but it is unclear how many real-world bugs static type systems (Flow, TypeScript) would have detected and thus potentially prevented.",
          "approach": "Uniformly sampled 400 linked, fixed public bug reports from 398 GitHub JavaScript projects; for each buggy parent commit the authors manually added minimal, consistent type annotations (localized to regions changed by the fix, using type shims and module interfaces as needed) and ran Flow 0.30 and TypeScript 2.0 to see if the checkers reported errors. They recorded detectability, categorized undetectable bugs, measured annotation \"tax\" (tokens and time), resolved unknowns, and computed confidence intervals.",
          "key_insights": [
            "Both Flow 0.30 and TypeScript 2.0 detect about 15% of public bugs (mean 15%, 95% CI ≈ [11.5%, 18.5%]); the two tools largely overlap in which bugs they catch.",
            "Most undetectable bugs are specification/logic errors (SpecError ≈ 55%; spec-related errors ≈ 78%), so static typing cannot address a large class of public defects.",
            "Annotation cost to reveal a detectable bug is modest in this experiment: average token tax ≈ 1.7 for Flow and 2.4 for TypeScript; average time tax ≈ 231s (Flow) vs 307s (TypeScript), reflecting Flow's stronger inference and more compact nullable syntax.",
            "TypeScript 2.0's strict null handling substantially improved detection (22 additional bugs, a 58% increase over 1.8), highlighting nullability design as an important language feature for catching bugs."
          ],
          "implications": "Static typing can meaningfully reduce checked-in bugs in real projects (around a 10–15% immediate reduction in public bugs in this study) while incurring a modest, often local annotation cost; tool and language design choices (null handling, module/library annotation support, and richer string refinements) materially affect effectiveness; researchers can extend the historical \"what-if\" methodology to other type systems and private-development bugs, and practitioners should weigh the bug-reduction benefits and modest annotation effort when considering adoption."
        }
      },
      "tags": [
        "program-analysis",
        "repository-mining",
        "defect-prediction-and-quality",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 39th International Conference on Software Engineering, ICSE 2017, Buenos Aires, Argentina, May 20-28, 2017",
      "publisher": "IEEE / ACM",
      "pages": "758--769",
      "doi": "10.1109/ICSE.2017.75",
      "url": "https://doi.org/10.1109/ICSE.2017.75",
      "editor": "Sebastián Uchitel and Alessandro Orso and Martin P. Robillard",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/GaoBB17,\n  author       = {Zheng Gao and\n                  Christian Bird and\n                  Earl T. Barr},\n  editor       = {Sebasti{\\'{a}}n Uchitel and\n                  Alessandro Orso and\n                  Martin P. Robillard},\n  title        = {To type or not to type: quantifying detectable bugs in JavaScript},\n  booktitle    = {Proceedings of the 39th International Conference on Software Engineering,\n                  {ICSE} 2017, Buenos Aires, Argentina, May 20-28, 2017},\n  pages        = {758--769},\n  publisher    = {{IEEE} / {ACM}},\n  year         = {2017},\n  url          = {https://doi.org/10.1109/ICSE.2017.75},\n  doi          = {10.1109/ICSE.2017.75},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/GaoBB17.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tse/ZanjaniKB16": {
      "status": "MAPPED",
      "type": "article",
      "title": "Automatically Recommending Peer Reviewers in Modern Code Review",
      "authors": "Motahareh Bahrami Zanjani and Huzefa H. Kagdi and Christian Bird",
      "year": "2016",
      "venue": "{IEEE",
      "mapped_pdf": "zanjani2016recommending.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Automatically recommends reviewers for modern code review by mining past review histories and scoring reviewer expertise using comment counts, workdays, and recency, yielding higher accuracy than commit- or path-based methods.",
        "details": {
          "topic": "Automatic reviewer recommendation for modern code review",
          "problem": "Authors of code changes need to find appropriate, timely, and expert reviewers but selecting reviewers manually is hard, especially when expertise is not reflected in commit history and expertise changes over time.",
          "approach": "cHRev mines historical code review data (Gerrit/CodeFlow) to compute per-file reviewer expertise using three normalized metrics—number of review comments, number of workdays with comments, and recency—combines these into an xFactor per reviewer-file, aggregates scores across files (with package/system fallbacks), and returns ranked recommendations; evaluated on Android, Eclipse, Mylyn and a Microsoft Office codebase and compared to REVFINDER (path/name similarity), xFinder (commit-based), and a combined RevCom, using precision, recall, F-score, and MRR with statistical testing.",
          "key_insights": [
            "Using review-specific signals (comment count, workdays, recency) to measure reviewer expertise yields substantially better precision, recall, F-score and MRR than path/name similarity (REVFINDER) or commit-based (xFinder) recommenders across open-source and commercial datasets.",
            "Review history captures valuable reviewers who do not appear in commit history (e.g., testers, managers, project leads, contributors of unaccepted patches), so commit-only approaches miss many suitable reviewers.",
            "Combining commit and review signals (RevCom) did not consistently improve results and can degrade precision/recall; depth/specificity of review contributions is more informative than breadth alone.",
            "cHRev achieves practical ranking performance (MRR > 0.5), meaning the first or second recommendation typically contains a correct reviewer, reducing search/assignment effort."
          ],
          "implications": "For tool builders and teams, incorporate review-history features (comments, active review days, and recency) into reviewer recommendation systems to improve assignment accuracy and speed up reviews; for researchers, prioritize review-derived signals over commit-derived signals when modeling reviewer expertise and further explore text/issue-level features and deployment across varied projects, while noting dataset-period and generalization caveats."
        }
      },
      "tags": [
        "code-review",
        "recommendation-systems",
        "repository-mining"
      ],
      "journal": "IEEE Trans. Software Eng.",
      "volume": "42",
      "number": "6",
      "pages": "530--543",
      "doi": "10.1109/TSE.2015.2500238",
      "url": "https://doi.org/10.1109/TSE.2015.2500238",
      "raw_bibtex": "@article{DBLP:journals/tse/ZanjaniKB16,\n  author       = {Motahareh Bahrami Zanjani and\n                  Huzefa H. Kagdi and\n                  Christian Bird},\n  title        = {Automatically Recommending Peer Reviewers in Modern Code Review},\n  journal      = {{IEEE} Trans. Software Eng.},\n  volume       = {42},\n  number       = {6},\n  pages        = {530--543},\n  year         = {2016},\n  url          = {https://doi.org/10.1109/TSE.2015.2500238},\n  doi          = {10.1109/TSE.2015.2500238},\n  timestamp    = {Wed, 17 May 2017 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/tse/ZanjaniKB16.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/SmithB016": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Beliefs, practices, and personalities of software engineers: a survey in a large software company",
      "authors": "Edward K. Smith and Christian Bird and Thomas Zimmermann",
      "year": "2016",
      "venue": "Proceedings of the 9th International Workshop on Cooperative and Human\n                  Aspects of Software Engineering, CHASE@ICSE 2016, Austin, Texas, USA,\n                  May 16, 2016",
      "mapped_pdf": "smith2016beliefs.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "A 797-respondent survey at a large software company links Big Five personality traits to developers' beliefs and practices and finds a few robust associations (e.g., managers are more conscientious and extraverted; tool-builders show high openness/conscientiousness/extraversion and lower neuroticism) while many hypothesized differences disappear after multiple-testing correction.",
        "details": {
          "topic": "Personality, beliefs, and work practices of software engineers",
          "problem": "We lack clear, empirically grounded knowledge about how software engineers' personality traits relate to their day-to-day practices and opinions, which limits understanding of team composition, tool adoption, and development culture.",
          "approach": "The authors ran an anonymous electronic survey sent to 3,000 employees at a large software company (797 responses). Participants completed a 50-item IPIP Big Five inventory and answered 23 questions on demographics, beliefs, and practices. The authors analyzed response distributions and used Kruskal–Wallis tests (115 trait-question comparisons) with Benjamini–Hochberg correction to identify statistically significant personality differences.",
          "key_insights": [
            "Managers scored higher on conscientiousness and extraversion (significant after multiple-testing correction).",
            "Engineers who built homegrown tools tended to be more open, more conscientious, more extraverted and less neurotic (several associations, some robust after correction, e.g., conscientiousness).",
            "Listening to music while working correlated with higher openness and extraversion but lower conscientiousness, and advocates of 'Agile development is awesome' were more extraverted and less neurotic (some effects weakened after correction).",
            "Many expected differences were absent (no personality difference between developers and testers), and only a small fraction of the 115 tests remained significant after p-value adjustment, indicating generally weak or sparse trait–practice links in this sample."
          ],
          "implications": "Personality has limited but non-negligible associations with certain roles, practices, and beliefs; practitioners should be cautious about using personality tests for hiring or rigid team assignment given weak and context-specific effects, and researchers should replicate this work across companies and contexts to validate which trait–practice links are reliable and practically meaningful."
        }
      },
      "tags": [
        "surveys",
        "engineering-management",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 9th International Workshop on Cooperative and Human Aspects of Software Engineering, CHASE@ICSE 2016, Austin, Texas, USA, May 16, 2016",
      "publisher": "ACM",
      "pages": "15--18",
      "doi": "10.1145/2897586.2897596",
      "url": "https://doi.org/10.1145/2897586.2897596",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/SmithB016,\n  author       = {Edward K. Smith and\n                  Christian Bird and\n                  Thomas Zimmermann},\n  title        = {Beliefs, practices, and personalities of software engineers: a survey\n                  in a large software company},\n  booktitle    = {Proceedings of the 9th International Workshop on Cooperative and Human\n                  Aspects of Software Engineering, CHASE@ICSE 2016, Austin, Texas, USA,\n                  May 16, 2016},\n  pages        = {15--18},\n  publisher    = {{ACM}},\n  year         = {2016},\n  url          = {https://doi.org/10.1145/2897586.2897596},\n  doi          = {10.1145/2897586.2897596},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/SmithB016.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/Devanbu0B16": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Belief & evidence in empirical software engineering",
      "authors": "Premkumar T. Devanbu and Thomas Zimmermann and Christian Bird",
      "year": "2016",
      "venue": "Proceedings of the 38th International Conference on Software Engineering,\n                  {ICSE",
      "mapped_pdf": "devanbu2016evidence.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Surveying Microsoft developers and analyzing two large projects, the authors compare programmers' strongly held beliefs with empirical project data and find beliefs are mainly formed from personal experience and often diverge from measured evidence (e.g., geographic distribution has only a minimal effect on defect rates).",
        "details": {
          "topic": "Practitioner beliefs versus empirical evidence in software engineering",
          "problem": "Developers hold strong a priori beliefs about software practices that influence their decisions, but it is unclear how those beliefs align with empirical evidence and whether research findings are effectively disseminated to practitioners.",
          "approach": "The authors ran a Likert-scale survey (564 responses) of Microsoft developers about several empirically falsifiable claims (e.g., effect of language, distribution, defect risk) including ranked sources of opinion; they then performed a case study on two large Microsoft projects (Pr-A and Pr-B) using per-file defect-repair counts and regression models controlling for size, churn, number of developers, and ownership to measure the effect of geographic distribution, reporting statistical significance and effect sizes (Cohen's f2).",
          "key_insights": [
            "Developers often hold strong and diverse opinions on key SE claims; some common, well-supported findings (e.g., code reviews improve quality) have been widely adopted, but many beliefs do not track available empirical evidence.",
            "Personal experience, peers, and managers are the dominant sources of developer beliefs; research papers rank near the bottom as an influence on opinions.",
            "In the two-project case study, geographic distribution produced statistically significant but minuscule effect sizes on defect rates (f2 well below the threshold for a small effect), and effects were sometimes in the opposite direction, so practitioners' beliefs about distribution did not consistently match project evidence."
          ],
          "implications": "Empirical SE must invest more in systematic dissemination (summaries, syntheses, practitioner-facing outlets) and incorporate practitioner priors into experimental design (e.g., higher power when results contradict strong beliefs); researchers and tool builders should be cautious of anecdotal belief-driven practice and prioritize high-quality, context-aware evidence to influence real-world adoption."
        }
      },
      "tags": [
        "surveys",
        "repository-mining",
        "statistical-analysis",
        "case-study"
      ],
      "booktitle": "Proceedings of the 38th International Conference on Software Engineering, ICSE 2016, Austin, TX, USA, May 14-22, 2016",
      "publisher": "ACM",
      "pages": "108--119",
      "doi": "10.1145/2884781.2884812",
      "url": "https://doi.org/10.1145/2884781.2884812",
      "editor": "Laura K. Dillon and Willem Visser and Laurie A. Williams",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/Devanbu0B16,\n  author       = {Premkumar T. Devanbu and\n                  Thomas Zimmermann and\n                  Christian Bird},\n  editor       = {Laura K. Dillon and\n                  Willem Visser and\n                  Laurie A. Williams},\n  title        = {Belief {\\&} evidence in empirical software engineering},\n  booktitle    = {Proceedings of the 38th International Conference on Software Engineering,\n                  {ICSE} 2016, Austin, TX, USA, May 14-22, 2016},\n  pages        = {108--119},\n  publisher    = {{ACM}},\n  year         = {2016},\n  url          = {https://doi.org/10.1145/2884781.2884812},\n  doi          = {10.1145/2884781.2884812},\n  timestamp    = {Sun, 19 Jan 2025 13:14:44 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/Devanbu0B16.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/ManotasBZSJSPC16": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "An empirical study of practitioners' perspectives on green software engineering",
      "authors": "Irene Manotas and Christian Bird and Rui Zhang and David C. Shepherd and Ciera Jaspan and Caitlin Sadowski and Lori L. Pollock and James Clause",
      "year": "2016",
      "venue": "Proceedings of the 38th International Conference on Software Engineering,\n                  {ICSE",
      "mapped_pdf": "washburn2016games.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "An empirical study of 18 interviews and a 464-respondent survey characterizes practitioners' views and practices around energy-aware software engineering, finding that developers care about energy but lack measurement, tooling, and concrete requirements.",
        "details": {
          "topic": "Green software engineering (energy-aware development)",
          "problem": "As software increasingly runs on mobile, embedded, and cloud platforms, developers need to consider energy usage, but little is known about current practitioner practices, requirements, and barriers to building energy-efficient software.",
          "approach": "Mixed-methods empirical study: 18 semi-structured qualitative interviews with Microsoft practitioners (transcribed and coded via grounded theory) followed by a targeted quantitative survey of 464 developers/testers from ABB, Google, IBM, and Microsoft using 36 Likert statements and free-response prompts to generalize interview themes and analyze perspectives across requirements, design, construction, testing/fixing, and maintenance.",
          "key_insights": [
            "Energy goals are often informal desires or expressed via proxies (e.g., runtime, radio usage) rather than precise energy metrics or targets, making requirements vague and hard to verify.",
            "Mobile and many traditional app teams report energy concerns more frequently than expected, while embedded and data-center application teams reported fewer explicit application-level energy requirements; responsibilities for energy are perceived as shared across apps, libraries, OS, and hardware.",
            "Practitioners consider energy in design and when writing new code and are willing to trade other qualities for energy savings, but they generally lack accurate intuitions about energy, lack fine-grained measurement/debugging tools, and find energy issues harder to discover and diagnose than other performance problems.",
            "Energy is largely ignored during maintenance and documentation, and practitioners express strong demand for effective profiling and static-analysis tools, scenario-aware metrics, and educational resources."
          ],
          "implications": "Researchers and tool-builders should prioritize practical measurement and debugging tools (fine-grained profiling, scenario-aware benchmarks, and static analyses that map to energy impact), methods for eliciting concrete energy requirements and trade-off analyses, empirical validation of design/architecture patterns, and educational and process support so teams can specify, detect, and maintain energy behavior across the software lifecycle; integrating energy considerations earlier and providing usable oracles will make energy-aware practices more adoptable in industry."
        }
      },
      "tags": [
        "interviews",
        "surveys",
        "tool-adoption-and-trust",
        "engineering-management"
      ],
      "booktitle": "Proceedings of the 38th International Conference on Software Engineering, ICSE 2016, Austin, TX, USA, May 14-22, 2016",
      "publisher": "ACM",
      "pages": "237--248",
      "doi": "10.1145/2884781.2884810",
      "url": "https://doi.org/10.1145/2884781.2884810",
      "editor": "Laura K. Dillon and Willem Visser and Laurie A. Williams",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/ManotasBZSJSPC16,\n  author       = {Irene Manotas and\n                  Christian Bird and\n                  Rui Zhang and\n                  David C. Shepherd and\n                  Ciera Jaspan and\n                  Caitlin Sadowski and\n                  Lori L. Pollock and\n                  James Clause},\n  editor       = {Laura K. Dillon and\n                  Willem Visser and\n                  Laurie A. Williams},\n  title        = {An empirical study of practitioners' perspectives on green software\n                  engineering},\n  booktitle    = {Proceedings of the 38th International Conference on Software Engineering,\n                  {ICSE} 2016, Austin, TX, USA, May 14-22, 2016},\n  pages        = {237--248},\n  publisher    = {{ACM}},\n  year         = {2016},\n  url          = {https://doi.org/10.1145/2884781.2884810},\n  doi          = {10.1145/2884781.2884810},\n  timestamp    = {Sun, 02 Oct 2022 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/conf/icse/ManotasBZSJSPC16.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/WashburnSN0B16": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "What went right and what went wrong: an analysis of 155 postmortems from game development",
      "authors": "Michael Washburn Jr. and Pavithra Sathiyanarayanan and Meiyappan Nagappan and Thomas Zimmermann and Christian Bird",
      "year": "2016",
      "venue": "Proceedings of the 38th International Conference on Software Engineering,\n                  {ICSE",
      "mapped_pdf": "washburn2016postmortems.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 11:05:45",
      "extracted_paper_info": {
        "tldr": "Analyzed 155 Gamasutra postmortems to identify common causes of success and failure in game development and distilled an empirically derived taxonomy, best practices, and pitfalls.",
        "details": {
          "topic": "Empirical analysis of game development postmortems",
          "problem": "Game development practices are under-studied yet differ from traditional software engineering, so practitioners lack an evidence-based understanding of what typically goes right or wrong in game projects.",
          "approach": "Qualitative and quantitative analysis of 155 publicly posted game development postmortems (collected from Gamasutra spanning ~1998–2015); two authors iteratively coded items in 'what went right' and 'what went wrong' sections into an emergent taxonomy (expanded from 12 to 22 categories), extracted contextual metadata (platform, team size, duration, publisher), computed category frequencies, and compared subgroups (small vs large teams, publisher vs self-published, single vs multi-platform).",
          "key_insights": [
            "Most frequently cited positives: strong game design, an effective development process (planning, prototyping, iteration), cohesive/motivated teams, and good art; these correlate with successful outcomes.",
            "Most frequent pitfalls: obstacles (team formation, unexpected events), optimistic or underestimated schedules, weak development processes (lack of upfront planning or poor management), and overly ambitious or confusing game design.",
            "Context matters: small teams reported design successes more often but faced more obstacles; self-published teams reported better testing but more obstacles and weaker tooling versus publisher-backed teams; multiplatform projects tended to report stronger art and marketing outcomes.",
            "Actionable practices distilled: invest in pre-production and prototypes, adopt iterative development, apply risk management, scope conservatively, and use realistic scheduling, testing, documentation, and effective communication."
          ],
          "implications": "Provides an evidence-based taxonomy and empirical frequency data that researchers can use to target studies and tool development, and gives practitioners concrete, peer-reported recommendations (plan and prototype early, manage risk, avoid over-ambition, prioritize team experience and testing); educators can use the findings to prepare students for game-specific tradeoffs, and the community is encouraged to publish postmortems to broaden empirical knowledge in software engineering."
        }
      },
      "tags": [
        "repository-mining",
        "engineering-management",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 38th International Conference on Software Engineering, ICSE 2016, Austin, TX, USA, May 14-22, 2016 - Companion Volume",
      "publisher": "ACM",
      "pages": "280--289",
      "doi": "10.1145/2889160.2889253",
      "url": "https://doi.org/10.1145/2889160.2889253",
      "editor": "Laura K. Dillon and Willem Visser and Laurie A. Williams",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/WashburnSN0B16,\n  author       = {Michael Washburn Jr. and\n                  Pavithra Sathiyanarayanan and\n                  Meiyappan Nagappan and\n                  Thomas Zimmermann and\n                  Christian Bird},\n  editor       = {Laura K. Dillon and\n                  Willem Visser and\n                  Laurie A. Williams},\n  title        = {What went right and what went wrong: an analysis of 155 postmortems\n                  from game development},\n  booktitle    = {Proceedings of the 38th International Conference on Software Engineering,\n                  {ICSE} 2016, Austin, TX, USA, May 14-22, 2016 - Companion Volume},\n  pages        = {280--289},\n  publisher    = {{ACM}},\n  year         = {2016},\n  url          = {https://doi.org/10.1145/2889160.2889253},\n  doi          = {10.1145/2889160.2889253},\n  timestamp    = {Tue, 10 Aug 2021 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/conf/icse/WashburnSN0B16.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/kbse/ChristakisB16": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "What developers want and need from program analysis: an empirical study",
      "authors": "Maria Christakis and Christian Bird",
      "year": "2016",
      "venue": "Proceedings of the 31st {IEEE/ACM",
      "mapped_pdf": "christakis2016developers.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "An empirical study at Microsoft (interviews, a 375‑response survey, and analysis of 256 live‑site incidents) finds that developers want static analyzers that integrate into workflow, are fast or staged, have low false positive rates and configurable rules, and that there is a mismatch between the issues developers request and the high‑severity defects that occur in production.",
        "details": {
          "topic": "Program (static) analysis adoption and developer needs",
          "problem": "Researchers produce many static analysis tools, but it is unclear which designs practitioners will actually adopt and what features, tradeoffs, and reporting styles developers need for tools to be useful in real-world development.",
          "approach": "Multi-method empirical study at Microsoft including interviews, a pilot and beta then a final anonymous survey sent to 2,000 developers (375 responses, median 9 years experience), analysis of 256 live‑site incidents from 17 services, and an inventory/comparison of industry analyzers; quantitative ranking, statistical tests, and qualitative coding were used.",
          "key_insights": [
            "Top barriers to adoption are mismatched default rules, poor/wrongly phrased warnings, and high false positive rates; developers prefer configurable defaults and good suppression mechanisms (source annotations favored).",
            "Developers want incremental/changelist and directed (method/file) analyses and favor a two-stage model: fast editor feedback plus slower, deeper offline analysis; most will tolerate minutes of analysis but prefer false positive rates under ~15–20%.",
            "There is a mismatch between developer preferences and production pain: 65% of live‑site incidents are reliability errors, yet developers rank reliability relatively low as what they want analyzers to find—indicating limited trust in analyzers to find intricate defects.",
            "Many developers are willing to add lightweight, language‑level annotations/specifications to improve analysis, but most do not want to author custom analyzer rules; determinism, integration into workflow, and suggested fixes increase trust and uptake."
          ],
          "implications": "To increase real‑world impact, program analysis research and tool builders should prioritize incremental/compositional analyses that integrate seamlessly (IDE/build/review), provide sensible, configurable default rule sets, produce clear deterministic warnings with low false positive rates, and adopt a two‑stage (fast editor + deep offline) deployment model; researchers should also address the gap by improving analyzers' ability to detect reliability issues and by focusing on usability (good messages, suppression, and easy annotations) so practitioners will trust and act on findings."
        }
      },
      "tags": [
        "program-analysis",
        "tool-adoption-and-trust",
        "interviews",
        "surveys"
      ],
      "booktitle": "Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, ASE 2016, Singapore, September 3-7, 2016",
      "publisher": "ACM",
      "pages": "332--343",
      "doi": "10.1145/2970276.2970347",
      "url": "https://doi.org/10.1145/2970276.2970347",
      "editor": "David Lo and Sven Apel and Sarfraz Khurshid",
      "raw_bibtex": "@inproceedings{DBLP:conf/kbse/ChristakisB16,\n  author       = {Maria Christakis and\n                  Christian Bird},\n  editor       = {David Lo and\n                  Sven Apel and\n                  Sarfraz Khurshid},\n  title        = {What developers want and need from program analysis: an empirical\n                  study},\n  booktitle    = {Proceedings of the 31st {IEEE/ACM} International Conference on Automated\n                  Software Engineering, {ASE} 2016, Singapore, September 3-7, 2016},\n  pages        = {332--343},\n  publisher    = {{ACM}},\n  year         = {2016},\n  url          = {https://doi.org/10.1145/2970276.2970347},\n  doi          = {10.1145/2970276.2970347},\n  timestamp    = {Sat, 30 Sep 2023 09:51:40 +0200},\n  biburl       = {https://dblp.org/rec/conf/kbse/ChristakisB16.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:books/el/16/Bird16": {
      "status": "MAPPED",
      "type": "incollection",
      "title": "Interviews",
      "authors": "Christian Bird",
      "year": "2016",
      "venue": "Perspectives on Data Science for Software Engineering",
      "mapped_pdf": "bird2016interviews.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 12:24:28",
      "extracted_paper_info": {
        "tldr": "Practical guidance and best practices for designing, conducting, transcribing, and analyzing qualitative interviews to support exploratory and mixed-methods software engineering research.",
        "details": {
          "topic": "Qualitative interview methods for software engineering research",
          "problem": "Researchers and practitioners often misinterpret or lack contextual information in recorded development data and need clear, practical guidance on when and how to use interviews effectively despite their costs and biases.",
          "approach": "The author draws on Microsoft software-engineering research experience and a motivating anecdote about code review data to present concrete, phase-by-phase advice: create a concise interview guide; select diverse or saturation-based samples; recruit and prepare participants; collect background artifacts; conduct interviews (preferably two interviewers, record and take notes); perform prompt post-interview discussion and notes; choose transcription strategies (including chunked transcription); and analyze responses with card-sorting to derive themes.",
          "key_insights": [
            "Interviews can reveal critical contextual information and practices not captured in recorded data (e.g., in-person code reviews causing misleading timestamps).",
            "Purposeful sampling targeting variation (or saturation) yields richer, more relevant perspectives than random sampling for small interview studies.",
            "Practical conduct techniques—use of an interview guide, two interviewers, recordings plus notes, time awareness, and small tokens—improve data quality and rapport.",
            "Chunked transcription and card-sorting are efficient, effective analysis approaches for turning interview content into themes that can inform further quantitative studies."
          ],
          "implications": "Following these practices helps researchers design higher-quality qualitative studies that uncover hidden processes, triangulate and interpret quantitative findings, and generate hypotheses for larger-scale work; practitioners and tool builders can use interview-derived insights to better align data collection and tooling with actual developer practices."
        }
      },
      "tags": [
        "interviews",
        "case-study",
        "repository-mining"
      ],
      "booktitle": "Perspectives on Data Science for Software Engineering",
      "publisher": "Academic Press",
      "pages": "125--131",
      "doi": "10.1016/B978-0-12-804206-9.00025-8",
      "url": "https://doi.org/10.1016/b978-0-12-804206-9.00025-8",
      "editor": "Tim Menzies and Laurie A. Williams and Thomas Zimmermann",
      "raw_bibtex": "@incollection{DBLP:books/el/16/Bird16,\n  author       = {Christian Bird},\n  editor       = {Tim Menzies and\n                  Laurie A. Williams and\n                  Thomas Zimmermann},\n  title        = {Interviews},\n  booktitle    = {Perspectives on Data Science for Software Engineering},\n  pages        = {125--131},\n  publisher    = {Academic Press},\n  year         = {2016},\n  url          = {https://doi.org/10.1016/b978-0-12-804206-9.00025-8},\n  doi          = {10.1016/B978-0-12-804206-9.00025-8},\n  timestamp    = {Mon, 07 Sep 2020 10:46:53 +0200},\n  biburl       = {https://dblp.org/rec/books/el/16/Bird16.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:books/el/16/Bird16a": {
      "status": "MAPPED",
      "type": "incollection",
      "title": "Don't embarrass yourself",
      "authors": "Christian Bird",
      "year": "2016",
      "venue": "Perspectives on Data Science for Software Engineering",
      "mapped_pdf": "bird2016bias.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Hidden sampling and recording biases in software engineering datasets (for example, unequal linking of bug reports to fixing commits by severity) can distort analyses and predictive models; the paper demonstrates detection methods, shows how bias altered defect-prediction results, and gives practical guidance to assess and report bias.",
        "details": {
          "topic": "Bias in software engineering datasets / empirical software engineering",
          "problem": "Data collected from software repositories and defect trackers can be systematically unrepresentative of the true population (e.g., some severities or developer groups are over- or under-represented), causing misleading conclusions and biased models.",
          "approach": "Illustrated the problem with historical and software-engineering examples, analyzed defect-link datasets across multiple projects (showing severity-dependent link rates), trained defect-prediction models to demonstrate biased outcomes, and described practical detection and assessment techniques (visualization, chi-squared/Fisher tests, K–S test, subsampling) and guidance on which features to prioritize and report.",
          "key_insights": [
            "Software-engineering datasets can contain strong, non-obvious biases (e.g., low-severity bugs were far more likely to be linked to commits than high-severity bugs in several projects).",
            "Models and empirical conclusions built on biased samples inherit those biases (the defect predictor performed better on the over-represented severity class).",
            "Bias can be detected via visualization and statistical tests (histograms, chi-squared/Fisher for categorical data, Kolmogorov–Smirnov for numeric data) but also requires domain knowledge to interpret.",
            "When a bias is found, its practical impact should be assessed (e.g., create differently biased or balanced subsets) and investigators should prioritize and report checks for the features most likely to affect their outcomes."
          ],
          "implications": "Researchers and practitioners must evaluate and report dataset biases before drawing conclusions or deploying models: doing so improves the validity of empirical findings, guides data collection and model evaluation, helps prioritize which features to audit, and ensures consumers of studies/tools understand limitations and potential failure modes."
        }
      },
      "tags": [
        "defect-prediction-and-quality",
        "repository-mining",
        "statistical-analysis",
        "dataset-and-tooling"
      ],
      "booktitle": "Perspectives on Data Science for Software Engineering",
      "publisher": "Academic Press",
      "pages": "309--315",
      "doi": "10.1016/B978-0-12-804206-9.00056-8",
      "url": "https://doi.org/10.1016/b978-0-12-804206-9.00056-8",
      "editor": "Tim Menzies and Laurie A. Williams and Thomas Zimmermann",
      "raw_bibtex": "@incollection{DBLP:books/el/16/Bird16a,\n  author       = {Christian Bird},\n  editor       = {Tim Menzies and\n                  Laurie A. Williams and\n                  Thomas Zimmermann},\n  title        = {Don't embarrass yourself},\n  booktitle    = {Perspectives on Data Science for Software Engineering},\n  pages        = {309--315},\n  publisher    = {Academic Press},\n  year         = {2016},\n  url          = {https://doi.org/10.1016/b978-0-12-804206-9.00056-8},\n  doi          = {10.1016/B978-0-12-804206-9.00056-8},\n  timestamp    = {Mon, 26 Apr 2021 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/books/el/16/Bird16a.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/ese/HindleBZN15": {
      "status": "MAPPED",
      "type": "article",
      "title": "Do topics make sense to managers and developers?",
      "authors": "Abram Hindle and Christian Bird and Thomas Zimmermann and Nachiappan Nagappan",
      "year": "2015",
      "venue": "Empir. Softw. Eng.",
      "mapped_pdf": "hindle2014topics.pdf",
      "notes": "Auto-mapped via PDF investigation, score: 1.80",
      "extracted_paper_info": {
        "tldr": "Evaluates whether topics extracted with LDA from requirements and issue reports can be linked to version-control commits and whether those topics and time-series of topic-relevant commits make sense to program managers and developers.",
        "details": {
          "topic": "Topic modeling (LDA) for requirements/issue-to-commit traceability",
          "problem": "Researchers often assume LDA topics are interpretable and useful for traceability and effort-overview, but it is unclear whether practitioners recognize, label, and accept topics and topic-based commit trends as reflecting real development effort.",
          "approach": "Extracted LDA topics from a large Microsoft requirements corpus (75 documents, ~285k words) and from issue trackers of FLOSS projects (extracted from 209 projects, 13 used), inferred those topics onto commit messages from ~650k commits (Microsoft) and various git repos, generated per-topic time-series ('topic-plots') at global, team and personal levels, and validated topic labels and plots via interviews and surveys with Microsoft program managers/developers and 13 FLOSS developers; used CVB0 LDA (α=0.1, β=0.1, 1000 iterations) for the industrial case and Vowpal Wabbit online LDA for FLOSS, comparing non-expert vs expert labels and measuring perceptual agreement.",
          "key_insights": [
            "Many LDA topics and their inferred commit-time trends corresponded to real features or events and were perceived by stakeholders as reflecting effort (around 46–48% of topic-plot ratings agreed/strongly agreed with perceived effort).",
            "Developers found personalized/topic-per-author plots more useful and easier to validate, while managers benefited from global/topic-plots for spotting cross-team trends and milestones.",
            "Labeling topics is difficult and domain-sensitive: non-expert labels matched expert labels only about half the time, and tokenization/stemming and presentation materially affect interpretability.",
            "Topic–document relationships (which commits relate to which topics) are more reliable for traceability/overview than raw topic word lists, so topics should be pruned, labeled by domain experts, and presented with drill-down support."
          ],
          "implications": "For researchers: validate topic-model outputs with domain experts and prefer evaluating document-topic links over relying solely on topic word lists; for tool builders/managers: topic-based commit-plots can augment dashboards and effort estimation but require expert labeling, pruning of noisy topics, good tokenization, and drill-down to source artifacts; for practitioners: topics can surface real development trends and historical effort but should be interpreted cautiously and with domain context."
        }
      },
      "tags": [
        "ai-for-software-engineering",
        "repository-mining",
        "interviews",
        "surveys"
      ],
      "journal": "Empir. Softw. Eng.",
      "volume": "20",
      "number": "2",
      "pages": "479--515",
      "doi": "10.1007/S10664-014-9312-1",
      "url": "https://doi.org/10.1007/s10664-014-9312-1",
      "raw_bibtex": "@article{DBLP:journals/ese/HindleBZN15,\n  author       = {Abram Hindle and\n                  Christian Bird and\n                  Thomas Zimmermann and\n                  Nachiappan Nagappan},\n  title        = {Do topics make sense to managers and developers?},\n  journal      = {Empir. Softw. Eng.},\n  volume       = {20},\n  number       = {2},\n  pages        = {479--515},\n  year         = {2015},\n  url          = {https://doi.org/10.1007/s10664-014-9312-1},\n  doi          = {10.1007/S10664-014-9312-1},\n  timestamp    = {Tue, 25 Aug 2020 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/ese/HindleBZN15.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/software/AdamsBBMKM15": {
      "status": "MAPPED",
      "type": "article",
      "title": "The Practice and Future of Release Engineering: A Roundtable with Three Release Engineers",
      "authors": "Bram Adams and Stephany Bellomo and Christian Bird and Tamara Marshall-Keim and Foutse Khomh and Kim Moir",
      "year": "2015",
      "venue": "{IEEE",
      "mapped_pdf": "adams2015releng.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 10:44:27",
      "extracted_paper_info": {
        "tldr": "A roundtable of release-engineering practitioners synthesizes how teams measure and manage release quality (canaries, metrics, staged rollouts), why continuous delivery works for some platforms but not others, and what skills, tooling, and research are needed to scale reliable releases.",
        "details": {
          "topic": "Release engineering and continuous delivery practices",
          "problem": "Organizations must reliably transform code into tested, signed, and deployed products at scale, but face challenges in measuring release health, rolling out safely (especially across web, mobile, and desktop ecosystems), automating pipelines, and finding/having engineers with the right skills.",
          "approach": "A practitioner roundtable composed of three release engineers/managers compares real-world practices and trade-offs: they describe metrics and monitoring, canary and staged rollout strategies, rollback policies, differences between web/mobile/desktop delivery, hiring and education needs, automation efforts, and suggested research directions (CI capacity modeling, selective test execution, release-velocity analysis).",
          "key_insights": [
            "Effective release monitoring relies on a mix of metrics: prioritized open bugs, success/abandon rates, test-pipeline 'greenness', detailed logging, user feedback, and canary comparisons versus production.",
            "Canarying and staged rollouts are critical for detecting regressions in production traffic; web deployments can often use rapid continuous delivery, while mobile/third-party ecosystems severely limit immediate deployment and rollback strategies.",
            "Continuous deployment scales well for small, owned-web fleets but struggles for large organizations or platforms where distribution and compatibility constraints exist; push-on-green has caveats (dependencies, device heterogeneity).",
            "Release engineering is a distinct, hard-to-find skill set that is undervalued in curricula; practitioners call for earlier involvement of release engineers, more automation, and research on CI capacity, test-selection, and release-cycle dynamics."
          ],
          "implications": "For researchers: prioritize models and tools for CI capacity planning, selective test invocation based on change impact, and empirical studies of release cadence and defect/velocity trade-offs; for practitioners and developers: invest early in release-engineering roles, automate pipelines, use canary/staged rollouts and rich metrics to reduce risk, and tailor continuous-delivery goals to platform constraints; for educators: introduce practical coursework on version control, CI/CD pipelines, release processes, and production monitoring to bridge the skills gap."
        }
      },
      "tags": [
        "release-engineering",
        "devops-and-infrastructure-as-code",
        "interviews"
      ],
      "journal": "IEEE Softw.",
      "volume": "32",
      "number": "2",
      "pages": "42--49",
      "doi": "10.1109/MS.2015.52",
      "url": "https://doi.org/10.1109/MS.2015.52",
      "raw_bibtex": "@article{DBLP:journals/software/AdamsBBMKM15,\n  author       = {Bram Adams and\n                  Stephany Bellomo and\n                  Christian Bird and\n                  Tamara Marshall{-}Keim and\n                  Foutse Khomh and\n                  Kim Moir},\n  title        = {The Practice and Future of Release Engineering: {A} Roundtable with\n                  Three Release Engineers},\n  journal      = {{IEEE} Softw.},\n  volume       = {32},\n  number       = {2},\n  pages        = {42--49},\n  year         = {2015},\n  url          = {https://doi.org/10.1109/MS.2015.52},\n  doi          = {10.1109/MS.2015.52},\n  timestamp    = {Sat, 09 Apr 2022 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/software/AdamsBBMKM15.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/tse/Murphy-HillZBN15": {
      "status": "MAPPED",
      "type": "article",
      "title": "The Design Space of Bug Fixes and How Developers Navigate It",
      "authors": "Emerson R. Murphy-Hill and Thomas Zimmermann and Christian Bird and Nachiappan Nagappan",
      "year": "2015",
      "venue": "{IEEE",
      "mapped_pdf": "murphyhill2015design.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Characterizes a multi-dimensional design space of bug fixes and identifies the technical and social factors that influence which fix engineers choose.",
        "details": {
          "topic": "Design space of bug fixes and developer decision-making",
          "problem": "Although many bugs can be fixed in multiple ways, we lack empirical understanding of the kinds of alternative fixes available and the factors (technical and non-technical) that guide engineers' choices, which affects bug prediction, localization, evaluation, and teaching.",
          "approach": "Mixed-method empirical study: motivational analysis of diverse solutions in the Pex4Fun environment; 40 qualitative interviews (opportunistic and firehouse); observation of 6 bug triage meetings; a survey of 324 Microsoft engineers plus a replication with 37 external developers; qualitative coding and descriptive/statistical analysis to identify dimensions of fixes and factors that guide choices.",
          "key_insights": [
            "The design space is multi-dimensional (examples: data propagation, error surfacing, behavioral impact, functionality removal, refactoring extent, internal vs external changes, accuracy vs heuristic fixes, and hardcoding), and many bugs have multiple viable fixes (median estimate ≈52%).",
            "Non-technical factors strongly influence fix choice: development phase/risk (near-release favors conservative fixes), interface/backwards-compatibility concerns, perceived user behavior/frequency, and social processes (communication, ownership, manager mandates).",
            "Refactoring is frequently identified as desirable but often avoided because of perceived risk of regressions, lack of tests, time cost, code-review/social friction, and managerial resistance.",
            "Processes and policies can be gamed (e.g., bug caps), and engineers often use ad-hoc methods to defer or reconsider optimal fixes, meaning many suboptimal quick fixes persist as technical debt."
          ],
          "implications": "Researchers should incorporate contextual and social signals (development phase, interface boundaries, usage frequency, cause-understanding) into bug prediction and localization models and recognize limits of purely automated approaches; practitioners need better tooling and practices for safe refactoring, fast access to usage/utility analytics, mechanisms to track and revisit provisional fixes, and policy designs (e.g., bug-management) that avoid perverse incentives."
        }
      },
      "tags": [
        "defect-prediction-and-quality",
        "interviews",
        "surveys",
        "engineering-management"
      ],
      "journal": "IEEE Trans. Software Eng.",
      "volume": "41",
      "number": "1",
      "pages": "65--81",
      "doi": "10.1109/TSE.2014.2357438",
      "url": "https://doi.org/10.1109/TSE.2014.2357438",
      "raw_bibtex": "@article{DBLP:journals/tse/Murphy-HillZBN15,\n  author       = {Emerson R. Murphy{-}Hill and\n                  Thomas Zimmermann and\n                  Christian Bird and\n                  Nachiappan Nagappan},\n  title        = {The Design Space of Bug Fixes and How Developers Navigate It},\n  journal      = {{IEEE} Trans. Software Eng.},\n  volume       = {41},\n  number       = {1},\n  pages        = {65--81},\n  year         = {2015},\n  url          = {https://doi.org/10.1109/TSE.2014.2357438},\n  doi          = {10.1109/TSE.2014.2357438},\n  timestamp    = {Wed, 14 Nov 2018 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/journals/tse/Murphy-HillZBN15.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/BarnettBBL15": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Helping Developers Help Themselves: Automatic Decomposition of Code Review Changesets",
      "authors": "Mike Barnett and Christian Bird and João Brunet and Shuvendu K. Lahiri",
      "year": "2015",
      "venue": "37th {IEEE/ACM",
      "mapped_pdf": "barnett2015helping.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "An automated static-analysis tool (CLUSTERCHANGES) groups diff-regions in code review changesets by def-use relationships to decompose large, tangled changes into independent partitions that help authors and reviewers understand and manage reviews.",
        "details": {
          "topic": "Automated code-review decomposition / program analysis",
          "problem": "Changesets often contain multiple independent edits (bug fixes, refactorings, tests, etc.) that make code reviews hard to understand and slow down reviewers, but developers rarely annotate or split such changes manually.",
          "approach": "The authors implemented CLUSTERCHANGES, a prototype that parses C# after-files from a changeset using Roslyn, extracts definitions and uses, projects def-use and use-use relations onto diff-regions, computes partitions via the transitive closure of related diff-regions, visualizes partitions in a tool, and evaluated it quantitatively on 1000 Microsoft changesets and qualitatively via manual inspection and a 20-developer user study.",
          "key_insights": [
            "Using def-use relationships alone yields precise groupings with no observed false positives in non-trivial partitions (i.e., grouped regions were not incorrectly combined).",
            "Around 42% of analyzed changesets contain more than one non-trivial partition, and on average 66% of changed methods belong to non-trivial partitions, indicating substantial potential for decomposition.",
            "Most developers in the user study (16/20) agreed the non-trivial partitions matched their intent and found the decomposition useful for reviewing, prioritizing, and assigning expertise-based reviewers.",
            "The approach has false negatives: many trivial partitions should be merged but are missed due to unmodeled relationships (custom attributes, overrides, cross-language or dynamic links, renames), suggesting extensions are needed."
          ],
          "implications": "A lightweight, compiler-driven def-use partitioning can meaningfully reduce reviewer cognitive load and enable targeted reviews, reviewer assignment, and better commit hygiene; integrating such tooling into review systems (and extending it to capture additional relations) could improve review effectiveness and workflow in practice."
        }
      },
      "tags": [
        "code-review",
        "program-analysis",
        "repository-mining",
        "tool-adoption-and-trust"
      ],
      "booktitle": "37th IEEE/ACM International Conference on Software Engineering, ICSE 2015, Florence, Italy, May 16-24, 2015, Volume 1",
      "publisher": "IEEE Computer Society",
      "pages": "134--144",
      "doi": "10.1109/ICSE.2015.35",
      "url": "https://doi.org/10.1109/ICSE.2015.35",
      "editor": "Antonia Bertolino and Gerardo Canfora and Sebastian G. Elbaum",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/BarnettBBL15,\n  author       = {Mike Barnett and\n                  Christian Bird and\n                  Jo{\\~{a}}o Brunet and\n                  Shuvendu K. Lahiri},\n  editor       = {Antonia Bertolino and\n                  Gerardo Canfora and\n                  Sebastian G. Elbaum},\n  title        = {Helping Developers Help Themselves: Automatic Decomposition of Code\n                  Review Changesets},\n  booktitle    = {37th {IEEE/ACM} International Conference on Software Engineering,\n                  {ICSE} 2015, Florence, Italy, May 16-24, 2015, Volume 1},\n  pages        = {134--144},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2015},\n  url          = {https://doi.org/10.1109/ICSE.2015.35},\n  doi          = {10.1109/ICSE.2015.35},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/BarnettBBL15.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/SmithBZ15": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Build It Yourself! Homegrown Tools in a Large Software Company",
      "authors": "Edward K. Smith and Christian Bird and Thomas Zimmermann",
      "year": "2015",
      "venue": "37th {IEEE/ACM",
      "mapped_pdf": "smith2015homegrown.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Mixed-method study of \"homegrown\" developer tools at Microsoft characterizing who builds them, why and when they are created, how they spread, and their organizational impact.",
        "details": {
          "topic": "Homegrown developer tools in large software organizations",
          "problem": "Developers frequently create informal, in-house tools outside official processes, but it is unclear who builds them, what motivates them, what types of tools appear, how they spread, and what value they bring to teams and companies.",
          "approach": "Exploratory mixed-methods study: Phase I open survey of ~138 Microsoft engineers about tools, Phase II semi-structured interviews (16 interviews covering 12 tools), and Phase III a personality survey (3,000 invited, 797 responses); qualitative coding and open card-sorts to derive categories, plus quantitative tests (Mann–Whitney) and a decision tree to relate tenure, role, and Big Five traits to toolbuilding behavior.",
          "key_insights": [
            "Homegrown toolbuilding is common: ~75% of survey respondents reported building tools; toolbuilders tend to have longer tenure (median 6 vs 2 years) and small but significant differences on Big Five traits (higher openness, conscientiousness, extraversion; lower neuroticism).",
            "Tools are diverse (testing, debugging, IDE extensions, deployment, monitoring, info retrieval, etc.); many deliver high impact for modest effort (examples: xAuto, MemSpect, CodeFlow), yet most remain local to a team even though many have multiple users or collaborators.",
            "Spread depends on organizational factors: supportive management, low barriers to entry, sanctioned channels (hackdays, science fairs, internal repos), and social/hierarchical networks promote adoption; discoverability, maintenance cost, environment incompatibility, and policy/legal uncertainty impede spread."
          ],
          "implications": "Organizations can magnify the value of homegrown tools by encouraging a tool-building culture (hackdays, recognition), improving discoverability and curation of internal tools, planning for tooling during technology/process transitions, and providing pathways for maintenance or formal adoption; researchers should measure tool impact and design tools and dissemination strategies that lower adoption barriers."
        }
      },
      "tags": [
        "tool-adoption-and-trust",
        "surveys",
        "interviews",
        "engineering-management"
      ],
      "booktitle": "37th IEEE/ACM International Conference on Software Engineering, ICSE 2015, Florence, Italy, May 16-24, 2015, Volume 1",
      "publisher": "IEEE Computer Society",
      "pages": "369--379",
      "doi": "10.1109/ICSE.2015.56",
      "url": "https://doi.org/10.1109/ICSE.2015.56",
      "editor": "Antonia Bertolino and Gerardo Canfora and Sebastian G. Elbaum",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/SmithBZ15,\n  author       = {Edward K. Smith and\n                  Christian Bird and\n                  Thomas Zimmermann},\n  editor       = {Antonia Bertolino and\n                  Gerardo Canfora and\n                  Sebastian G. Elbaum},\n  title        = {Build It Yourself! Homegrown Tools in a Large Software Company},\n  booktitle    = {37th {IEEE/ACM} International Conference on Software Engineering,\n                  {ICSE} 2015, Florence, Italy, May 16-24, 2015, Volume 1},\n  pages        = {369--379},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2015},\n  url          = {https://doi.org/10.1109/ICSE.2015.56},\n  doi          = {10.1109/ICSE.2015.56},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/SmithBZ15.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/msr/RayNBNZ15": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "The Uniqueness of Changes: Characteristics and Applications",
      "authors": "Baishakhi Ray and Meiyappan Nagappan and Christian Bird and Nachiappan Nagappan and Thomas Zimmermann",
      "year": "2015",
      "venue": "12th {IEEE/ACM",
      "mapped_pdf": "ray2015uniqueness.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Defines a method to identify unique vs. non-unique code changes across project history, finds most edits are unique but non-unique patterns repeat short-term and can be used to assess risk and drive change-recommendation tools.",
        "details": {
          "topic": "Uniqueness of code changes in software evolution",
          "problem": "Not all source-code changes are equally repetitive; understanding which edits are unique versus recurring could reveal where bugs are likely, who reuses change templates, and how to support developers with recommendations and risk analysis.",
          "approach": "The authors define 'unique' and 'non-unique' changes at the hunk/line level using lexical/syntactic clone detection (Repertoire + CCFinderX) with a 50-token threshold, analyze three large codebases (Linux 3.0 and two Microsoft projects covering ~17M changed lines and ~6K developers) to answer three RQs (extent, authorship, location), categorize non-unique additions/deletions/modifications, extract repeated non-unique patterns (maximal cliques), and implement/evaluate a risk analyzer and two recommendation systems (REC-I: suggest replacements; REC-II: suggest co-occurring changes) using precision/recall and statistical tests of bug potential.",
          "key_insights": [
            "Most edits are unique: at a 50-token threshold ~75–87% of changed lines are unique across studied projects, while non-unique changes represent a smaller but non-trivial portion.",
            "Non-unique changes form distinct, often short-lived templates that developers frequently reuse; many patterns are owned by single developers and tend to repeat a few times over ~2 months.",
            "Non-unique changes are localized to specific files/modules (co-change couples) and, on average, are less bug-prone than unique changes (statistically significant difference, stronger effect in the Microsoft projects than in Linux).",
            "Change-based recommendations trained on non-unique patterns achieve moderate accuracy: REC-I precision ~52–60% and recall ~59–67%; REC-II (co-change suggestions) precision ~38–43% and recall ~37–51%."
          ],
          "implications": "Measuring change uniqueness provides a lightweight signal for risk prediction, code-review prioritization, recommendation systems, and potential automated repair: practitioners can flag unique edits for careful review, leverage recurring change templates to auto-suggest edits or completions, and researchers can incorporate uniqueness as a feature in defect models and program-repair pipelines."
        }
      },
      "tags": [
        "repository-mining",
        "recommendation-systems",
        "defect-prediction-and-quality",
        "statistical-analysis"
      ],
      "booktitle": "12th IEEE/ACM Working Conference on Mining Software Repositories, MSR 2015, Florence, Italy, May 16-17, 2015",
      "publisher": "IEEE Computer Society",
      "pages": "34--44",
      "doi": "10.1109/MSR.2015.11",
      "url": "https://doi.org/10.1109/MSR.2015.11",
      "editor": "Massimiliano Di Penta and Martin Pinzger and Romain Robbes",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/RayNBNZ15,\n  author       = {Baishakhi Ray and\n                  Meiyappan Nagappan and\n                  Christian Bird and\n                  Nachiappan Nagappan and\n                  Thomas Zimmermann},\n  editor       = {Massimiliano Di Penta and\n                  Martin Pinzger and\n                  Romain Robbes},\n  title        = {The Uniqueness of Changes: Characteristics and Applications},\n  booktitle    = {12th {IEEE/ACM} Working Conference on Mining Software Repositories,\n                  {MSR} 2015, Florence, Italy, May 16-17, 2015},\n  pages        = {34--44},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2015},\n  url          = {https://doi.org/10.1109/MSR.2015.11},\n  doi          = {10.1109/MSR.2015.11},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/RayNBNZ15.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/msr/ZanjaniKB15": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Using Developer-Interaction Trails to Triage Change Requests",
      "authors": "Motahareh Bahrami Zanjani and Huzefa H. Kagdi and Christian Bird",
      "year": "2015",
      "venue": "12th {IEEE/ACM",
      "mapped_pdf": "zanjani2015developer.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "iHDev recommends developers for incoming change requests by mining IDE interaction histories (Mylyn) to locate relevant source files and rank likely fixers, achieving substantially higher recall and better ranking than commit- or authorship-based baselines.",
        "details": {
          "topic": "Developer recommendation / issue triage using IDE interaction data",
          "problem": "Automatically assign incoming change requests to the developers most likely to resolve them; prior approaches rely mainly on commit history or code authorship and may miss developer activity recorded only as IDE interactions.",
          "approach": "Use ML (ML‑KNN with tf–idf and cosine similarity) to map a change request's text to the top-K relevant source files from a snapshot, parse Mylyn interaction trace attachments to build an interaction log, compute an xFactor per (attacher, file) from interaction count, active workdays, and recency, sum xFactors across relevant files to score and rank candidate developers, and evaluate on Mylyn and Eclipse Project benchmarks against two commit/authorship-based baselines using recall@k and MRR with statistical tests.",
          "key_insights": [
            "Mining IDE interaction histories yields substantially better developer recommendation accuracy than commit- or authorship-based methods (recall gains up to ~127% and MRR gains up to ~112.5% in the studied datasets).",
            "Interaction data captures micro-level attempts, peer-reviewed or uncommitted work, and more temporal detail (recency/activity) than commits, which helps identify expertise earlier and more accurately.",
            "iHDev typically recommends the correct developer at higher ranks (improved MRR) and does so without degrading rank quality compared to baselines."
          ],
          "implications": "Incorporating IDE interaction traces into triage and recommendation systems can improve automatic assignment accuracy and reduce latency (interactions appear before commits), so tool builders and researchers should harvest and integrate interaction logs (e.g., Mylyn traces) alongside commit/authorship data to build more effective, timely developer-recommendation and maintenance-support tools; further validation on more projects and fusion with other signals is a natural next step."
        }
      },
      "tags": [
        "recommendation-systems",
        "telemetry-analysis",
        "ai-for-software-engineering"
      ],
      "booktitle": "12th IEEE/ACM Working Conference on Mining Software Repositories, MSR 2015, Florence, Italy, May 16-17, 2015",
      "publisher": "IEEE Computer Society",
      "pages": "88--98",
      "doi": "10.1109/MSR.2015.16",
      "url": "https://doi.org/10.1109/MSR.2015.16",
      "editor": "Massimiliano Di Penta and Martin Pinzger and Romain Robbes",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/ZanjaniKB15,\n  author       = {Motahareh Bahrami Zanjani and\n                  Huzefa H. Kagdi and\n                  Christian Bird},\n  editor       = {Massimiliano Di Penta and\n                  Martin Pinzger and\n                  Romain Robbes},\n  title        = {Using Developer-Interaction Trails to Triage Change Requests},\n  booktitle    = {12th {IEEE/ACM} Working Conference on Mining Software Repositories,\n                  {MSR} 2015, Florence, Italy, May 16-17, 2015},\n  pages        = {88--98},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2015},\n  url          = {https://doi.org/10.1109/MSR.2015.16},\n  doi          = {10.1109/MSR.2015.16},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/ZanjaniKB15.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/msr/BosuGB15": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Characteristics of Useful Code Reviews: An Empirical Study at Microsoft",
      "authors": "Amiangshu Bosu and Michaela Greiler and Christian Bird",
      "year": "2015",
      "venue": "12th {IEEE/ACM",
      "mapped_pdf": "bosu2015useful.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Identifies characteristics and predictors of useful code review comments at Microsoft and builds an automated classifier applied to ~1.5M comments to quantify how reviewer experience, change size, and other factors affect comment usefulness.",
        "details": {
          "topic": "Code review effectiveness / empirical software engineering",
          "problem": "Developers spend substantial time on code review, but teams lack evidence-based signals and tools to determine which review comments are actually useful to authors and what factors increase review effectiveness.",
          "approach": "A three-stage mixed-method study: semi-structured interviews with developers to define 'useful' and identify signals (145 comments), manual labeling of an additional 844 comments to build an oracle, development of a decision-tree classifier (with features such as change-trigger proximity, thread status, participants, iterations, sentiment and keyword features) validated via cross-validation and author checks, and large-scale application of the classifier to ≈1.5 million comments across five Microsoft projects to analyze relationships between usefulness and reviewer/change characteristics.",
          "key_insights": [
            "Change-trigger and thread status are the strongest predictors: comments that induce code changes within one line and comments marked Resolved/Closed are far more likely to be useful.",
            "Reviewer experience matters: prior changes or prior reviews on the same file and organizational tenure (ramping up in the first year) substantially increase the density of useful comments.",
            "Change characteristics matter: larger changesets (more files) reduce the proportion of useful comments; source code files elicit more useful feedback than build/config files.",
            "Same-team vs cross-team reviewers show negligible practical difference in usefulness density, and many useful comments are concise (single-comment threads) rather than extended discussions."
          ],
          "implications": "Provides an empirically validated classifier and actionable insights for tooling and process: teams can monitor 'usefulness density' to find weak areas, prefer including experienced reviewers (while retaining novices for knowledge transfer), encourage smaller/incremental changesets and better review focus on non-code files, and researchers can use the classifier and signals to build reviewer-recommendation, monitoring, and training tools to improve code-review ROI."
        }
      },
      "tags": [
        "code-review",
        "repository-mining",
        "interviews",
        "ai-for-software-engineering"
      ],
      "booktitle": "12th IEEE/ACM Working Conference on Mining Software Repositories, MSR 2015, Florence, Italy, May 16-17, 2015",
      "publisher": "IEEE Computer Society",
      "pages": "146--156",
      "doi": "10.1109/MSR.2015.21",
      "url": "https://doi.org/10.1109/MSR.2015.21",
      "editor": "Massimiliano Di Penta and Martin Pinzger and Romain Robbes",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/BosuGB15,\n  author       = {Amiangshu Bosu and\n                  Michaela Greiler and\n                  Christian Bird},\n  editor       = {Massimiliano Di Penta and\n                  Martin Pinzger and\n                  Romain Robbes},\n  title        = {Characteristics of Useful Code Reviews: An Empirical Study at Microsoft},\n  booktitle    = {12th {IEEE/ACM} Working Conference on Mining Software Repositories,\n                  {MSR} 2015, Florence, Italy, May 16-17, 2015},\n  pages        = {146--156},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2015},\n  url          = {https://doi.org/10.1109/MSR.2015.21},\n  doi          = {10.1109/MSR.2015.21},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/BosuGB15.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/msr/BirdCG15": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Lessons Learned from Building and Deploying a Code Review Analytics Platform",
      "authors": "Christian Bird and Trevor Carnahan and Michaela Greiler",
      "year": "2015",
      "venue": "12th {IEEE/ACM",
      "mapped_pdf": "bird2015cfa.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Built and deployed CodeFlow Analytics, an enterprise code-review data platform at Microsoft, and report its architecture, adoption, technical solutions, usage patterns, challenges, and lessons learned from interviews and research enabled by the platform.",
        "details": {
          "topic": "Code review analytics / software engineering data platforms",
          "problem": "Code review tools produce rich activity traces but provide no convenient way to aggregate, analyze, and act on that data at scale inside an enterprise, and building a reliable analytics platform raises technical, UX, and organizational adoption challenges.",
          "approach": "Implemented CodeFlow Analytics (CFA): a Kimball-style data warehouse on Azure/SQL Server that ingests CodeFlow activity via a polling service, stores raw relational data, runs ETL into an Analysis Services tabular model with 200+ facts and dimensions, and exposes data via Excel templates, natural-language queries (Power Q&A), a REST API and raw SQL. The team developed heuristics (branch-path splitting) and a logistic-regression model to link reviews to checkins, interviewed nine product teams (11 people) about CFA use and impact, and surveyed research projects enabled by CFA.",
          "key_insights": [
            "Common consumption patterns: managers and developers used CFA to empirically confirm beliefs, create dashboards/reports, educate teams, increase review participation, and monitor metrics such as time-to-first-response, time-to-completion, participation rates, and resolved comments.",
            "Practical engineering solutions worked well: a simple branch-path heuristic correctly split >97% of file paths and a logistic-regression model linked reviews to checkins with >95% precision/recall, enabling richer metrics.",
            "Adoption and impact are real but uneven: some teams (e.g., Bing) increased review coverage from ~60% to >80% using CFA-driven dashboards and management attention; many teams saw attitude changes or training outcomes but few had formal quantitative impact measurements.",
            "Major challenges are non-technical and technical: translating questions into correct metrics, discoverability of data, permissions/access hurdles, interpretation differences between teams, and need for analyst support and clear metric definitions."
          ],
          "implications": "Enterprise analytics platforms for development processes should provide both curated metrics and raw data, multiple easy entry points (Excel, natural language, APIs, SQL), clear definitions and examples, mechanisms to link heterogeneous artifacts, and support/consulting for teams; doing so can enable measurable process improvements, drive dashboards and training, and support research and tooling (e.g., comment usefulness classifiers and reviewer recommenders)."
        }
      },
      "tags": [
        "code-review",
        "dataset-and-tooling",
        "repository-mining",
        "telemetry-analysis",
        "interviews"
      ],
      "booktitle": "12th IEEE/ACM Working Conference on Mining Software Repositories, MSR 2015, Florence, Italy, May 16-17, 2015",
      "publisher": "IEEE Computer Society",
      "pages": "191--201",
      "doi": "10.1109/MSR.2015.25",
      "url": "https://doi.org/10.1109/MSR.2015.25",
      "editor": "Massimiliano Di Penta and Martin Pinzger and Romain Robbes",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/BirdCG15,\n  author       = {Christian Bird and\n                  Trevor Carnahan and\n                  Michaela Greiler},\n  editor       = {Massimiliano Di Penta and\n                  Martin Pinzger and\n                  Romain Robbes},\n  title        = {Lessons Learned from Building and Deploying a Code Review Analytics\n                  Platform},\n  booktitle    = {12th {IEEE/ACM} Working Conference on Mining Software Repositories,\n                  {MSR} 2015, Florence, Italy, May 16-17, 2015},\n  pages        = {191--201},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2015},\n  url          = {https://doi.org/10.1109/MSR.2015.25},\n  doi          = {10.1109/MSR.2015.25},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/BirdCG15.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/AllamanisBBS15": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Suggesting accurate method and class names",
      "authors": "Miltiadis Allamanis and Earl T. Barr and Christian Bird and Charles Sutton",
      "year": "2015",
      "venue": "Proceedings of the 2015 10th Joint Meeting on Foundations of Software\n                  Engineering, {ESEC/FSE",
      "mapped_pdf": "allamanis2015suggesting.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Neural log-bilinear context models with subtoken decomposition learn continuous identifier embeddings and accurately suggest variable, method, and class names (including previously unseen neologisms) from code context.",
        "details": {
          "topic": "Identifier naming with neural language models for source code",
          "problem": "Automatically infer descriptive, idiomatic method and class names from their bodies despite data sparsity, long-range dependencies, and the frequent need to invent previously unseen names.",
          "approach": "Designed a log-bilinear neural context model that combines local token embeddings and learned global binary features (e.g., return type, contained methods, cyclomatic complexity) to represent a code context; introduced a subtoken context model that decomposes identifiers by camelCase/underscore into subtokens and predicts sequences (allowing neologisms) using a bilinear scoring model and beam search. Models were trained with noise-contrastive estimation on a corpus of 20 popular Java GitHub projects (train/test split), evaluated on variable, method, and class naming tasks with F1 and exact-match metrics, and analyzed qualitatively via embedding visualizations (t-SNE/PCA).",
          "key_insights": [
            "Neural context models outperform n-gram baselines for naming tasks, especially when using non-local features; best models achieve ~60% F1 on method names and ~55% F1 on class names at a 20% suggestion frequency.",
            "Subtoken model can generate neologisms and sustains good performance at higher suggestion frequencies (e.g., ~50% F1 for classes at 50% suggestion frequency), whereas token-level models often return UNK for unseen names.",
            "Learned continuous embeddings capture semantic regularities (e.g., getters vs setters, related subtokens like width/height, grow/resize), and including features like return type, class subtokens, and method-internal subtokens substantially improves naming accuracy.",
            "There is a trade-off: token-level models are stronger at very high-confidence predictions, while subtoken sequence prediction is noisier but enables broader coverage and novel-name generation."
          ],
          "implications": "The approach enables practical tooling (IDE suggestions, code-review hints, commit checks) that can improve code readability and maintainability by recommending idiomatic names and detecting naming anti-patterns; the learned identifier embeddings also open avenues for other software engineering tasks (feature localization, API migration, summarization) and for further research on integrating semantic code features and generation of descriptive identifiers."
        }
      },
      "tags": [
        "recommendation-systems",
        "ai-for-software-engineering",
        "repository-mining"
      ],
      "booktitle": "Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2015, Bergamo, Italy, August 30 - September 4, 2015",
      "publisher": "ACM",
      "pages": "38--49",
      "doi": "10.1145/2786805.2786849",
      "url": "https://doi.org/10.1145/2786805.2786849",
      "editor": "Elisabetta Di Nitto and Mark Harman and Patrick Heymans",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/AllamanisBBS15,\n  author       = {Miltiadis Allamanis and\n                  Earl T. Barr and\n                  Christian Bird and\n                  Charles Sutton},\n  editor       = {Elisabetta Di Nitto and\n                  Mark Harman and\n                  Patrick Heymans},\n  title        = {Suggesting accurate method and class names},\n  booktitle    = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software\n                  Engineering, {ESEC/FSE} 2015, Bergamo, Italy, August 30 - September\n                  4, 2015},\n  pages        = {38--49},\n  publisher    = {{ACM}},\n  year         = {2015},\n  url          = {https://doi.org/10.1145/2786805.2786849},\n  doi          = {10.1145/2786805.2786849},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/AllamanisBBS15.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/SaraivaBZ15": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Products, developers, and milestones: how should I build my N-Gram language model",
      "authors": "Juliana Saraiva and Christian Bird and Thomas Zimmermann",
      "year": "2015",
      "venue": "Proceedings of the 2015 10th Joint Meeting on Foundations of Software\n                  Engineering, {ESEC/FSE",
      "mapped_pdf": "saraiva2015ngram.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Evaluated how the choice of training corpus (application-wide, developer-specific, or time-limited) affects n-gram language model quality for source code and found that application- and developer-specific models are superior while temporal scope usually has little impact.",
        "details": {
          "topic": "n-gram language models for source code / software engineering",
          "problem": "Practitioners need guidance on which slices of code (large general corpora vs. smaller application-, developer-, or time-specific corpora) produce the most effective language models for tasks like code completion and style detection.",
          "approach": "Built 28 trigram language models from Microsoft Office 2013 C# code (using Roslyn tokenization) including one general Office model, three application-specific models (Word, Excel, PowerPoint), developer-specific models for the five most active developers across apps, and time-specific models for the last milestone; used additive smoothing, held-out test sets (distinct files/changes), and cross-entropy to compare model quality; statistical tests (paired t-test) were applied where appropriate.",
          "key_insights": [
            "Application-specific models consistently achieve lower cross-entropy (better predictions) than a single general Office model for the same application.",
            "Developer-specific models vary by application: per-developer per-application models outperform a single per-developer model, indicating developers use different idioms in different parts of the codebase (statistically significant, p < 0.01).",
            "Temporal scope usually has little effect: models trained on the last milestone often perform as well as models trained on the entire development cycle, though there are exceptions (e.g., Word)."
          ],
          "implications": "For tooling (code completion, anomaly detection, naming suggestions) prefer smaller, context-aware models (application-level or developer+application-level) rather than one large cross-project model; updating models can often be done per milestone rather than continuously, which reduces cost, but teams should validate temporality per project and be mindful of limited external validity since results come from a single large product (Office)."
        }
      },
      "tags": [
        "ai-for-software-engineering",
        "repository-mining",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2015, Bergamo, Italy, August 30 - September 4, 2015",
      "publisher": "ACM",
      "pages": "998--1001",
      "doi": "10.1145/2786805.2804431",
      "url": "https://doi.org/10.1145/2786805.2804431",
      "editor": "Elisabetta Di Nitto and Mark Harman and Patrick Heymans",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/SaraivaBZ15,\n  author       = {Juliana Saraiva and\n                  Christian Bird and\n                  Thomas Zimmermann},\n  editor       = {Elisabetta Di Nitto and\n                  Mark Harman and\n                  Patrick Heymans},\n  title        = {Products, developers, and milestones: how should {I} build my N-Gram\n                  language model},\n  booktitle    = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software\n                  Engineering, {ESEC/FSE} 2015, Bergamo, Italy, August 30 - September\n                  4, 2015},\n  pages        = {998--1001},\n  publisher    = {{ACM}},\n  year         = {2015},\n  url          = {https://doi.org/10.1145/2786805.2804431},\n  doi          = {10.1145/2786805.2804431},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/SaraivaBZ15.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:books/el/15/BirdM015": {
      "status": "NO_PDF",
      "type": "incollection",
      "title": "Past, Present, and Future of Analyzing Software Data",
      "authors": "Christian Bird and Tim Menzies and Thomas Zimmermann",
      "year": "2015",
      "venue": "The Art and Science of Analyzing Software Data",
      "mapped_pdf": null,
      "notes": null,
      "booktitle": "The Art and Science of Analyzing Software Data",
      "publisher": "Morgan Kaufmann / Elsevier",
      "pages": "1--13",
      "doi": "10.1016/B978-0-12-411519-4.00001-X",
      "url": "https://doi.org/10.1016/b978-0-12-411519-4.00001-x",
      "editor": "Christian Bird and Tim Menzies and Thomas Zimmermann",
      "raw_bibtex": "@incollection{DBLP:books/el/15/BirdM015,\n  author       = {Christian Bird and\n                  Tim Menzies and\n                  Thomas Zimmermann},\n  editor       = {Christian Bird and\n                  Tim Menzies and\n                  Thomas Zimmermann},\n  title        = {Past, Present, and Future of Analyzing Software Data},\n  booktitle    = {The Art and Science of Analyzing Software Data},\n  pages        = {1--13},\n  publisher    = {Morgan Kaufmann / Elsevier},\n  year         = {2015},\n  url          = {https://doi.org/10.1016/b978-0-12-411519-4.00001-x},\n  doi          = {10.1016/B978-0-12-411519-4.00001-X},\n  timestamp    = {Mon, 01 Jul 2019 20:24:35 +0200},\n  biburl       = {https://dblp.org/rec/books/el/15/BirdM015.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/esem/GuptaZBNBE14": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Mining energy traces to aid in software development: an empirical case study",
      "authors": "Ashish Gupta and Thomas Zimmermann and Christian Bird and Nachiappan Nagappan and Thirumalesh Bhat and Syed Emran",
      "year": "2014",
      "venue": "2014 {ACM-IEEE",
      "mapped_pdf": "gupta2014energy.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Analyzes Windows Phone power traces and execution logs to attribute energy use to software modules, discover anomalous energy patterns, and predict power spikes using decision trees, clustering, and regression.",
        "details": {
          "topic": "Energy-aware software development for mobile devices",
          "problem": "Mobile apps and OS components can drain battery unpredictably; developers need methods to quantify which modules consume energy, detect energy-related bugs, and estimate power use to meet power budgets.",
          "approach": "Collect high-frequency power traces and coarse-grained execution logs from 12-hour idle tests on Windows Phone devices, extract power 'spikes' and associated active modules, store spike metadata in a database, then (1) use decision trees to associate module presence with average power, (2) cluster spike shapes using Kullback–Leibler divergence and Ward hierarchical clustering to find characteristic patterns and outliers, and (3) build linear regression models (evaluated via repeated train/test splits and Spearman correlation) to predict/high-rank power-consuming spikes from module presence; anomalies were validated with platform engineers and linked to real defects.",
          "key_insights": [
            "Decision trees on module-presence flags reveal specific modules (or combinations) that drastically increase spike energy, giving actionable pointers to developers.",
            "Clustering spike shapes reduces developer effort by summarizing common energy patterns and reliably surfaces anomalous outliers that corresponded to confirmed bugs (e.g., sockets left open causing long/high-power spikes).",
            "Linear regression models using only module presence produce strong ranking predictions of high-power spikes (median Spearman correlation ~0.75–0.86 across datasets), enabling useful power-budget estimates early in development.",
            "Coarse-grained profiling (module presence at context switches) is sufficiently informative for analysis while limiting profiling overhead, and the methodology generalizes across mobile platforms."
          ],
          "implications": "Provides a practical, data-driven toolset for developers and OS engineers to prioritize energy optimizations, detect energy defects during testing, and estimate application power use for budgeting; researchers can extend these techniques for finer-grained tracing, automated repair, and energy-aware test selection, while practitioners gain a replicable methodology applicable to other mobile platforms (with attention to profiling overhead and device-specific power characteristics)."
        }
      },
      "tags": [
        "telemetry-analysis",
        "statistical-analysis",
        "defect-prediction-and-quality"
      ],
      "booktitle": "2014 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM '14, Torino, Italy, September 18-19, 2014",
      "publisher": "ACM",
      "pages": "40:1--40:8",
      "doi": "10.1145/2652524.2652578",
      "url": "https://doi.org/10.1145/2652524.2652578",
      "editor": "Maurizio Morisio and Tore Dybå and Marco Torchiano",
      "raw_bibtex": "@inproceedings{DBLP:conf/esem/GuptaZBNBE14,\n  author       = {Ashish Gupta and\n                  Thomas Zimmermann and\n                  Christian Bird and\n                  Nachiappan Nagappan and\n                  Thirumalesh Bhat and\n                  Syed Emran},\n  editor       = {Maurizio Morisio and\n                  Tore Dyb{\\aa} and\n                  Marco Torchiano},\n  title        = {Mining energy traces to aid in software development: an empirical\n                  case study},\n  booktitle    = {2014 {ACM-IEEE} International Symposium on Empirical Software Engineering\n                  and Measurement, {ESEM} '14, Torino, Italy, September 18-19, 2014},\n  pages        = {40:1--40:8},\n  publisher    = {{ACM}},\n  year         = {2014},\n  url          = {https://doi.org/10.1145/2652524.2652578},\n  doi          = {10.1145/2652524.2652578},\n  timestamp    = {Tue, 06 Nov 2018 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/esem/GuptaZBNBE14.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/BirdRZNZ14": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Extrinsic influence factors in software reliability: a study of 200, 000 windows machines",
      "authors": "Christian Bird and Venkatesh-Prasad Ranganath and Thomas Zimmermann and Nachiappan Nagappan and Andreas Zeller",
      "year": "2014",
      "venue": "36th International Conference on Software Engineering, {ICSE",
      "mapped_pdf": "bird2014rac.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "A large-scale empirical analysis of >200,000 Windows machines shows that application reliability is strongly affected by extrinsic factors—other installed/used applications and hardware—with file-sharing and games tending to reduce reliability while many security apps and more powerful hardware tend to improve it.",
        "details": {
          "topic": "Software reliability influenced by environmental (extrinsic) factors",
          "problem": "Software reliability is typically assessed assuming an isolated environment, but real-world systems run many coexisting applications and diverse hardware; the authors seek to quantify how other installed/used applications and system hardware correlate with individual application crashes.",
          "approach": "They analyzed CEIP telemetry from >200,000 Windows machines (first-week post-install) focusing on the top 53 applications, dichotomized hardware and app-install/use features, built per-application logistic regression models with multiple-hypothesis correction to identify significant factors, constructed influence networks from strong coefficients, and mined association rules (Apriori) to find multi-feature effects.",
          "key_insights": [
            "Usage of file-sharing applications and games is consistently associated with decreased reliability of many other applications, while several security applications correlate with increased reliability (though some security products correlate with decreased reliability).",
            "More frequent execution of an application produces stronger influences (mostly negative) on the reliability of other applications; mere installation often has less or opposite effect compared to frequent use.",
            "Hardware matters: higher processor speed and larger memory correlate with higher application reliability; other hardware metrics showed smaller or no effects.",
            "Combinations of features can change reliability in ways not predictable from individual factors alone (association rules reveal multi-factor interactions)."
          ],
          "implications": "Reliability assessment, testing, and modeling must account for the software ecosystem and hardware variation—testers should evaluate applications in diverse, realistic configurations; developers should design for safer coexistence or explicit interaction contracts; OS designers should consider stronger isolation or regulated integration mechanisms; and researchers must include extrinsic variables when estimating real-world reliability."
        }
      },
      "tags": [
        "telemetry-analysis",
        "statistical-analysis",
        "defect-prediction-and-quality"
      ],
      "booktitle": "36th International Conference on Software Engineering, ICSE '14, Companion Proceedings, Hyderabad, India, May 31 - June 07, 2014",
      "publisher": "ACM",
      "pages": "205--214",
      "doi": "10.1145/2591062.2591173",
      "url": "https://doi.org/10.1145/2591062.2591173",
      "editor": "Pankaj Jalote and Lionel C. Briand and André van der Hoek",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/BirdRZNZ14,\n  author       = {Christian Bird and\n                  Venkatesh{-}Prasad Ranganath and\n                  Thomas Zimmermann and\n                  Nachiappan Nagappan and\n                  Andreas Zeller},\n  editor       = {Pankaj Jalote and\n                  Lionel C. Briand and\n                  Andr{\\'{e}} van der Hoek},\n  title        = {Extrinsic influence factors in software reliability: a study of 200,\n                  000 windows machines},\n  booktitle    = {36th International Conference on Software Engineering, {ICSE} '14,\n                  Companion Proceedings, Hyderabad, India, May 31 - June 07, 2014},\n  pages        = {205--214},\n  publisher    = {{ACM}},\n  year         = {2014},\n  url          = {https://doi.org/10.1145/2591062.2591173},\n  doi          = {10.1145/2591062.2591173},\n  timestamp    = {Sun, 25 Jul 2021 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/conf/icse/BirdRZNZ14.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/MusluBNC14": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Transition from centralized to decentralized version control systems: a case study on reasons, barriers, and outcomes",
      "authors": "Kivanç Muslu and Christian Bird and Nachiappan Nagappan and Jacek Czerwonka",
      "year": "2014",
      "venue": "36th International Conference on Software Engineering, {ICSE",
      "mapped_pdf": "muslu2014dvcs.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "A mixed qualitative–quantitative study of Microsoft developers shows that offline/local commits and lightweight branching drive migration from centralized to distributed VCSs, but the transition is often impeded by a steep learning curve, immature bridging/tool integration, and scaling issues for large codebases.",
        "details": {
          "topic": "Migration from centralized to distributed version control systems in enterprise software development",
          "problem": "Why and how developers in a large commercial company transition from centralized VCSs (CVCS) to distributed or bridged DVCSs, and what barriers and outcomes they experience during that transition.",
          "approach": "Ten semi-structured interviews with developers who transitioned within the same project were coded and card-sorted to identify themes, and findings were quantified with an anonymous survey of 70 Microsoft developers; the study analyzes motivations, technical/organizational barriers, scaling and tooling problems, and perceived productivity outcomes, then offers mitigation strategies and recommendations.",
          "key_insights": [
            "Primary motivations are the ability to work offline, make frequent local/incremental commits, and use lightweight branches for fast context switching and exploratory coding—features that DVCSs (or bridged DVCSs) enable.",
            "Common transition barriers are a higher DVCS learning curve (new concepts and conflicting terminology), immature or incomplete bridge/tooling and lack of integration with existing workflows (e.g., quality gates, check-in tools), and scaling issues for large products caused by checked-in binaries, composite repositories, and long histories.",
            "Outcomes: most developers report improved ability to work offline, more frequent commits, faster implementation and higher code velocity for many, but little consistent change in perceived code correctness; some teams reverted due to tooling/integration or scaling problems.",
            "Practical mitigations include using dependency managers (to remove binaries), repository decomposition (submodules), shallow clones or advanced DVCS workflows (with caveats), and adopting BVCS for feature incubation or team-wide transitions rather than piecemeal adoption."
          ],
          "implications": "For researchers, the study fills a gap in empirical evidence on CVCS→DVCS migration in large commercial settings and highlights areas for further study (tool integration, scaling, security models); for practitioners and managers, it shows the need to weigh benefits (offline work, branching) against costs (training, tooling, repository rearchitecture), plan tooling and CI integration, consider BVCS or targeted use (incubation), and address access-control and scaling before a broad migration."
        }
      },
      "tags": [
        "version-control-and-branching",
        "interviews",
        "surveys",
        "tool-adoption-and-trust"
      ],
      "booktitle": "36th International Conference on Software Engineering, ICSE '14, Hyderabad, India - May 31 - June 07, 2014",
      "publisher": "ACM",
      "pages": "334--344",
      "doi": "10.1145/2568225.2568284",
      "url": "https://doi.org/10.1145/2568225.2568284",
      "editor": "Pankaj Jalote and Lionel C. Briand and André van der Hoek",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/MusluBNC14,\n  author       = {Kivan{\\c{c}} Muslu and\n                  Christian Bird and\n                  Nachiappan Nagappan and\n                  Jacek Czerwonka},\n  editor       = {Pankaj Jalote and\n                  Lionel C. Briand and\n                  Andr{\\'{e}} van der Hoek},\n  title        = {Transition from centralized to decentralized version control systems:\n                  a case study on reasons, barriers, and outcomes},\n  booktitle    = {36th International Conference on Software Engineering, {ICSE} '14,\n                  Hyderabad, India - May 31 - June 07, 2014},\n  pages        = {334--344},\n  publisher    = {{ACM}},\n  year         = {2014},\n  url          = {https://doi.org/10.1145/2568225.2568284},\n  doi          = {10.1145/2568225.2568284},\n  timestamp    = {Tue, 06 Nov 2018 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/MusluBNC14.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/PhillipsZB14": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Understanding and improving software build teams",
      "authors": "Shaun Phillips and Thomas Zimmermann and Christian Bird",
      "year": "2014",
      "venue": "36th International Conference on Software Engineering, {ICSE",
      "mapped_pdf": "phillips2014build.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Analyzes how build teams form and operate at Microsoft, showing that social factors (role ambiguity, knowledge sharing, trust/conflict) — more than technical issues — limit build effectiveness and proposing practical organizational and tool-based interventions to improve reliability.",
        "details": {
          "topic": "Build teams and team effectiveness in software engineering",
          "problem": "Large-scale build processes are complex and often managed by emergent 'build teams'; the core problem is understanding how these teams form and why builds are unreliable or slow, particularly when social issues between builders and developers undermine effectiveness.",
          "approach": "Three sequential studies at Microsoft: semi-structured interviews with 7 experienced builders (grounded theory coding), an online survey of 132 build practitioners (quantitative and open-ended analysis), and an 8-person focus group to evaluate and refine proposed tools and practices; analysis was framed by Cohen and Bailey's team effectiveness model and literature from organization science.",
          "key_insights": [
            "Most impediments to build-team effectiveness are social rather than purely technical: role ambiguity, uneven knowledge transfer, poor intergroup communication, mistrust, and conflict.",
            "The builder role is heterogeneous and often ambiguous (operations vs. engineering); builders frequently act as developers, testers, and managers, causing evaluation and retention issues.",
            "'Tribal knowledge' and build logs are the most used resources for failure investigation; current documentation (wikis) is often ignored because developers must actively search for relevant guidance.",
            "Practical interventions — role redefinition (build operator vs. build engineer), socialized desktop warnings with contact info, selective process transparency, and early face-to-face or targeted meetings — were validated and refined by practitioners as feasible ways to reduce conflict and improve outcomes."
          ],
          "implications": "For researchers: validates applying organization and group-dynamics theories to software engineering and motivates socio-technical studies of build ecosystems; for practitioners and tool-builders: suggests low-risk, actionable changes (clear role definitions, push-based contextual guidance, transparency with careful wording, and selective early contact) that can improve build reliability, developer trust, and retention without major technical overhaul."
        }
      },
      "tags": [
        "engineering-management",
        "interviews",
        "surveys",
        "case-study"
      ],
      "booktitle": "36th International Conference on Software Engineering, ICSE '14, Hyderabad, India - May 31 - June 07, 2014",
      "publisher": "ACM",
      "pages": "735--744",
      "doi": "10.1145/2568225.2568274",
      "url": "https://doi.org/10.1145/2568225.2568274",
      "editor": "Pankaj Jalote and Lionel C. Briand and André van der Hoek",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/PhillipsZB14,\n  author       = {Shaun Phillips and\n                  Thomas Zimmermann and\n                  Christian Bird},\n  editor       = {Pankaj Jalote and\n                  Lionel C. Briand and\n                  Andr{\\'{e}} van der Hoek},\n  title        = {Understanding and improving software build teams},\n  booktitle    = {36th International Conference on Software Engineering, {ICSE} '14,\n                  Hyderabad, India - May 31 - June 07, 2014},\n  pages        = {735--744},\n  publisher    = {{ACM}},\n  year         = {2014},\n  url          = {https://doi.org/10.1145/2568225.2568274},\n  doi          = {10.1145/2568225.2568274},\n  timestamp    = {Tue, 06 Nov 2018 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/PhillipsZB14.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/AllamanisBBS14": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Learning natural coding conventions",
      "authors": "Miltiadis Allamanis and Earl T. Barr and Christian Bird and Charles Sutton",
      "year": "2014",
      "venue": "Proceedings of the 22nd {ACM",
      "mapped_pdf": "allamanis2014learning.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "NATURALIZE uses statistical language models trained on a codebase to learn its identifier naming and formatting conventions and suggest stylistically consistent renamings and formatting changes with high accuracy.",
        "details": {
          "topic": "Automated inference of coding conventions using language models",
          "problem": "Coding conventions (especially emergent, unspoken 'mores') are hard for developers to infer and enforce across a codebase, leading to frequent review feedback and inconsistency that harms readability and maintainability.",
          "approach": "Introduce NATURALIZE, a language-agnostic framework that trains n-gram language models (5-gram with Katz smoothing) on a project's source corpus, tokenizes identifiers and whitespace (including INDENT/SPACE metadata), proposes alternative identifier names and formatting variants from similar contexts, ranks candidates by a naturalness (log-probability) score, and exposes tools (Eclipse plugin 'devstyle', 'styleprofile', 'genrule' rule generator, and 'stylish?' pre-commit) — evaluated with leave-one-out cross validation on popular open-source Java projects, automatic perturbation tests, manual human evaluation, and by submitting real patches to projects.",
          "key_insights": [
            "Statistical language models capture project-specific naming and formatting conventions (code is 'natural') and can suggest changes that align with those conventions with high accuracy (≈94% top-1 name accuracy; ≈98% formatting accuracy in many settings).",
            "The sympathetic uniqueness principle (using an UNK token) preserves meaningful rare identifiers by allowing the model to prefer 'unknown' when unusual contexts demand uniqueness.",
            "NATURALIZE can convert learned soft conventions into concrete formatter rules and support multiple release-management tools (dev-time suggestions, review profiling, rule generation, pre-commit filtering).",
            "Practical validation: automatic and human evaluations show useful suggestions and real-world acceptance — 18 submitted patches to popular projects with 14 accepted."
          ],
          "implications": "Researchers can extend code-aware language models for richer semantic suggestions; practitioners and tool builders can deploy NATURALIZE-style, human-in-the-loop tools to reduce convention-related review churn, generate formatter rules, filter commits, and improve code consistency across languages and projects while avoiding harmful renamings of semantically important rare identifiers."
        }
      },
      "tags": [
        "recommendation-systems",
        "ai-for-software-engineering",
        "repository-mining",
        "dataset-and-tooling"
      ],
      "booktitle": "Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, (FSE-22), Hong Kong, China, November 16 - 22, 2014",
      "publisher": "ACM",
      "pages": "281--293",
      "doi": "10.1145/2635868.2635883",
      "url": "https://doi.org/10.1145/2635868.2635883",
      "editor": "Shing-Chi Cheung and Alessandro Orso and Margaret-Anne D. Storey",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/AllamanisBBS14,\n  author       = {Miltiadis Allamanis and\n                  Earl T. Barr and\n                  Christian Bird and\n                  Charles Sutton},\n  editor       = {Shing{-}Chi Cheung and\n                  Alessandro Orso and\n                  Margaret{-}Anne D. Storey},\n  title        = {Learning natural coding conventions},\n  booktitle    = {Proceedings of the 22nd {ACM} {SIGSOFT} International Symposium on\n                  Foundations of Software Engineering, (FSE-22), Hong Kong, China, November\n                  16 - 22, 2014},\n  pages        = {281--293},\n  publisher    = {{ACM}},\n  year         = {2014},\n  url          = {https://doi.org/10.1145/2635868.2635883},\n  doi          = {10.1145/2635868.2635883},\n  timestamp    = {Sun, 19 Jan 2025 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/AllamanisBBS14.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}",
      "awards": [
        "ACM SIGSOFT Distinguished Paper"
      ]
    },
    "DBLP:journals/ese/ParninBM13": {
      "status": "MAPPED",
      "type": "article",
      "title": "Adoption and use of Java generics",
      "authors": "Chris Parnin and Christian Bird and Emerson R. Murphy-Hill",
      "year": "2013",
      "venue": "Empir. Softw. Eng.",
      "mapped_pdf": "parnin2012auj.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "An empirical study that mined the version histories of 40 open-source Java projects (>650M LOC) to measure how Java generics (and annotations) were adopted and used, test claims about reducing casts and duplication, and analyze adoption dynamics.",
        "details": {
          "topic": "Empirical study of Java generics and annotations adoption",
          "problem": "Language designers claimed Java generics would improve type safety, reduce casts/runtime errors, and prevent code duplication, but no large-scale measurement existed to show how developers actually adopted and used generics (and annotations) in real projects.",
          "approach": "Automatically mined full history of 40 open-source Java projects (established and recent), parsed every revision with Eclipse JDT to extract raw/parameterized types, generic declarations, and annotations; identified 'generifications' between revisions; measured element densities using Halstead metrics; ran statistical analyses (Spearman correlation, Benjamini–Hochberg correction, Fisher tests) and estimated duplication/error prevention from unique parameterizations; compared adoption timing, developer-level adoption, IDE support, and advanced feature usage.",
          "key_insights": [
            "Generics usage is dominated by standard library collections (Lists, Maps) and common type arguments (especially String); user-defined generic types and advanced features (wildcards, bounds, nesting) are used infrequently.",
            "In most projects increased use of generics correlates with reduced cast density (supporting the claim that generics reduce casts), but several projects show the opposite or mixed trends, so the effect is real but not uniform.",
            "Adoption is uneven: large-scale migration of legacy raw types is rare, and new features are often introduced and driven by one or a few 'champion' contributors rather than adopted uniformly across committers.",
            "The duplication-prevention benefit of generics is substantial but concentrated: a small number of heavily-parameterized classes save most duplicated code and avoided faults, while many generic types are instantiated with only one parameter (limiting benefit)."
          ],
          "implications": "Empirical evidence suggests language designers and tool builders should temper expectations about broad, rapid adoption of complex features: adoption is gradual, concentrated, and influenced by legacy code, perceived risk, and social dynamics rather than only IDE support; designers might prefer incremental or targeted features and provide migration/refactoring tools to help champions convert codebases, while researchers should use repository mining to validate language-design claims and guide feature deployment strategies."
        }
      },
      "tags": [
        "repository-mining",
        "open-source-software",
        "statistical-analysis",
        "program-analysis"
      ],
      "journal": "Empir. Softw. Eng.",
      "volume": "18",
      "number": "6",
      "pages": "1047--1089",
      "doi": "10.1007/S10664-012-9236-6",
      "url": "https://doi.org/10.1007/s10664-012-9236-6",
      "raw_bibtex": "@article{DBLP:journals/ese/ParninBM13,\n  author       = {Chris Parnin and\n                  Christian Bird and\n                  Emerson R. Murphy{-}Hill},\n  title        = {Adoption and use of Java generics},\n  journal      = {Empir. Softw. Eng.},\n  volume       = {18},\n  number       = {6},\n  pages        = {1047--1089},\n  year         = {2013},\n  url          = {https://doi.org/10.1007/s10664-012-9236-6},\n  doi          = {10.1007/S10664-012-9236-6},\n  timestamp    = {Tue, 25 Aug 2020 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/ese/ParninBM13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/jot/KimMPBG13": {
      "status": "MAPPED",
      "type": "article",
      "title": "The Reaction of Open-Source Projects to New Language Features: An Empirical Study of C# Generics",
      "authors": "Donghoon Kim and Emerson R. Murphy-Hill and Chris Parnin and Christian Bird and Ronald Garcia",
      "year": "2013",
      "venue": "J. Object Technol.",
      "mapped_pdf": "kim2013jot.pdf",
      "notes": null,
      "found_pdf": true,
      "found_date": "2025-10-01 10:43:31",
      "extracted_paper_info": {
        "tldr": "An empirical analysis of 20 open-source C# projects shows that C# generics are more readily adopted and manifest benefits (fewer casts, reduced duplication, and performance gains) more clearly than Java generics, while developers rarely use implicit typing (var) with generics except for very verbose types.",
        "details": {
          "topic": "Empirical study of generics adoption in C# (comparison to Java)",
          "problem": "Language designers claim generics improve safety, reuse, and concision, but it is unclear whether and how developers actually adopt and benefit from generics in real projects and how implementation choices affect adoption.",
          "approach": "Analyzed full revision histories of 20 open-source C# projects (selected for size, age, and complete history) using a C# extractor based on NRefactory; measured parameterized types, raw (non-generic) collection usage, type casts, developer commit activity, conversions from raw to generic types, use of value types in generics, and var-based implicit typing; computed Spearman correlations, estimated duplicated LOC avoided, and compared results to a prior 20-project Java study.",
          "key_insights": [
            "Generics correlate with fewer casts in most projects: 12 of 19 projects show an inverse relationship between generics use and casts, indicating increased compile-time type safety.",
            "C# generics prevent more code duplication and are more often used via standard library generic collections (System.Collections.Generic) than Java; estimated duplicated LOC avoided in C# projects is larger than observed in comparable Java projects.",
            "C# generics enable real performance gains because value types are frequently used as type arguments (~36% of parameterized types), avoiding boxing/unboxing and giving measurable speedups in practice.",
            "Developers rarely prefer implicit generic declarations (var) except when type expressions are long; readability and explicit typing are generally favored over concision."
          ],
          "implications": "Implementation and library design choices strongly influence whether language features are adopted and yield benefits: offering generic-only standard libraries (as C# did) can promote adoption and duplication reduction; language designers should weigh backward-compatibility tradeoffs and UX; tool and library authors should provide migration support and clear affordances for readability versus concision; practitioners can expect generics to reduce casts and improve performance when value types are common but should not assume large-scale automated migration will occur without incentives."
        }
      },
      "tags": [
        "repository-mining",
        "open-source-software",
        "statistical-analysis"
      ],
      "journal": "J. Object Technol.",
      "volume": "12",
      "number": "4",
      "pages": "1: 1--31",
      "doi": "10.5381/JOT.2013.12.4.A1",
      "url": "https://doi.org/10.5381/jot.2013.12.4.a1",
      "raw_bibtex": "@article{DBLP:journals/jot/KimMPBG13,\n  author       = {Donghoon Kim and\n                  Emerson R. Murphy{-}Hill and\n                  Chris Parnin and\n                  Christian Bird and\n                  Ronald Garcia},\n  title        = {The Reaction of Open-Source Projects to New Language Features: An\n                  Empirical Study of C{\\#} Generics},\n  journal      = {J. Object Technol.},\n  volume       = {12},\n  number       = {4},\n  pages        = {1: 1--31},\n  year         = {2013},\n  url          = {https://doi.org/10.5381/jot.2013.12.4.a1},\n  doi          = {10.5381/JOT.2013.12.4.A1},\n  timestamp    = {Mon, 28 Aug 2023 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/jot/KimMPBG13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/software/MussonRFBBG13": {
      "status": "MAPPED",
      "type": "article",
      "title": "Leveraging the Crowd: How 48, 000 Users Helped Improve Lync Performance",
      "authors": "Robert Musson and Jacqueline Richards and Danyel Fisher and Christian Bird and Brian Bussone and Sandipan Ganguly",
      "year": "2013",
      "venue": "{IEEE",
      "mapped_pdf": "musson2013software.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Deploying lightweight runtime instrumentation to 48,000 internal users and analyzing 350 defined scenarios allowed Lync developers to detect, visualize, and prioritize real-world network performance problems early in the development cycle.",
        "details": {
          "topic": "Real-world performance monitoring for networked applications",
          "problem": "Lab tests and simulations fail to capture the huge variability of real user network environments and usage patterns, making it hard to find, prioritize, and track performance problems that affect user satisfaction.",
          "approach": "The authors used an early-deployment 'dogfood' program that instrumented Lync via event hooks to record timestamps and contextual metadata for ~350 scenarios across more than 48,000 internal users; data were transmitted under configurable rules, combined with lightweight satisfaction voting, and explored via an Engineering Intelligence Analytics (EI Analytics) dashboard offering distributions, Gaussian decomposition, comparative filters (build, architecture, region), time-trend plots, and world maps to identify and monitor performance issues.",
          "key_insights": [
            "Crowd-sourced telemetry from prerelease users produces diverse, representative data that reveals issues invisible to lab testing or synthetic workloads.",
            "Distribution decomposition and filtering expose distinct user-experience clusters (e.g., slow invocation paths) and systemic defects (for example, IPv6 timeouts) that would otherwise go undetected.",
            "Continuous, early monitoring shifts organizational practice: teams catch and prioritize performance regressions during development rather than only in late-stage testing.",
            "The system effectively flags problem areas and guides experts, but root-cause diagnosis still requires domain knowledge and manual investigation."
          ],
          "implications": "For researchers and engineers, the work shows that scalable, low-overhead telemetry plus interactive analytics can make performance a continuous part of development, enabling earlier fixes, better prioritization, and more data-driven release decisions; for product teams, adopting similar dogfooding and visualization practices can surface regional or configuration-specific issues and reduce late-stage surprises while preserving privacy and allowing post-release opt-in monitoring."
        }
      },
      "tags": [
        "telemetry-analysis",
        "field-deployment",
        "dataset-and-tooling"
      ],
      "journal": "IEEE Softw.",
      "volume": "30",
      "number": "4",
      "pages": "38--45",
      "doi": "10.1109/MS.2013.67",
      "url": "https://doi.org/10.1109/MS.2013.67",
      "raw_bibtex": "@article{DBLP:journals/software/MussonRFBBG13,\n  author       = {Robert Musson and\n                  Jacqueline Richards and\n                  Danyel Fisher and\n                  Christian Bird and\n                  Brian Bussone and\n                  Sandipan Ganguly},\n  title        = {Leveraging the Crowd: How 48, 000 Users Helped Improve Lync Performance},\n  journal      = {{IEEE} Softw.},\n  volume       = {30},\n  number       = {4},\n  pages        = {38--45},\n  year         = {2013},\n  url          = {https://doi.org/10.1109/MS.2013.67},\n  doi          = {10.1109/MS.2013.67},\n  timestamp    = {Mon, 08 Jun 2020 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/software/MussonRFBBG13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/ecscw/HarperBZM13": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Dwelling in Software: Aspects of the Felt-Life of Engineers in Large Software Projects",
      "authors": "Richard Harper and Christian Bird and Thomas Zimmermann and Brendan Murphy",
      "year": "2013",
      "venue": "{ECSCW",
      "mapped_pdf": "harper2013ecscw.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Argues that attending to the 'felt-life' or dwelling of engineers reveals emotional, ethical and social dynamics in large-scale software projects that are overlooked by dominant scientific and CSCW research perspectives.",
        "details": {
          "topic": "Sociotechnical and ethnographic study of software engineers' lived experience in large projects",
          "problem": "Existing SE research often frames engineers as either process-limited actors or creative reasoners and therefore misses the emotional, ethical and everyday social practices ('felt-life') that shape decisions, coordination and code ownership in large code bases.",
          "approach": "Contrast two common views in the literature (a quantitative 'scientific' vision and a CSCW-informed 'creative reasoner' view), then present qualitative, ethnographic evidence from 17 semi-structured interviews with Microsoft Windows engineers analyzed through an Ingold-inspired 'dwelling' lens to surface embodied, affective and moral dimensions of engineering practice.",
          "key_insights": [
            "Research methods and assumptions effectively construct different 'types' of software engineer; what is emphasized (process metrics, reasoning rules, or dwelling) shapes what phenomena are visible.",
            "Interviews reveal a dense felt-life: engineers treat information as risky, negotiate code ownership through moral claims of 'good faith', experience anger and resentment, and manage tacit boundaries and territoriality around code.",
            "Emotional and ethical concerns materially affect coordination, branching decisions and integration outcomes—phenomena that quantitative/processual or purely cognitive accounts can miss or underplay.",
            "Bringing together dwelling-oriented findings and quantitative/processual data is difficult and requires care; tooling or SNS that surface more social visibility can both help coordination and amplify conflict."
          ],
          "implications": "Researchers should incorporate lived-experience methods to complement quantitative SE studies and be explicit about how methods shape the constructed subject; tool designers and managers should account for emotional, ethical and social negotiation (e.g., visibility of timelines, support for mediated negotiation, attention to code 'ownership' norms); and training should include interpersonal and ethical skills because coordination failures are as much moral and social as technical."
        }
      },
      "tags": [
        "interviews",
        "engineering-management",
        "developer-social-networks",
        "tool-adoption-and-trust"
      ],
      "booktitle": "ECSCW 2013: Proceedings of the 13th European Conference on Computer Supported Cooperative Work, 21-25 September 2013, Paphos, Cyprus",
      "publisher": "Springer",
      "pages": "163--180",
      "doi": "10.1007/978-1-4471-5346-7_9",
      "url": "https://doi.org/10.1007/978-1-4471-5346-7_9",
      "editor": "Olav W. Bertelsen and Luigina Ciolfi and Maria Antonietta Grasso and George Angelos Papadopoulos",
      "raw_bibtex": "@inproceedings{DBLP:conf/ecscw/HarperBZM13,\n  author       = {Richard Harper and\n                  Christian Bird and\n                  Thomas Zimmermann and\n                  Brendan Murphy},\n  editor       = {Olav W. Bertelsen and\n                  Luigina Ciolfi and\n                  Maria Antonietta Grasso and\n                  George Angelos Papadopoulos},\n  title        = {Dwelling in Software: Aspects of the Felt-Life of Engineers in Large\n                  Software Projects},\n  booktitle    = {{ECSCW} 2013: Proceedings of the 13th European Conference on Computer\n                  Supported Cooperative Work, 21-25 September 2013, Paphos, Cyprus},\n  pages        = {163--180},\n  publisher    = {Springer},\n  year         = {2013},\n  url          = {https://doi.org/10.1007/978-1-4471-5346-7\\_9},\n  doi          = {10.1007/978-1-4471-5346-7\\_9},\n  timestamp    = {Thu, 26 Sep 2019 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/conf/ecscw/HarperBZM13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/esem/MurphyBZWNB13": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Have Agile Techniques been the Silver Bullet for Software Development at Microsoft?",
      "authors": "Brendan Murphy and Christian Bird and Thomas Zimmermann and Laurie A. Williams and Nachiappan Nagappan and Andrew Begel",
      "year": "2013",
      "venue": "2013 {ACM",
      "mapped_pdf": "murphy2013agile.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Longitudinal surveys of ~1,969 Microsoft developers, testers, and PMs (2006–2012) find slow and uneven agile adoption, with many agile practices used regardless of whether teams self-identify as agile, and scalability, tooling, and incentives limiting broader adoption.",
        "details": {
          "topic": "Agile adoption and practices in large-scale software development",
          "problem": "Determine whether market pressure for faster, frequent releases has driven Microsoft toward agile methodologies, which agile practices are actually used, and how perceptions of benefits and problems affect adoption across roles and time.",
          "approach": "Five annual internal surveys (2006–2012) of 1,969 respondents in developer/tester/PM roles, benchmarked against VersionOne industry surveys, plus five follow-up interviews; analysis grouped respondents by self-identified agile vs non-agile, examined practice usage, perceived benefits/problems, role differences, and temporal trends.",
          "key_insights": [
            "Agile adoption at Microsoft rose only slowly and unevenly over six years; no single agile practice showed consistent growth across roles and time.",
            "Many core engineering practices (code reviews, unit tests, automated builds) are widely used by both agile and non-agile teams, suggesting tool availability often drives practice adoption more than explicit methodology.",
            "Agile practitioners report stronger perceived benefits but also acknowledge agile's problems; non-agile practitioners are more likely to view scalability, distributed development, and management buy-in as significant barriers.",
            "Scale, geographic distribution, tooling, incentive structures, and practice interdependencies (order and team buy-in) are principal constraints on successful agile adoption in large organizations."
          ],
          "implications": "For researchers: study scaling solutions, tooling effects, and socio-technical incentives for agile at enterprise scale; for practitioners and managers: don't assume agile is a universal silver bullet—prioritize tool support for desirable practices, align incentives to reward collaboration, educate teams on practice interdependencies and adopt technical core practices first; for tool and process designers: focus on features that enable coordination across large, distributed teams to increase practical adoption."
        }
      },
      "tags": [
        "surveys",
        "interviews",
        "engineering-management",
        "tool-adoption-and-trust"
      ],
      "booktitle": "2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement, Baltimore, Maryland, USA, October 10-11, 2013",
      "publisher": "IEEE Computer Society",
      "pages": "75--84",
      "doi": "10.1109/ESEM.2013.21",
      "url": "https://doi.org/10.1109/ESEM.2013.21",
      "raw_bibtex": "@inproceedings{DBLP:conf/esem/MurphyBZWNB13,\n  author       = {Brendan Murphy and\n                  Christian Bird and\n                  Thomas Zimmermann and\n                  Laurie A. Williams and\n                  Nachiappan Nagappan and\n                  Andrew Begel},\n  title        = {Have Agile Techniques been the Silver Bullet for Software Development\n                  at Microsoft?},\n  booktitle    = {2013 {ACM} / {IEEE} International Symposium on Empirical Software\n                  Engineering and Measurement, Baltimore, Maryland, USA, October 10-11,\n                  2013},\n  pages        = {75--84},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2013},\n  url          = {https://doi.org/10.1109/ESEM.2013.21},\n  doi          = {10.1109/ESEM.2013.21},\n  timestamp    = {Fri, 24 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/esem/MurphyBZWNB13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/RigbyBBDG13": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "What effect does distributed version control have on OSS project organization?",
      "authors": "Peter C. Rigby and Earl T. Barr and Christian Bird and Premkumar T. Devanbu and Daniel M. Germán",
      "year": "2013",
      "venue": "Proceedings of the 1st International Workshop on Release Engineering,\n                  {RELENG",
      "mapped_pdf": "rigby2013releng.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Analyzes how distributed version control (DVC) versus centralized version control (CVC) affects governance and collaboration in open source projects, showing DVC better supports hierarchical, dictator-style workflows and enables small-group sandboxes while CVC better supports peer-consensus workflows.",
        "details": {
          "topic": "Version control impacts on OSS governance and collaboration",
          "problem": "As many open source projects move from centralized to distributed version control, it is unclear how that shift changes project organization, the number of exchanges developers must perform to stay up-to-date, and how small groups collaborate.",
          "approach": "The authors present a theoretical analysis of exchange costs (pushes/pulls) under different governance models (dictatorship vs peer group) and perform a case study comparing Linux (DVC/git) and FreeBSD (CVC/CVS+SVN) using 3.5 years of commit-log data; they adapt Krackhardt's hierarchy metric using sign-off/review tags and examine topic-specific 'sandbox' repositories in Linux.",
          "key_insights": [
            "DVC scales well for hierarchical, dictator-style organizations because a chain-of-trust limits the number of exchanges required for integrators, keeping integrator exchange costs roughly constant as the project grows.",
            "CVC better supports peer-group governance and consensus: a single central repository reduces the number of exchanges a typical developer must perform and avoids the 'exploding pull' problem in large, fully distributed peer groups.",
            "Empirically, hierarchical relationships dominate large OSS projects, and Linux (DVC) is more hierarchical by the adapted metric than FreeBSD (CVC).",
            "DVC enables 'sideways' collaboration via sandboxes and topic forks—separate repositories where small, like-minded groups work in relative isolation before promoting changes—producing more diverse collaboration styles (e.g., many forks on GitHub)."
          ],
          "implications": "For project managers and developers: choose or configure a version-control model to match governance needs (DVC for scalable hierarchical integration and flexible topic sandboxes; CVC for centralized consensus among peers); for researchers: study hybrid setups and social-media-driven forking platforms (e.g., GitHub) to understand new collaboration patterns and how tooling shapes governance."
        }
      },
      "tags": [
        "version-control-and-branching",
        "open-source-software",
        "repository-mining",
        "network-analysis"
      ],
      "booktitle": "Proceedings of the 1st International Workshop on Release Engineering, RELENG 2013, San Francisco, California, USA, May 20, 2013",
      "publisher": "IEEE Computer Society",
      "pages": "29--32",
      "doi": "10.1109/RELENG.2013.6607694",
      "url": "https://doi.org/10.1109/RELENG.2013.6607694",
      "editor": "Bram Adams and Christian Bird and Foutse Khomh and Kim Moir",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/RigbyBBDG13,\n  author       = {Peter C. Rigby and\n                  Earl T. Barr and\n                  Christian Bird and\n                  Premkumar T. Devanbu and\n                  Daniel M. Germ{\\'{a}}n},\n  editor       = {Bram Adams and\n                  Christian Bird and\n                  Foutse Khomh and\n                  Kim Moir},\n  title        = {What effect does distributed version control have on {OSS} project\n                  organization?},\n  booktitle    = {Proceedings of the 1st International Workshop on Release Engineering,\n                  {RELENG} 2013, San Francisco, California, USA, May 20, 2013},\n  pages        = {29--32},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2013},\n  url          = {https://doi.org/10.1109/RELENG.2013.6607694},\n  doi          = {10.1109/RELENG.2013.6607694},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/RigbyBBDG13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/SmithLMBZ13": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Improving developer participation rates in surveys",
      "authors": "Edward K. Smith and Robert T. Loftin and Emerson R. Murphy-Hill and Christian Bird and Thomas Zimmermann",
      "year": "2013",
      "venue": "6th International Workshop on Cooperative and Human Aspects of Software\n                  Engineering, {CHASE",
      "mapped_pdf": "smith2013chase.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Identifies persuasion- and survey-design factors that appear to increase software developers' survey response rates and analyzes 11 past invitation emails to assess qualitative associations.",
        "details": {
          "topic": "Survey response rates for software developers",
          "problem": "Developer surveys often suffer low response rates that can introduce bias and limit the usefulness of research; researchers need actionable guidance to increase participation.",
          "approach": "Derived candidate factors from persuasion research (reciprocity, consistency, authority, liking, scarcity) and survey literature (brevity, social benefit, compensation, timing); coded 11 previously conducted developer survey invitation emails (10 at Microsoft, 1 at another company) for presence/absence of these cues, collected metadata (send time, personalization, selection criteria, incentives) and compared features qualitatively against observed response rates.",
          "key_insights": [
            "Personalized/directly addressed invitations tended to have higher response rates than BCC/blind mailings, suggesting personalization matters.",
            "Similarity cues (e.g., shared affiliation), offers of compensation (typically raffle entries), and explicit brevity estimates correlated with higher responses in the sample.",
            "Most invitations used only a few persuasive cues (about three on average); messages with more cues sometimes achieved higher rates but evidence is preliminary.",
            "Findings are qualitative and exploratory (N=11); factors may interact, produce bias (e.g., authority effects), and require larger or controlled studies to establish causal effects."
          ],
          "implications": "Provides a practical checklist and initial evidence for researchers to prioritize personalization, relevance (similarity), clear brevity, and appropriate incentives when recruiting developer participants; however, practitioners should weigh potential sampling bias and ethical considerations and validate tactics with larger or controlled experiments."
        }
      },
      "tags": [
        "surveys",
        "case-study"
      ],
      "booktitle": "6th International Workshop on Cooperative and Human Aspects of Software Engineering, CHASE 2013, San Francisco, CA, USA, May 25, 2013",
      "publisher": "IEEE Computer Society",
      "pages": "89--92",
      "doi": "10.1109/CHASE.2013.6614738",
      "url": "https://doi.org/10.1109/CHASE.2013.6614738",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/SmithLMBZ13,\n  author       = {Edward K. Smith and\n                  Robert T. Loftin and\n                  Emerson R. Murphy{-}Hill and\n                  Christian Bird and\n                  Thomas Zimmermann},\n  title        = {Improving developer participation rates in surveys},\n  booktitle    = {6th International Workshop on Cooperative and Human Aspects of Software\n                  Engineering, {CHASE} 2013, San Francisco, CA, USA, May 25, 2013},\n  pages        = {89--92},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2013},\n  url          = {https://doi.org/10.1109/CHASE.2013.6614738},\n  doi          = {10.1109/CHASE.2013.6614738},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/SmithLMBZ13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/Murphy-HillZBN13": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "The design of bug fixes",
      "authors": "Emerson R. Murphy-Hill and Thomas Zimmermann and Christian Bird and Nachiappan Nagappan",
      "year": "2013",
      "venue": "35th International Conference on Software Engineering, {ICSE",
      "mapped_pdf": "murphyhill2013dbf.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "An empirical study of how engineers choose among multiple possible bug fixes, characterizing a multidimensional design space of fixes and the technical and social factors that drive those choices.",
        "details": {
          "topic": "Design of bug fixes in software engineering",
          "problem": "There is little empirical understanding of the different ways a single bug can be fixed and of the factors (technical and non-technical) that influence which fix engineers choose, which affects prediction, localization, and long-term quality.",
          "approach": "Mixed-method study combining 32 opportunistic interviews, 8 firehouse interviews (total 40 interviewees), observation of 6 triage meetings, and a survey of ~324 Microsoft engineers; qualitative coding of transcripts (ATLAS.ti) and descriptive statistical analysis of survey responses to map the design space and identify influencing factors.",
          "key_insights": [
            "Bug fixes occupy a multidimensional design space (e.g., where to correct data, error surfacing, behavioral impact, functionality removal, refactoring, internal vs external changes, accuracy vs heuristic fixes, hardcoding) and many bugs admit multiple plausible fixes.",
            "Non-technical factors heavily shape fix selection: development phase and risk tolerance (conservative near release), interface/backwards-compatibility concerns, perceived user behavior/frequency, social inputs (peers, owners, managers), and time pressure.",
            "Engineers frequently choose quick or conservative workarounds (including feature removal) rather than optimal fixes; refactoring is often noticed but not performed, producing technical debt and rarely revisited.",
            "These human/contextual choices limit the assumptions of automated bug prediction/localization techniques that treat fixes as ground truth and point to opportunities for better tooling (usage analytics, safer refactoring, track-and-revisit mechanisms)."
          ],
          "implications": "For researchers: models for bug prediction and localization should incorporate contextual factors (release phase, interface constraints, social/usage signals) and treat recorded fixes cautiously as sometimes being workarounds; for practitioners and tool builders: provide lightweight usage-analytics queries, safer/refactoring support, and mechanisms to mark and revisit tactical fixes to reduce accumulated technical debt; for educators: teach the contextual trade-offs involved in choosing fixes, not just the technical correction."
        }
      },
      "tags": [
        "interviews",
        "surveys",
        "defect-prediction-and-quality",
        "engineering-management"
      ],
      "booktitle": "35th International Conference on Software Engineering, ICSE '13, San Francisco, CA, USA, May 18-26, 2013",
      "publisher": "IEEE Computer Society",
      "pages": "332--341",
      "doi": "10.1109/ICSE.2013.6606579",
      "url": "https://doi.org/10.1109/ICSE.2013.6606579",
      "editor": "David Notkin and Betty H. C. Cheng and Klaus Pohl",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/Murphy-HillZBN13,\n  author       = {Emerson R. Murphy{-}Hill and\n                  Thomas Zimmermann and\n                  Christian Bird and\n                  Nachiappan Nagappan},\n  editor       = {David Notkin and\n                  Betty H. C. Cheng and\n                  Klaus Pohl},\n  title        = {The design of bug fixes},\n  booktitle    = {35th International Conference on Software Engineering, {ICSE} '13,\n                  San Francisco, CA, USA, May 18-26, 2013},\n  pages        = {332--341},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2013},\n  url          = {https://doi.org/10.1109/ICSE.2013.6606579},\n  doi          = {10.1109/ICSE.2013.6606579},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/Murphy-HillZBN13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/BacchelliB13": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Expectations, outcomes, and challenges of modern code review",
      "authors": "Alberto Bacchelli and Christian Bird",
      "year": "2013",
      "venue": "35th International Conference on Software Engineering, {ICSE",
      "mapped_pdf": "bacchelli2013eoc.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "A mixed-method study of modern, tool-based code review finds that although developers expect reviews to find defects, reviews more often produce code-improvement and social outcomes, and the primary obstacle is reviewers' lack of context/understanding which current tools do not adequately address.",
        "details": {
          "topic": "Modern (tool-based) code review practices",
          "problem": "Organizations use lightweight, tool-supported code reviews expecting defect detection and quality assurance, but it's unclear whether those expectations match actual outcomes and what challenges prevent reviews from meeting those goals.",
          "approach": "Mixed-method empirical study at Microsoft: 17 in‑field observations, semi-structured interviews, open card-sorting and affinity analysis of 570 comments from 200 CodeFlow threads, and surveys of 165 managers and 873 developers, with manual classification and triangulation across data sources.",
          "key_insights": [
            "Finding defects is the top stated motivation, but defect-related comments are relatively rare and mainly address low-level, micro issues; the most common reviewer feedback is code-improvement (readability, dead code, style).",
            "Understanding the change and its context is reviewers' main challenge; reviewers who already know the code provide deeper, more insightful feedback and are more likely to find subtle defects.",
            "Code review delivers important social benefits — knowledge transfer, team awareness/transparency, and shared code ownership — that are often as valued as defect finding but are harder to observe in review traces.",
            "Current review tools focus on diffs and inline comments and fail to support reviewers' comprehension needs or to automate low-level checks, leaving opportunities for tooling and program-comprehension research."
          ],
          "implications": "Practitioners should not rely on modern reviews as the sole QA mechanism, should involve code owners and provide richer contextual information (and synchronous channels) when defect discovery is a goal, and should treat review policies to capture social benefits; researchers and tool builders should prioritize automating routine/style checks to free reviewer time, and build review-centric program-comprehension and socio-technical support to improve deep-review outcomes."
        }
      },
      "tags": [
        "code-review",
        "interviews",
        "surveys",
        "tool-adoption-and-trust"
      ],
      "booktitle": "35th International Conference on Software Engineering, ICSE '13, San Francisco, CA, USA, May 18-26, 2013",
      "publisher": "IEEE Computer Society",
      "pages": "712--721",
      "doi": "10.1109/ICSE.2013.6606617",
      "url": "https://doi.org/10.1109/ICSE.2013.6606617",
      "editor": "David Notkin and Betty H. C. Cheng and Klaus Pohl",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/BacchelliB13,\n  author       = {Alberto Bacchelli and\n                  Christian Bird},\n  editor       = {David Notkin and\n                  Betty H. C. Cheng and\n                  Klaus Pohl},\n  title        = {Expectations, outcomes, and challenges of modern code review},\n  booktitle    = {35th International Conference on Software Engineering, {ICSE} '13,\n                  San Francisco, CA, USA, May 18-26, 2013},\n  pages        = {712--721},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2013},\n  url          = {https://doi.org/10.1109/ICSE.2013.6606617},\n  doi          = {10.1109/ICSE.2013.6606617},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/BacchelliB13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}",
      "awards": [
        "ACM SIGSOFT Impact Paper Award"
      ]
    },
    "DBLP:conf/icse/KocaguneliZBNM13": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Distributed development considered harmful?",
      "authors": "Ekrem Kocaguneli and Thomas Zimmermann and Christian Bird and Nachiappan Nagappan and Tim Menzies",
      "year": "2013",
      "venue": "35th International Conference on Software Engineering, {ICSE",
      "mapped_pdf": "kocaguneli2013distributed.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Rechecked file-level effects of distributed versus collocated development on Microsoft Office 2010 and found statistically significant differences that are almost all negligibly small, so distributed development is not considered harmful in this context.",
        "details": {
          "topic": "Distributed software development and code ownership effects on software quality",
          "problem": "Prior studies disagree about whether geographically distributed development degrades software quality; a recent critique suggested binary-level analyses can hide file-level effects, so practitioners need a recheck and clearer communication of practical impact.",
          "approach": "File-level empirical study of Microsoft Office 2010: mined commit histories, developer geographic locations, and post-release bug-fix change-lists (RTM to SP1) for tens of thousands of files and 1,500+ developers; computed distribution (building/city/state/country/world), ownership (edit frequency, major developer count, top ownership, total developers), change (added/deleted/edited LOC) and size (functions/classes) metrics; compared collocated vs distributed files under four scenarios using Wilcoxon rank-sum tests for significance and Hedges' g for effect-size analysis.",
          "key_insights": [
            "Hypothesis tests found statistically significant differences for bug counts, change/size, and ownership metrics in several scenarios (H3–H5 rejected), while files with/without major developers showed no significant difference (H1 and H2 not rejected).",
            "Effect-size analysis (Hedges' g) showed almost all differences are small or negligible, so the practical impact on post-release defects and code characteristics is minimal (one notable large effect on TOP in one scenario is an exception).",
            "A file-level recheck initially appears to challenge earlier binary-level optimism, but reflecting on effect sizes shows that distributed development did not meaningfully harm Office 2010 quality.",
            "Researchers should report effect sizes and recheck prior results at different granularities; practitioners should interpret p-values alongside effect sizes before changing engineering practices."
          ],
          "implications": "For researchers: complement significance testing with effect-size measures and re-evaluate past findings at multiple granularities before issuing practitioner guidance; for practitioners and managers: in this Microsoft Office 2010 case, distributed teams did not produce meaningfully worse files, so organizational decisions about distribution should weigh practical effect sizes (and contextual differences) rather than p-values alone; for tool/build engineers: use ownership and distribution metrics as diagnostics but avoid overreacting to small statistical differences given potential external validity limits."
        }
      },
      "tags": [
        "repository-mining",
        "defect-prediction-and-quality",
        "statistical-analysis",
        "developer-social-networks"
      ],
      "booktitle": "35th International Conference on Software Engineering, ICSE '13, San Francisco, CA, USA, May 18-26, 2013",
      "publisher": "IEEE Computer Society",
      "pages": "882--890",
      "doi": "10.1109/ICSE.2013.6606637",
      "url": "https://doi.org/10.1109/ICSE.2013.6606637",
      "editor": "David Notkin and Betty H. C. Cheng and Klaus Pohl",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/KocaguneliZBNM13,\n  author       = {Ekrem Kocaguneli and\n                  Thomas Zimmermann and\n                  Christian Bird and\n                  Nachiappan Nagappan and\n                  Tim Menzies},\n  editor       = {David Notkin and\n                  Betty H. C. Cheng and\n                  Klaus Pohl},\n  title        = {Distributed development considered harmful?},\n  booktitle    = {35th International Conference on Software Engineering, {ICSE} '13,\n                  San Francisco, CA, USA, May 18-26, 2013},\n  pages        = {882--890},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2013},\n  url          = {https://doi.org/10.1109/ICSE.2013.6606637},\n  doi          = {10.1109/ICSE.2013.6606637},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/KocaguneliZBNM13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/issta/BarrBM13": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Collecting a heap of shapes",
      "authors": "Earl T. Barr and Christian Bird and Mark Marron",
      "year": "2013",
      "venue": "International Symposium on Software Testing and Analysis, {ISSTA",
      "mapped_pdf": "barr2013shapes.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Empirical analysis of real-world object-oriented heaps shows they are much simpler than the type system allows: most components are atomic, most pointer sets are injective, and remaining sharing follows a few common idioms (immutable, unique, global, contained).",
        "details": {
          "topic": "Runtime heap structure and sharing in object-oriented programs",
          "problem": "Type systems and theoretical models admit a wide range of complex heap shapes, but it is unclear which of those shapes actually appear in real programs and therefore which assumptions analyses, annotations, and memory systems should target.",
          "approach": "Dynamically sampled runtime heaps using HeapDbg to build an abstraction of 'conceptual components' (grouping objects by role and storage), measured shape (atomic/tree/dag/cyclic), injectivity (aliasing), ownership and sharing idioms, and statistically analyzed results on 10 DaCapo Java benchmarks (compiled to .NET) with validation on C# programs.",
          "key_insights": [
            "Most heap components are atomic: about 85% of types (±12%) and ~98.5% of conceptual components (±1%) are non-recursive (no internal pointers).",
            "Pointers are frequently injective and tree-like: roughly 87%–96% of fields and 90%–99% of edges are injective in the samples, and tree edges form the majority of pointer relationships.",
            "Local ownership is common but not dominant (≈51% of types, 39%–63% CI); when sharing occurs it is more often between components than within them (the majority of sharing spans different components).",
            "Most sharing can be classified by a few idioms—immutable objects are the largest source of sharing, with contained, unique (singletons/interns), and global patterns covering most of the rest; only a small fraction of sharing remains unclassified (≈8%–15% of fields)."
          ],
          "implications": "Because real-world heaps are dominated by simple shapes and a few predictable sharing idioms, designers of type/annotation systems, static/dynamic heap analyses, allocators, and garbage collectors can favor lightweight, idiom-aware mechanisms (e.g., injectivity/ownership annotations, region/pool allocation, optimizations for immutable/shared singletons) instead of supporting worst-case arbitrary heap structure, enabling more precise and efficient tools that match programmer intent."
        }
      },
      "tags": [
        "program-analysis",
        "telemetry-analysis",
        "statistical-analysis"
      ],
      "booktitle": "International Symposium on Software Testing and Analysis, ISSTA '13, Lugano, Switzerland, July 15-20, 2013",
      "publisher": "ACM",
      "pages": "123--133",
      "doi": "10.1145/2483760.2483761",
      "url": "https://doi.org/10.1145/2483760.2483761",
      "editor": "Mauro Pezzè and Mark Harman",
      "raw_bibtex": "@inproceedings{DBLP:conf/issta/BarrBM13,\n  author       = {Earl T. Barr and\n                  Christian Bird and\n                  Mark Marron},\n  editor       = {Mauro Pezz{\\`{e}} and\n                  Mark Harman},\n  title        = {Collecting a heap of shapes},\n  booktitle    = {International Symposium on Software Testing and Analysis, {ISSTA}\n                  '13, Lugano, Switzerland, July 15-20, 2013},\n  pages        = {123--133},\n  publisher    = {{ACM}},\n  year         = {2013},\n  url          = {https://doi.org/10.1145/2483760.2483761},\n  doi          = {10.1145/2483760.2483761},\n  timestamp    = {Sun, 02 Oct 2022 16:10:12 +0200},\n  biburl       = {https://dblp.org/rec/conf/issta/BarrBM13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}",
      "awards": [
        "ACM SIGSOFT Distinguished Paper",
        "ISSTA Best Paper"
      ]
    },
    "DBLP:conf/msr/MukadamBR13": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Gerrit software code review data from Android",
      "authors": "Murtuza Mukadam and Christian Bird and Peter C. Rigby",
      "year": "2013",
      "venue": "Proceedings of the 10th Working Conference on Mining Software Repositories,\n                  {MSR",
      "mapped_pdf": "mukadam2013gerrit.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Extracts and publishes a cleaned dataset of ~19k Android Gerrit code reviews by reverse-engineering Gerrit's JSON endpoints, describes the extraction and schema, and demonstrates basic analyses of review practices.",
        "details": {
          "topic": "Tool-supported code review data mining / software engineering dataset",
          "problem": "Tool-supported (Gerrit) peer review is understudied because there are few available mining scripts and datasets, making it hard to analyze how review tools affect development practices and outcomes.",
          "approach": "Reverse-engineered Gerrit's JSON requests, implemented a Python miner (throttled to avoid server overload) to collect ~19k Android reviews and raw JSON responses, cleaned and stored the data in a Microsoft SQL Server schema (and XML dump), documented data fields and anomalies (bots, missing IDs, API changes), and illustrated usage with an analysis of review timing across weekdays.",
          "key_insights": [
            "A reusable dataset of ~19,000 Android Gerrit reviews was produced and made available along with a documented database schema.",
            "Mining required reverse-engineering Gerrit's undocumented JSON API and multiple per-review requests (patch sets, comments), plus careful throttling and cleaning.",
            "Automated accounts (e.g., 'Deckard Autoverifier') account for many verification events but not all; manual verifications by humans create annotation biases.",
            "Empirical example: submissions are concentrated on weekdays (Mon–Fri) with significantly fewer reviews on weekends, and Saturday > Sunday."
          ],
          "implications": "Provides researchers and practitioners with a ready-to-use, well-documented trace of Gerrit-based code review to study reviewer behavior, improve defect prediction and review workflows, compare review practices across contexts, and build tools or policies informed by real review data; also demonstrates practical challenges (API fragility, bots, missing records) that future miners must handle."
        }
      },
      "tags": [
        "code-review",
        "dataset-and-tooling",
        "repository-mining"
      ],
      "booktitle": "Proceedings of the 10th Working Conference on Mining Software Repositories, MSR '13, San Francisco, CA, USA, May 18-19, 2013",
      "publisher": "IEEE Computer Society",
      "pages": "45--48",
      "doi": "10.1109/MSR.2013.6624002",
      "url": "https://doi.org/10.1109/MSR.2013.6624002",
      "editor": "Thomas Zimmermann and Massimiliano Di Penta and Sunghun Kim",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/MukadamBR13,\n  author       = {Murtuza Mukadam and\n                  Christian Bird and\n                  Peter C. Rigby},\n  editor       = {Thomas Zimmermann and\n                  Massimiliano Di Penta and\n                  Sunghun Kim},\n  title        = {Gerrit software code review data from Android},\n  booktitle    = {Proceedings of the 10th Working Conference on Mining Software Repositories,\n                  {MSR} '13, San Francisco, CA, USA, May 18-19, 2013},\n  pages        = {45--48},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2013},\n  url          = {https://doi.org/10.1109/MSR.2013.6624002},\n  doi          = {10.1109/MSR.2013.6624002},\n  timestamp    = {Mon, 07 Apr 2025 08:23:02 +0200},\n  biburl       = {https://dblp.org/rec/conf/msr/MukadamBR13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/RigbyB13": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Convergent contemporary software peer review practices",
      "authors": "Peter C. Rigby and Christian Bird",
      "year": "2013",
      "venue": "Joint Meeting of the European Software Engineering Conference and\n                  the {ACM",
      "mapped_pdf": "rigby2013convergent.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Analyzes code-review data from multiple commercial and open-source projects to show modern peer review has converged on lightweight, pre-commit, fast reviews that emphasize discussion and substantially spread knowledge among developers.",
        "details": {
          "topic": "Contemporary software code review / peer review practices",
          "problem": "There is little systematic, cross-project evidence about how modern, tool-supported peer review in firms compares to traditional inspections and open-source practices, and what parameters (speed, size, participants, effectiveness, knowledge transfer) characterize effective contemporary review.",
          "approach": "Multiple-case study and empirical analysis: mined and normalized review data from Google-led projects (Android, Chromium OS), Microsoft projects (Bing, Office, SQL Server), AMD, and compared with six OSS projects and a Lucent inspection study; measured review interval, change size, number of reviewers, comment/thread/resubmission proxies for defects, and introduced a metric for knowledge spread (files modified ∪ reviewed).",
          "key_insights": [
            "Contemporary reviews are lightweight, performed pre-commit, frequent and fast (median completion on the order of hours to a day) across disparate projects.",
            "Change sizes tend to be small, enabling short review intervals, and a median of two active reviewers is effective in practice (authors often invite 3–4 but typically two participate).",
            "Modern review shifts from strict defect-counting to group problem-solving and discussion; while defects are not explicitly recorded, proxies (comments, threads, resubmissions) indicate defect-finding comparable to traditional inspections.",
            "Review substantially increases developers' system knowledge: reviewing raises the number of distinct files a developer knows about by roughly 66%–150% depending on the project."
          ],
          "implications": "The findings provide evidence-based guidance for teams and tool builders: adopt lightweight pre-commit reviews with small changes and a small number of reviewers, instrument reviews to capture discussion-based proxies for effectiveness, and recognize knowledge sharing as a key benefit and potential quality metric when evaluating review practices and tooling."
        }
      },
      "tags": [
        "code-review",
        "repository-mining",
        "open-source-software"
      ],
      "booktitle": "Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE'13, Saint Petersburg, Russian Federation, August 18-26, 2013",
      "publisher": "ACM",
      "pages": "202--212",
      "doi": "10.1145/2491411.2491444",
      "url": "https://doi.org/10.1145/2491411.2491444",
      "editor": "Bertrand Meyer and Luciano Baresi and Mira Mezini",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/RigbyB13,\n  author       = {Peter C. Rigby and\n                  Christian Bird},\n  editor       = {Bertrand Meyer and\n                  Luciano Baresi and\n                  Mira Mezini},\n  title        = {Convergent contemporary software peer review practices},\n  booktitle    = {Joint Meeting of the European Software Engineering Conference and\n                  the {ACM} {SIGSOFT} Symposium on the Foundations of Software Engineering,\n                  ESEC/FSE'13, Saint Petersburg, Russian Federation, August 18-26, 2013},\n  pages        = {202--212},\n  publisher    = {{ACM}},\n  year         = {2013},\n  url          = {https://doi.org/10.1145/2491411.2491444},\n  doi          = {10.1145/2491411.2491444},\n  timestamp    = {Tue, 01 Feb 2022 10:45:16 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/RigbyB13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/NagappanZB13": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Diversity in software engineering research",
      "authors": "Meiyappan Nagappan and Thomas Zimmermann and Christian Bird",
      "year": "2013",
      "venue": "Joint Meeting of the European Software Engineering Conference and\n                  the {ACM",
      "mapped_pdf": "nagappan2013diversity.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Defines a formal measure called sample coverage and provides algorithms and an R implementation to measure and maximize how well a chosen set of software projects represents a target population, demonstrated on 20,000 Ohloh projects and ICSE/FSE papers.",
        "details": {
          "topic": "Representativeness and diversity of software engineering empirical samples",
          "problem": "Researchers often select convenient or large samples of software projects without quantifying how well those samples represent the broader population, which undermines claims of generality and external validity.",
          "approach": "Define universe, space, and configuration; formalize sample coverage as the percentage of projects in a universe similar to a sample; implement algorithms to compute coverage and to greedily select projects that maximize coverage; provide an R package and demonstrate the method on a universe of 20,028 active Ohloh projects and by measuring coverage of projects used in ICSE/FSE papers.",
          "key_insights": [
            "Sample coverage quantifies representativeness by counting how many projects in a universe are similar (across chosen dimensions) to at least one sample project, enabling per-dimension and overall scores.",
            "A greedy selection strategy can efficiently maximize coverage — e.g., first 50 projects cover 15.3% of the 20k Ohloh universe, 392 projects cover 50%, and 5,030 projects cover 100%.",
            "ICSE/FSE papers (mapped to 207 Ohloh projects) covered only ~9.15% of the Ohloh universe overall under the default configuration, but per-dimension coverage (size, activity, contributors, commits) was often very high (>98%), revealing narrow multi-dimensional overlap.",
            "Top coverage-increasing projects tend to be small, active projects in dynamic languages, showing that small projects can collectively represent large portions of the space and are inexpensive targets for evaluation."
          ],
          "implications": "Provides researchers and practitioners a repeatable way to (1) quantify how representative their study samples are for a stated universe and space, (2) guide selection of additional projects to improve coverage, (3) report coverage alongside universe/space/configuration to improve transparency and external validity, and (4) support replication and tailoring of empirical studies (including within companies) by comparing coverage against customized universes."
        }
      },
      "tags": [
        "repository-mining",
        "dataset-and-tooling",
        "statistical-analysis"
      ],
      "booktitle": "Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE'13, Saint Petersburg, Russian Federation, August 18-26, 2013",
      "publisher": "ACM",
      "pages": "466--476",
      "doi": "10.1145/2491411.2491415",
      "url": "https://doi.org/10.1145/2491411.2491415",
      "editor": "Bertrand Meyer and Luciano Baresi and Mira Mezini",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/NagappanZB13,\n  author       = {Meiyappan Nagappan and\n                  Thomas Zimmermann and\n                  Christian Bird},\n  editor       = {Bertrand Meyer and\n                  Luciano Baresi and\n                  Mira Mezini},\n  title        = {Diversity in software engineering research},\n  booktitle    = {Joint Meeting of the European Software Engineering Conference and\n                  the {ACM} {SIGSOFT} Symposium on the Foundations of Software Engineering,\n                  ESEC/FSE'13, Saint Petersburg, Russian Federation, August 18-26, 2013},\n  pages        = {466--476},\n  publisher    = {{ACM}},\n  year         = {2013},\n  url          = {https://doi.org/10.1145/2491411.2491415},\n  doi          = {10.1145/2491411.2491415},\n  timestamp    = {Tue, 06 Nov 2018 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/NagappanZB13.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:journals/ese/RahmanBD12": {
      "status": "MAPPED",
      "type": "article",
      "title": "Clones: what is that smell?",
      "authors": "Foyzur Rahman and Christian Bird and Premkumar T. Devanbu",
      "year": "2012",
      "venue": "Empir. Softw. Eng.",
      "mapped_pdf": "rahman2012cwt.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "An empirical analysis of four large open-source C projects shows that cloned code is not more defect-prone — most bugs do not involve clones and cloned regions often have lower defect density than non-cloned code.",
        "details": {
          "topic": "Code cloning and software defect proneness",
          "problem": "Cloned (duplicated) code is widely considered a 'bad smell' believed to increase defects, maintenance effort, and project cost, but that conventional wisdom has not been directly validated against bug-fix data.",
          "approach": "Run the Deckard clone detector on monthly snapshots of four medium-to-large open‑source C projects (Apache, Evolution, Gimp, Nautilus); link bug-fix commits from issue trackers to SCM revisions; map changed (buggy) lines to staging snapshots to determine whether they are cloned; compute bug-clone ratios, defect densities for clone groups (prolific vs non‑prolific, scattered vs collocated) and compare distributions using nonparametric tests with multiple-test correction; supplement with manual case studies and false-positive sampling.",
          "key_insights": [
            "Most bugs have little or no cloned code: in three projects over 80% of bugs contained no cloned lines and overall bug-clone ratios are lower than project clone ratios.",
            "Cloned code tends to be less defect-prone: defect density per cloned line is lower than for non-cloned code, and prolific clone groups (many copies) show lower defect density than small clone groups.",
            "Scattered clones (across files or directories) are not demonstrably more error-prone than collocated clones.",
            "Bugs with higher clone content do not require more effort to fix (measured as lines changed); in fact they often require smaller fixes."
          ],
          "implications": "For researchers and tool builders: aggressive wholesale refactoring to remove clones may be unnecessary — prioritize clone-maintenance tooling (tracking, simultaneous editing, inconsistency detection) and consider cloned content as a potential negative indicator in bug‑prediction; for practitioners: cloning may be an acceptable pragmatic practice in many contexts, so focus quality/maintenance effort on other risky code rather than treating all duplicates as high-priority 'bad smells.'"
        }
      },
      "tags": [
        "repository-mining",
        "defect-prediction-and-quality",
        "statistical-analysis",
        "open-source-software"
      ],
      "journal": "Empir. Softw. Eng.",
      "volume": "17",
      "number": "4-5",
      "pages": "503--530",
      "doi": "10.1007/S10664-011-9195-3",
      "url": "https://doi.org/10.1007/s10664-011-9195-3",
      "raw_bibtex": "@article{DBLP:journals/ese/RahmanBD12,\n  author       = {Foyzur Rahman and\n                  Christian Bird and\n                  Premkumar T. Devanbu},\n  title        = {Clones: what is that smell?},\n  journal      = {Empir. Softw. Eng.},\n  volume       = {17},\n  number       = {4-5},\n  pages        = {503--530},\n  year         = {2012},\n  url          = {https://doi.org/10.1007/s10664-011-9195-3},\n  doi          = {10.1007/S10664-011-9195-3},\n  timestamp    = {Tue, 25 Aug 2020 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/ese/RahmanBD12.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/esem/ShihabBZ12": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "The effect of branching strategies on software quality",
      "authors": "Emad Shihab and Christian Bird and Thomas Zimmermann",
      "year": "2012",
      "venue": "2012 {ACM-IEEE",
      "mapped_pdf": "shihab2012ebs.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Quantifies how branching characteristics and alignment choices correlate with post-release failures in large-scale Windows development, finding that high branch activity and scattering increase failures and that organizational misalignment predicts defects more than architectural misalignment.",
        "details": {
          "topic": "Branching strategies and software quality",
          "problem": "Branches are widely used to enable parallel development, but their structure and how they align with team or architectural boundaries may introduce integration overhead and unknown risk that could affect post-release software quality.",
          "approach": "Empirical study of Windows Vista and Windows 7: defined metrics for branch activity, branch scatter, branch depth and entropy, and architectural/organizational mismatch; collected commit histories, mappings from source files to binaries, post-release failure counts, and organizational snapshots; built multiple linear regression models controlling for churn, size, complexity and other code/process metrics; quantified effect sizes by varying single metrics while holding others at median.",
          "key_insights": [
            "Higher branch activity (ratio of branching changes to development changes) is associated with more post-release failures (e.g., up to ~59% increase in Vista and large effects in Windows 7).",
            "Branch scatter (components changed across many branch families) increases failures; components changed equally across branch families (high scatter entropy) tend to be riskier in Windows 7.",
            "Branch depth has little to modest impact on quality overall — depth metrics added little explanatory power beyond activity and scatter.",
            "Organizational mismatch (branches spanning multiple teams/leads/managers) predicts branch-level failures better than architectural mismatch (branches crossing subsystem/component boundaries)."
          ],
          "implications": "For practitioners: reduce unnecessary branching activity and minimize scattering of a component's development across many branch families; when choosing how to partition branches prefer alignment with organizational boundaries (team ownership and communication) in addition to architectural structure; for researchers: branch-usage metrics (activity, scatter, entropy) are measurable predictors to include in models of defect risk and to guide further study of branch processes and coordination practices; overall, branching policies should be paired with coordination/integration practices since branches amplify coordination failures rather than being direct causes by themselves."
        }
      },
      "tags": [
        "version-control-and-branching",
        "defect-prediction-and-quality",
        "repository-mining",
        "statistical-analysis"
      ],
      "booktitle": "2012 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM '12, Lund, Sweden - September 19 - 20, 2012",
      "publisher": "ACM",
      "pages": "301--310",
      "doi": "10.1145/2372251.2372305",
      "url": "https://doi.org/10.1145/2372251.2372305",
      "editor": "Per Runeson and Martin Höst and Emilia Mendes and Anneliese Amschler Andrews and Rachel Harrison",
      "raw_bibtex": "@inproceedings{DBLP:conf/esem/ShihabBZ12,\n  author       = {Emad Shihab and\n                  Christian Bird and\n                  Thomas Zimmermann},\n  editor       = {Per Runeson and\n                  Martin H{\\\"{o}}st and\n                  Emilia Mendes and\n                  Anneliese Amschler Andrews and\n                  Rachel Harrison},\n  title        = {The effect of branching strategies on software quality},\n  booktitle    = {2012 {ACM-IEEE} International Symposium on Empirical Software Engineering\n                  and Measurement, {ESEM} '12, Lund, Sweden - September 19 - 20, 2012},\n  pages        = {301--310},\n  publisher    = {{ACM}},\n  year         = {2012},\n  url          = {https://doi.org/10.1145/2372251.2372305},\n  doi          = {10.1145/2372251.2372305},\n  timestamp    = {Wed, 16 Oct 2019 14:14:52 +0200},\n  biburl       = {https://dblp.org/rec/conf/esem/ShihabBZ12.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/fase/BarrBRHGD12": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Cohesive and Isolated Development with Branches",
      "authors": "Earl T. Barr and Christian Bird and Peter C. Rigby and Abram Hindle and Daniel M. Germán and Premkumar T. Devanbu",
      "year": "2012",
      "venue": "Fundamental Approaches to Software Engineering - 15th International\n                  Conference, {FASE",
      "mapped_pdf": "barr2012cid.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Analyzes why OSS projects switched to distributed version control and quantitatively shows that history-preserving branching (not distribution) drove adoption because branches are used for cohesive, isolated work that reduces integration interruptions.",
        "details": {
          "topic": "Branching and version control practices in software development",
          "problem": "Why did open-source projects rapidly adopt distributed version control (DVC), and how well do DVC branches provide cohesion (group related changes) and isolation (reduce interruptions and integration work) in practice?",
          "approach": "Mixed-methods study: semi-structured interviews with lead developers to identify motivations, quantitative mining of version-control histories from 60 OSS projects to measure changes in branch usage after switching to DVC, and an in-depth analysis of the Linux Git history using a linearization technique, Monte Carlo simulation of simulated branches, a directory-distance metric for branch cohesion, and a distracted-commit metric to estimate integration interruptions.",
          "key_insights": [
            "Adoption driver: Projects largely kept a centralized workflow but dramatically increased branch usage after switching to DVC—branching and improved merge support, not distribution, mainly motivated adoption.",
            "Branches are cohesive: Actual branches in Linux modify files that are significantly closer in the directory hierarchy than equivalent-length simulated sequences from a linearized history, and cohesion increases with branch length.",
            "Branches reduce interruptions: Linearized-history analysis shows concurrent edits to the same files are non-trivial (non-empty overlap roughly once every 22 commits; full overlap ~1 in 35), and branching defers much of the semantic integration work that would otherwise interrupt developers (estimated avoided distractions ≈ once every ~24 commits under conservative assumptions).",
            "New measures: The paper defines branch cohesion (via directory distance) and distracted commits (an index-based measure of potential integration interruption) to quantify branch benefits."
          ],
          "implications": "For researchers: provides measurable metrics and methods (linearization, cohesion, distracted commits) to study branching effects; for practitioners and tool builders: validates that lightweight, history-preserving branching improves modular development and reduces integration interruptions, suggesting investment in fast, reliable merging and branch-management practices and tools to help detect and manage cross-branch coupling; for project managers: encourages use of cohesive feature branches but highlights the need to balance isolation with timely integration to avoid wasted work."
        }
      },
      "tags": [
        "version-control-and-branching",
        "open-source-software",
        "repository-mining",
        "interviews",
        "statistical-analysis"
      ],
      "booktitle": "Fundamental Approaches to Software Engineering - 15th International Conference, FASE 2012, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2012, Tallinn, Estonia, March 24 - April 1, 2012. Proceedings",
      "series": "Lecture Notes in Computer Science",
      "publisher": "Springer",
      "volume": "7212",
      "pages": "316--331",
      "doi": "10.1007/978-3-642-28872-2_22",
      "url": "https://doi.org/10.1007/978-3-642-28872-2_22",
      "editor": "Juan de Lara and Andrea Zisman",
      "raw_bibtex": "@inproceedings{DBLP:conf/fase/BarrBRHGD12,\n  author       = {Earl T. Barr and\n                  Christian Bird and\n                  Peter C. Rigby and\n                  Abram Hindle and\n                  Daniel M. Germ{\\'{a}}n and\n                  Premkumar T. Devanbu},\n  editor       = {Juan de Lara and\n                  Andrea Zisman},\n  title        = {Cohesive and Isolated Development with Branches},\n  booktitle    = {Fundamental Approaches to Software Engineering - 15th International\n                  Conference, {FASE} 2012, Held as Part of the European Joint Conferences\n                  on Theory and Practice of Software, {ETAPS} 2012, Tallinn, Estonia,\n                  March 24 - April 1, 2012. Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {7212},\n  pages        = {316--331},\n  publisher    = {Springer},\n  year         = {2012},\n  url          = {https://doi.org/10.1007/978-3-642-28872-2\\_22},\n  doi          = {10.1007/978-3-642-28872-2\\_22},\n  timestamp    = {Sat, 19 Oct 2019 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/conf/fase/BarrBRHGD12.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icsm/HindleBZN12": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Relating requirements to implementation via topic analysis: Do topics extracted from requirements make sense to managers and developers?",
      "authors": "Abram Hindle and Christian Bird and Thomas Zimmermann and Nachiappan Nagappan",
      "year": "2012",
      "venue": "28th {IEEE",
      "mapped_pdf": "hindle2012rri.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Validates whether LDA topics extracted from requirements can be linked to version-control commits and whether those topics and time-series plots make sense to developers and program managers.",
        "details": {
          "topic": "Requirements traceability via topic modeling (LDA)",
          "problem": "Requirements and implementation frequently lose explicit links over a product's lifetime, and common topic-analysis techniques (like LDA) are used for traceability without sufficient validation that the extracted topics and inferred links are meaningful to practitioners.",
          "approach": "The authors extracted 75 requirements documents (≈285k words) from a large Microsoft product, preprocessed text, ran LDA (experimenting with topic counts and choosing 20 topics), had the first author label topics, and used LDA inference to map ≈650k version-control commit messages (10 years, ~4000 authors) to those topics. They generated global and personal topic-time plots and validated topic interpretability and plot accuracy through two in-depth interviews and an administered developer survey (in-person and email), then performed a qualitative analysis of responses.",
          "key_insights": [
            "Many topics extracted from requirements were meaningful to practitioners familiar with the domain, and commit-topic time-plots often matched developers' and managers' perceptions of effort and historical events.",
            "Topic labelling is difficult: non-expert labels agreed with expert labels only about 50%, and familiarity with the underlying requirements strongly affects the ability to interpret topics.",
            "Global topic plots are more useful for managers (spotting cross-team trends), while personal/topic-per-author plots are more useful and interpretable for developers.",
            "Unlabelled or noisy topics reduce utility—topics should be pruned, labeled by domain experts, and presented with drill-down support for practical use."
          ],
          "implications": "For researchers: empirical validation is needed when applying LDA to software artifacts and evaluations should include domain experts; for tool builders and managers: LDA-derived topics can provide high-level traceability and dashboard views of effort but require expert labeling, pruning, and drill-down capabilities; for practitioners: personal topic-plots can help developers recall and verify their own work, while managers can use global trends to monitor feature effort and evolution, but care is needed because ambiguous topics can mislead."
        }
      },
      "tags": [
        "repository-mining",
        "ai-for-software-engineering",
        "interviews",
        "surveys"
      ],
      "booktitle": "28th IEEE International Conference on Software Maintenance, ICSM 2012, Trento, Italy, September 23-28, 2012",
      "publisher": "IEEE Computer Society",
      "pages": "243--252",
      "doi": "10.1109/ICSM.2012.6405278",
      "url": "https://doi.org/10.1109/ICSM.2012.6405278",
      "raw_bibtex": "@inproceedings{DBLP:conf/icsm/HindleBZN12,\n  author       = {Abram Hindle and\n                  Christian Bird and\n                  Thomas Zimmermann and\n                  Nachiappan Nagappan},\n  title        = {Relating requirements to implementation via topic analysis: Do topics\n                  extracted from requirements make sense to managers and developers?},\n  booktitle    = {28th {IEEE} International Conference on Software Maintenance, {ICSM}\n                  2012, Trento, Italy, September 23-28, 2012},\n  pages        = {243--252},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2012},\n  url          = {https://doi.org/10.1109/ICSM.2012.6405278},\n  doi          = {10.1109/ICSM.2012.6405278},\n  timestamp    = {Fri, 24 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icsm/HindleBZN12.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/msr/BirdN12": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Who? Where? What? Examining distributed development in two large open source projects",
      "authors": "Christian Bird and Nachiappan Nagappan",
      "year": "2012",
      "venue": "9th {IEEE",
      "mapped_pdf": "bird2012www.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Manually map top contributors to organizations and locations for Firefox and Eclipse, quantify geographic and organizational distribution per component, and analyze how those distribution measures relate to pre- and post-release defects.",
        "details": {
          "topic": "Geographic and organizational distribution in open source software",
          "problem": "There is little empirical knowledge about how geographically and organizationally distributed development occurs in large open source projects and what effect such distribution has on software quality.",
          "approach": "The authors manually identified the top contributors (accounting for 95% of commits) in FIREFOX and ECLIPSE, determined their organizations and geographic locations using email, web, social profiles, and direct contact; mined CVS and Bugzilla histories; computed distribution measures (LEVEL, spatial/temporal dispersion, number of organizations, ownership); and used linear regression (with controls like LOC and churn and log transforms to satisfy assumptions) to relate distribution measures to pre- and post-release defects.",
          "key_insights": [
            "FIREFOX is both geographically and organizationally distributed (Mozilla Corp ~47% of commits, many other orgs contribute); components that are globally distributed tend to be larger, have more commits and contributors, and show increased pre-release defects even after controlling for size and churn.",
            "ECLIPSE is organizationally centralized (IBM ~91% of commits) and at the component/plugin level is largely single-site; when components are geographically or organizationally distributed they often have substantially more defects, but effects vary across releases and sample sizes for distributed components are small.",
            "Distribution effects are context-dependent: geographic distribution (spatial/level/worldwide) is more consistently associated with higher defects prior to release than after release, and organizational ownership/number of organizations show complex relationships (bivariate vs. multivariate results can differ)."
          ],
          "implications": "Researchers should account for organization, geographic granularity, and component size when studying distributed development because distribution can increase defects but effects depend on project context and release phase; practitioners should consider stronger coordination, ownership, testing, or centralization strategies for components that will be developed across multiple sites or organizations to mitigate quality risks."
        }
      },
      "tags": [
        "open-source-software",
        "repository-mining",
        "defect-prediction-and-quality",
        "statistical-analysis"
      ],
      "booktitle": "9th IEEE Working Conference of Mining Software Repositories, MSR 2012, June 2-3, 2012, Zurich, Switzerland",
      "publisher": "IEEE Computer Society",
      "pages": "237--246",
      "doi": "10.1109/MSR.2012.6224286",
      "url": "https://doi.org/10.1109/MSR.2012.6224286",
      "editor": "Michele Lanza and Massimiliano Di Penta and Tao Xie",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/BirdN12,\n  author       = {Christian Bird and\n                  Nachiappan Nagappan},\n  editor       = {Michele Lanza and\n                  Massimiliano Di Penta and\n                  Tao Xie},\n  title        = {Who? Where? What? Examining distributed development in two large open\n                  source projects},\n  booktitle    = {9th {IEEE} Working Conference of Mining Software Repositories, {MSR}\n                  2012, June 2-3, 2012, Zurich, Switzerland},\n  pages        = {237--246},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2012},\n  url          = {https://doi.org/10.1109/MSR.2012.6224286},\n  doi          = {10.1109/MSR.2012.6224286},\n  timestamp    = {Fri, 11 Jul 2025 17:36:18 +0200},\n  biburl       = {https://dblp.org/rec/conf/msr/BirdN12.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/BirdZ12": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Assessing the value of branches with what-if analysis",
      "authors": "Christian Bird and Thomas Zimmermann",
      "year": "2012",
      "venue": "20th {ACM",
      "mapped_pdf": "bird2012avb.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "A what-if analysis and developer survey quantify the cost (delay) and benefit (isolation) of source-control branches and show that removing low-benefit/high-cost branches in Windows would cut transit time substantially while adding very few conflicts.",
        "details": {
          "topic": "Branching in version control / SCM",
          "problem": "Branches enable parallel development but can introduce long delays and costly integrations; teams lack quantitative, per-branch measures to decide which branches help and which hinder progress.",
          "approach": "Surveyed 124 experienced Microsoft engineers about branch usage and anti-patterns, then developed a what-if analysis that replays historical SCM activity while simulating branch-removal scenarios to compute two metrics — delay (change in transit time to root) and isolation (conflicts avoided) — both raw and normalized; applied the technique to Windows (and other products) to evaluate single-branch, subtree, and max-depth scenarios and to support mid-cycle decision experiments.",
          "key_insights": [
            "Branches produce a measurable tradeoff between isolation and liveness: some branches (\"sheep\") provide isolation with low delay, while others (\"goats\") incur high delay but little isolation.",
            "Simulated removal of goat branches in Windows would have saved about 8.9 days of delay per edit while adding only ~0.04 conflicts per edit; this decision approach achieves ≈92% of the optimal time savings with modest extra conflicts.",
            "Deep branch levels contribute little to overall delay; most transit-time cost comes from shallower branches, so limiting maximum depth has limited benefit unless made very shallow.",
            "Branch categorizations made mid-release are stable (85% unchanged, Kendall's τ ≈ 0.86), so earlier metric-driven actions are reliable."
          ],
          "implications": "Provides a practical, data-driven framework for monitoring branch health and making branch-refactoring decisions (remove/split/merge branches, change integration cadence); enables tooling and research for branch optimization, recommender systems, and predictive models, and helps teams balance isolation versus rapid integration to improve developer productivity and reduce integration overhead."
        }
      },
      "tags": [
        "version-control-and-branching",
        "repository-mining",
        "surveys",
        "statistical-analysis"
      ],
      "booktitle": "20th ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE-20), SIGSOFT/FSE'12, Cary, NC, USA - November 11 - 16, 2012",
      "publisher": "ACM",
      "pages": "45",
      "doi": "10.1145/2393596.2393648",
      "url": "https://doi.org/10.1145/2393596.2393648",
      "editor": "Will Tracz and Martin P. Robillard and Tevfik Bultan",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/BirdZ12,\n  author       = {Christian Bird and\n                  Thomas Zimmermann},\n  editor       = {Will Tracz and\n                  Martin P. Robillard and\n                  Tevfik Bultan},\n  title        = {Assessing the value of branches with what-if analysis},\n  booktitle    = {20th {ACM} {SIGSOFT} Symposium on the Foundations of Software Engineering\n                  (FSE-20), SIGSOFT/FSE'12, Cary, NC, {USA} - November 11 - 16, 2012},\n  pages        = {45},\n  publisher    = {{ACM}},\n  year         = {2012},\n  url          = {https://doi.org/10.1145/2393596.2393648},\n  doi          = {10.1145/2393596.2393648},\n  timestamp    = {Tue, 01 Feb 2022 10:45:16 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/BirdZ12.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}",
      "awards": [
        "ACM SIGSOFT Distinguished Paper"
      ]
    },
    "DBLP:journals/ese/PosnettBD11": {
      "status": "MAPPED",
      "type": "article",
      "title": "An empirical study on the influence of pattern roles on change-proneness",
      "authors": "Daryl Posnett and Christian Bird and Premkumar T. Devanbu",
      "year": "2011",
      "venue": "Empir. Softw. Eng.",
      "mapped_pdf": "posnett2010esi.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Class size explains most of the variation in class change-proneness; design-pattern and metapattern roles add little additional predictive power once size is accounted for.",
        "details": {
          "topic": "Design patterns, metapatterns, and change-proneness in object-oriented software",
          "problem": "People expect certain classes (those playing particular design-pattern roles) to be more or less stable, but it is unclear whether role/structure or simple class size is the real driver of change-proneness.",
          "approach": "Empirical analysis of three Java systems (JHotDraw, Xerces, Eclipse JDT): detect design patterns with DeMIMA and structural metapatterns with Thex, identify stable pattern/metapattern instances across releases, measure class size (LOC) and number of changes (distinct commits and semantic changes via Change Distiller), then run multiple linear regression models (log-transformed variables, release fixed effects, weighted effect coding for roles) to quantify how much variance in change-proneness is explained by roles versus size.",
          "key_insights": [
            "Class size (LOC) is the dominant predictor of change-proneness across projects and patterns; size is significant and positively related to changes in every model.",
            "When controlling for size, design-pattern and metapattern role predictors add very little explanatory power (typically under a few percent of variance); many role effects become insignificant or change sign after size control.",
            "Pattern and metapattern roles are strongly associated with class size (roles partially mediate change-proneness through size), so previously observed role differences can often be traced to size differences of the classes playing those roles.",
            "Metapatterns (purely structural groupings) reproduce the same qualitative role trends as design patterns and are easier to detect, but they do not materially improve prediction of change-proneness beyond size."
          ],
          "implications": "Researchers should control for class size when studying pattern-related stability claims (to avoid confounding); practitioners and tool-builders who need quick indicators of change-proneness can rely on class size as a simple, fast proxy rather than expensive/fragile pattern detection; however, pattern/metapattern information remains valuable for design reasoning and early prediction of future class size and behavior."
        }
      },
      "tags": [
        "repository-mining",
        "statistical-analysis",
        "defect-prediction-and-quality",
        "program-analysis"
      ],
      "journal": "Empir. Softw. Eng.",
      "volume": "16",
      "number": "3",
      "pages": "396--423",
      "doi": "10.1007/S10664-010-9148-2",
      "url": "https://doi.org/10.1007/s10664-010-9148-2",
      "raw_bibtex": "@article{DBLP:journals/ese/PosnettBD11,\n  author       = {Daryl Posnett and\n                  Christian Bird and\n                  Premkumar T. Devanbu},\n  title        = {An empirical study on the influence of pattern roles on change-proneness},\n  journal      = {Empir. Softw. Eng.},\n  volume       = {16},\n  number       = {3},\n  pages        = {396--423},\n  year         = {2011},\n  url          = {https://doi.org/10.1007/s10664-010-9148-2},\n  doi          = {10.1007/S10664-010-9148-2},\n  timestamp    = {Tue, 25 Aug 2020 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/journals/ese/PosnettBD11.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/cscw/BirdMNZ11": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Empirical software engineering at Microsoft Research",
      "authors": "Christian Bird and Brendan Murphy and Nachiappan Nagappan and Thomas Zimmermann",
      "year": "2011",
      "venue": "Proceedings of the 2011 {ACM",
      "mapped_pdf": "bird2011ese.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "The Empirical Software Engineering group at Microsoft Research studies how social, organizational, and technical data from large industrial and open-source projects can predict defects, improve bug triage, and guide development practices.",
        "details": {
          "topic": "Empirical/software engineering and socio-technical analysis",
          "problem": "Traditional defect prediction and development guidance focus on code metrics, but the effects of developer behavior, organizational structure, collaboration, and bug-report practices on software quality and triage are not well understood or operationalized at scale.",
          "approach": "Leveraged large industrial datasets (primarily Windows Vista/Windows 7 and other Microsoft products) and open-source projects (Eclipse, Apache, Mozilla) to apply socio-technical network analysis, organizational metrics, logistic/regression models and PCA, surveys, qualitative categorization of bug report information needs, bug tossing graphs with Markov models, and industrial case studies of TDD and unit-test automation to predict failures, characterize bug triage, and evaluate development practices.",
          "key_insights": [
            "Combining developer contribution edges with module dependency edges (socio-technical networks) yields stronger defect prediction than using code or social relationships alone, with good transfer across releases and projects.",
            "Organizational metrics (team size, staff turnover, ownership cohesion, reporting hierarchy) can predict post-release faults better than many traditional code-based predictors like churn or complexity.",
            "Geographic distribution has a surprisingly small negative impact on defect rates once team size and organizational reporting structure are accounted for.",
            "Bug-report quality suffers from a mismatch between what developers want (repro steps, stack traces, test cases) and what reporters supply; tooling, guided UIs, reputation, and automated information capture can improve triage and fix likelihood."
          ],
          "implications": "For researchers: highlights the importance of socio-technical and organizational variables and the value of industrial-scale data for generalizable studies; for product teams and managers: suggests using socio-technical and org metrics to prioritize testing, staffing, and risk mitigation; for tool builders: motivates bug-reporting UIs that guide reporters and automatically collect diagnostic data, and analytics platforms that surface actionable socio-technical signals to improve triage and development decisions."
        }
      },
      "tags": [
        "defect-prediction-and-quality",
        "network-analysis",
        "repository-mining",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 2011 ACM Conference on Computer Supported Cooperative Work, CSCW 2011, Hangzhou, China, March 19-23, 2011",
      "publisher": "ACM",
      "pages": "143--150",
      "doi": "10.1145/1958824.1958846",
      "url": "https://doi.org/10.1145/1958824.1958846",
      "editor": "Pamela J. Hinds and John C. Tang and Jian Wang and Jakob E. Bardram and Nicolas Ducheneaut",
      "raw_bibtex": "@inproceedings{DBLP:conf/cscw/BirdMNZ11,\n  author       = {Christian Bird and\n                  Brendan Murphy and\n                  Nachiappan Nagappan and\n                  Thomas Zimmermann},\n  editor       = {Pamela J. Hinds and\n                  John C. Tang and\n                  Jian Wang and\n                  Jakob E. Bardram and\n                  Nicolas Ducheneaut},\n  title        = {Empirical software engineering at Microsoft Research},\n  booktitle    = {Proceedings of the 2011 {ACM} Conference on Computer Supported Cooperative\n                  Work, {CSCW} 2011, Hangzhou, China, March 19-23, 2011},\n  pages        = {143--150},\n  publisher    = {{ACM}},\n  year         = {2011},\n  url          = {https://doi.org/10.1145/1958824.1958846},\n  doi          = {10.1145/1958824.1958846},\n  timestamp    = {Tue, 06 Nov 2018 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/cscw/BirdMNZ11.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/BirdZT11": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "A theory of branches as goals and virtual teams",
      "authors": "Christian Bird and Thomas Zimmermann and Alex Teterev",
      "year": "2011",
      "venue": "Proceedings of the 4th International Workshop on Cooperative and Human\n                  Aspects of Software Engineering, {CHASE",
      "mapped_pdf": "bird2011tbg.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Branches represent goals (the set of files changed) and virtual teams (the developers who change them), and analysis of Windows Vista and Windows 7 shows that branches with similar goals generally have similar developer teams, though the converse does not always hold.",
        "details": {
          "topic": "Branching, team coordination, and software configuration management",
          "problem": "Large software projects use branches to partition work, but when different teams modify the same parts of the system without coordination it can cause conflicts, duplicated effort, delays, and quality problems; the authors investigate whether branches that change similar files (goals) are worked on by similar developer sets (virtual teams).",
          "approach": "The authors extracted all branch-level changes from two Windows releases (Vista and Windows 7), represented each branch by two vectors (file-change counts as a goal profile and developer commit counts as a virtual-team profile), computed cosine similarity for all branch pairs, visualized density heatmaps, and used Spearman correlation and binomial tests (with Benjamini–Hochberg correction) to assess the relationship between goal similarity and team similarity.",
          "key_insights": [
            "Branches that modify similar sets of files tend to have similar developer teams — empirical support found in both Windows 7 and Vista.",
            "The converse is not generally true: similar virtual teams can work on dissimilar goals without adverse implication.",
            "Quantitatively, Spearman correlations between goal and team similarity were moderate (≈0.39 for Windows 7, ≈0.47 for Vista), and among branch pairs with high similarity, 68% (Windows 7) and 75% (Vista) had team similarity ≥ goal similarity (p ≪ 0.01).",
            "Most branch pairs are largely dissimilar in both goals and teams, but when goal overlap exists it is commonly reflected in team overlap."
          ],
          "implications": "Repository-derived branch similarity can be used by managers and tooling to detect coordination risk (disparate teams working on the same files) and to prioritize awareness or coordination efforts; the findings motivate building alerts or management-level awareness tools and call for follow-up work linking these similarity patterns to concrete outcomes like defects, delays, or stabilization cost."
        }
      },
      "tags": [
        "version-control-and-branching",
        "repository-mining",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 4th International Workshop on Cooperative and Human Aspects of Software Engineering, CHASE 2011, Waikiki, Honolulu, HI, USA, May 21, 2011",
      "publisher": "ACM",
      "pages": "53--56",
      "doi": "10.1145/1984642.1984655",
      "url": "https://doi.org/10.1145/1984642.1984655",
      "editor": "Marcelo Cataldo and Cleidson R. B. de Souza and Yvonne Dittrich and Rashina Hoda and Helen Sharp",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/BirdZT11,\n  author       = {Christian Bird and\n                  Thomas Zimmermann and\n                  Alex Teterev},\n  editor       = {Marcelo Cataldo and\n                  Cleidson R. B. de Souza and\n                  Yvonne Dittrich and\n                  Rashina Hoda and\n                  Helen Sharp},\n  title        = {A theory of branches as goals and virtual teams},\n  booktitle    = {Proceedings of the 4th International Workshop on Cooperative and Human\n                  Aspects of Software Engineering, {CHASE} 2011, Waikiki, Honolulu,\n                  HI, USA, May 21, 2011},\n  pages        = {53--56},\n  publisher    = {{ACM}},\n  year         = {2011},\n  url          = {https://doi.org/10.1145/1984642.1984655},\n  doi          = {10.1145/1984642.1984655},\n  timestamp    = {Tue, 06 Nov 2018 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/BirdZT11.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icsm/HongKCB11": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Understanding a developer social network and its evolution",
      "authors": "Qiaona Hong and Sunghun Kim and Shing-Chi Cheung and Christian Bird",
      "year": "2011",
      "venue": "{IEEE",
      "mapped_pdf": "hong2011uds.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Analyzes developer social networks extracted from Mozilla bug reports (2000–2009), compares their topology to general social networks, and traces how communities form and evolve over time.",
        "details": {
          "topic": "Developer social network analysis in open source software",
          "problem": "We lack a clear understanding of whether and how social-network properties and community dynamics observed in general social networks apply to developer collaboration networks in large open source projects.",
          "approach": "Mine Mozilla Bugzilla (2000–2009) to build undirected developer networks from co-commenting on bugs (weighted edges, low-activity edges pruned), run Louvain community detection (50 randomized runs per network), compare DSN metrics (degree distribution/power law, path lengths, modularity, community size) against several general social networks, analyze evolution using six-month windows, validate communities against Mozilla BOF meetings and known core developers, and trace community evolution patterns (expand, shrink, merge, split, extinct, emerge).",
          "key_insights": [
            "Degree distribution in DSNs does not follow a power-law (unlike many GSNs), though most nodes have low degree and a few have high degree.",
            "DSNs exhibit a strong small-world property with shorter average path lengths than GSNs (about 2.9–3.4) and stable connectivity over time.",
            "Developer networks have clear, stable community structure (modularity > 0.3) with generally small community sizes (median 23–55; largest community ≈21–36%), and modularity increases over the study period.",
            "Community evolution reflects project events (e.g., Firefox 1.0 release and developer departures around 2004), showing patterns of expansion, shrinkage, merges, splits, emergence, and extinction tied to real project activity."
          ],
          "implications": "Researchers and tool builders should not assume GSN degree distributions when modeling developer networks; DSNs’ strong, small, and stabilizing communities can be used to identify teams, target information/notifications, and study the effects of leadership or release events, and features or algorithms designed for GSNs (e.g., influence or recommendation mechanisms) may need adaptation for DSN characteristics."
        }
      },
      "tags": [
        "developer-social-networks",
        "network-analysis",
        "repository-mining",
        "open-source-software"
      ],
      "booktitle": "IEEE 27th International Conference on Software Maintenance, ICSM 2011, Williamsburg, VA, USA, September 25-30, 2011",
      "publisher": "IEEE Computer Society",
      "pages": "323--332",
      "doi": "10.1109/ICSM.2011.6080799",
      "url": "https://doi.org/10.1109/ICSM.2011.6080799",
      "raw_bibtex": "@inproceedings{DBLP:conf/icsm/HongKCB11,\n  author       = {Qiaona Hong and\n                  Sunghun Kim and\n                  Shing{-}Chi Cheung and\n                  Christian Bird},\n  title        = {Understanding a developer social network and its evolution},\n  booktitle    = {{IEEE} 27th International Conference on Software Maintenance, {ICSM}\n                  2011, Williamsburg, VA, USA, September 25-30, 2011},\n  pages        = {323--332},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2011},\n  url          = {https://doi.org/10.1109/ICSM.2011.6080799},\n  doi          = {10.1109/ICSM.2011.6080799},\n  timestamp    = {Fri, 02 Aug 2024 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/conf/icsm/HongKCB11.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icsm/Bird11": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Sociotechnical coordination and collaboration in open source software",
      "authors": "Christian Bird",
      "year": "2011",
      "venue": "{IEEE",
      "mapped_pdf": "bird2011scc.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Analyzes how social communication, code contributions, and organizational patterns in large open source projects interact and affect newcomer promotion, team structure, and software quality.",
        "details": {
          "topic": "Sociotechnical coordination and software quality in open source projects",
          "problem": "Large OSS projects involve many distributed contributors, and it is unclear how social interactions, technical contributions, distribution, and ownership affect coordination, newcomer advancement, and defect-proneness.",
          "approach": "The author mined mailing-list archives, version-control histories, and bug databases (projects studied include Apache, Python, Postgres, Perl, Ant, Firefox, Eclipse, Windows Vista/7), resolved email aliases, built social networks and socio-technical graphs, applied social network analysis, community detection, hazard-rate models for newcomer promotion, and logistic regression prediction models to relate social/technical measures to developer roles and post-release failures.",
          "key_insights": [
            "Developers' social-network importance (especially betweenness) strongly correlates with development activity and core developer status; documentation work correlates less with network centrality than source-code changes.",
            "Large OSS projects tend to self-organize into latent subcommunities tied to code artifacts (teams), i.e., they are often organized rather than purely 'bazaar'-like.",
            "Combining social (communication/contribution) and technical (dependencies) relationships into socio-technical networks predicts failure-prone components more accurately than using either relationship alone.",
            "Impact of geographic/organizational distribution and ownership on quality depends on process: projects that institutionalize practices (e.g., Windows) mitigate distribution risks and show strong ownership–quality relationships, while in other contexts (e.g., Eclipse) geographically distributed components or many minor contributors correlate with more defects."
          ],
          "implications": "Mining communication and repository data yields actionable signals for practitioners and researchers: use social/technical metrics to prioritize testing and review, design onboarding and meritocratic policies to accelerate safe promotion to core, adopt processes/tools to mitigate distribution risks, and monitor ownership/ minor-contributor patterns to reduce defect risk."
        }
      },
      "tags": [
        "open-source-software",
        "developer-social-networks",
        "repository-mining",
        "network-analysis",
        "defect-prediction-and-quality"
      ],
      "booktitle": "IEEE 27th International Conference on Software Maintenance, ICSM 2011, Williamsburg, VA, USA, September 25-30, 2011",
      "publisher": "IEEE Computer Society",
      "pages": "568--573",
      "doi": "10.1109/ICSM.2011.6080832",
      "url": "https://doi.org/10.1109/ICSM.2011.6080832",
      "raw_bibtex": "@inproceedings{DBLP:conf/icsm/Bird11,\n  author       = {Christian Bird},\n  title        = {Sociotechnical coordination and collaboration in open source software},\n  booktitle    = {{IEEE} 27th International Conference on Software Maintenance, {ICSM}\n                  2011, Williamsburg, VA, USA, September 25-30, 2011},\n  pages        = {568--573},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2011},\n  url          = {https://doi.org/10.1109/ICSM.2011.6080832},\n  doi          = {10.1109/ICSM.2011.6080832},\n  timestamp    = {Fri, 24 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icsm/Bird11.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/msr/ParninBM11": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Java generics adoption: how new features are introduced, championed, or ignored",
      "authors": "Chris Parnin and Christian Bird and Emerson R. Murphy-Hill",
      "year": "2011",
      "venue": "Proceedings of the 8th International Working Conference on Mining\n                  Software Repositories, {MSR",
      "mapped_pdf": "parnin2011jga.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "An empirical study mining the full histories of 20 popular open-source Java projects finds that Java generics were unevenly adopted, mostly used for collections (especially List<String>), often championed by one developer, only partially reduced code duplication, and did not reliably reduce type casts.",
        "details": {
          "topic": "Empirical study of Java generics adoption",
          "problem": "Language designers claimed generics would improve type safety, reduce casts and duplication, and be widely adopted, but it's unclear how generics were actually used in real-world projects and who adopts them.",
          "approach": "Automatically mined and analyzed every revision of 20 large open-source Java projects (548M+ LOC) using Eclipse JDT to extract generic usage, tracked parameterized vs raw types, identified 'generifications', measured casts and duplicated-code estimates, correlated adoption with contributors and IDE/tool support, and applied statistical tests.",
          "key_insights": [
            "Adoption was uneven: about half the projects and a minority of developers used generics extensively; in most projects one or two contributors 'championed' generics rather than broad community uptake.",
            "Generics usage was narrow and dominated by Java collections (Lists and Maps); Lists of Strings were the single most common pattern and advanced features (wildcards, nesting, bounds) were rarely used.",
            "Generics did reduce code duplication in concentrated cases (preventing many duplicated lines for a few highly parameterized types), but most user-defined generic types had few unique parameterizations, limiting overall impact.",
            "Introduction of generics did not consistently reduce the number of casts across projects; only a minority showed a strong inverse relationship, and IDE support timing did not clearly drive adoption."
          ],
          "implications": "Designers and researchers should temper expectations that large, complex language features will be broadly or immediately adopted or will uniformly realize advertised benefits; adoption is social as well as technical (often driven by a few champions), practical benefits may concentrate on a small set of use cases (collections), and measuring feature impact requires longitudinal, repository-scale analysis to inform future language design and tooling priorities."
        }
      },
      "tags": [
        "repository-mining",
        "open-source-software",
        "statistical-analysis",
        "program-analysis"
      ],
      "booktitle": "Proceedings of the 8th International Working Conference on Mining Software Repositories, MSR 2011 (Co-located with ICSE), Waikiki, Honolulu, HI, USA, May 21-28, 2011, Proceedings",
      "publisher": "ACM",
      "pages": "3--12",
      "doi": "10.1145/1985441.1985446",
      "url": "https://doi.org/10.1145/1985441.1985446",
      "editor": "Arie van Deursen and Tao Xie and Thomas Zimmermann",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/ParninBM11,\n  author       = {Chris Parnin and\n                  Christian Bird and\n                  Emerson R. Murphy{-}Hill},\n  editor       = {Arie van Deursen and\n                  Tao Xie and\n                  Thomas Zimmermann},\n  title        = {Java generics adoption: how new features are introduced, championed,\n                  or ignored},\n  booktitle    = {Proceedings of the 8th International Working Conference on Mining\n                  Software Repositories, {MSR} 2011 (Co-located with ICSE), Waikiki,\n                  Honolulu, HI, USA, May 21-28, 2011, Proceedings},\n  pages        = {3--12},\n  publisher    = {{ACM}},\n  year         = {2011},\n  url          = {https://doi.org/10.1145/1985441.1985446},\n  doi          = {10.1145/1985441.1985446},\n  timestamp    = {Fri, 05 Nov 2021 10:54:25 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/ParninBM11.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/promise/ZellerZB11": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Failure is a four-letter word: a parody in empirical research",
      "authors": "Andreas Zeller and Thomas Zimmermann and Christian Bird",
      "year": "2011",
      "venue": "Proceedings of the 7th International Conference on Predictive Models\n                  in Software Engineering, {PROMISE",
      "mapped_pdf": "zeller2011ffl.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "A parody study that uses 256-character frequency vectors and logistic regression on Eclipse releases to (apparently) predict defect-prone files and isolate four correlated letters, then uses that result to demonstrate how empirical findings can be misleading when misinterpreted.",
        "details": {
          "topic": "Defect prediction and empirical research methodology (parody)",
          "problem": "Empirical defect predictors often report correlations that are not actionable or causal; the paper explores how trivial features can produce seemingly strong but misleading results and highlights common research mistakes.",
          "approach": "The authors used the public Eclipse bug datasets (releases 2.0, 2.1, 3.0), represented each source file as a 256-dimensional count vector of ASCII characters (a proxy for keystrokes), trained logistic regression models to predict whether files had post-release defects, computed Spearman correlations (with Benjamini–Hochberg correction) between individual characters and defects, reported precision/recall across train/test combinations, isolated the most correlated letters (i,r,o,p in Eclipse 3.0), proposed absurd remediation (removing letters/keyboard changes), and then unpacked methodological errors as a didactic critique.",
          "key_insights": [
            "Simple character-frequency features can yield non-trivial predictive performance (up to 74% precision when training and testing within the same release) but low recall (~20% average; up to 32% within one release).",
            "Specific correlations (the 'IROP' letters i,r,o,p) were strong in one release but are dataset- and release-specific, illustrating spurious or non-generalizable findings.",
            "The study intentionally demonstrates common empirical pitfalls: interpreting correlation as causation, cherry-picking results, lacking baselines and external validation, and overstating actionable recommendations."
          ],
          "implications": "Serves as a cautionary example for researchers, reviewers, and practitioners: validate models across projects/releases, compare to sensible baselines, seek causal explanations and domain theory before proposing interventions, report all relevant results (avoid cherry-picking), and be skeptical of seemingly actionable recommendations derived solely from large datasets and simple correlations."
        }
      },
      "tags": [
        "defect-prediction-and-quality",
        "repository-mining",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 7th International Conference on Predictive Models in Software Engineering, PROMISE 2011, Banff, Alberta, Canada, September 20-21, 2011",
      "publisher": "ACM",
      "pages": "5",
      "doi": "10.1145/2020390.2020395",
      "url": "https://doi.org/10.1145/2020390.2020395",
      "editor": "Tim Menzies",
      "raw_bibtex": "@inproceedings{DBLP:conf/promise/ZellerZB11,\n  author       = {Andreas Zeller and\n                  Thomas Zimmermann and\n                  Christian Bird},\n  editor       = {Tim Menzies},\n  title        = {Failure is a four-letter word: a parody in empirical research},\n  booktitle    = {Proceedings of the 7th International Conference on Predictive Models\n                  in Software Engineering, {PROMISE} 2011, Banff, Alberta, Canada, September\n                  20-21, 2011},\n  pages        = {5},\n  publisher    = {{ACM}},\n  year         = {2011},\n  url          = {https://doi.org/10.1145/2020390.2020395},\n  doi          = {10.1145/2020390.2020395},\n  timestamp    = {Sun, 25 Jul 2021 01:00:00 +0200},\n  biburl       = {https://dblp.org/rec/conf/promise/ZellerZB11.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/BirdNMGD11": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Don't touch my code!: examining the effects of ownership on software quality",
      "authors": "Christian Bird and Nachiappan Nagappan and Brendan Murphy and Harald C. Gall and Premkumar T. Devanbu",
      "year": "2011",
      "venue": "SIGSOFT/FSE'11 19th {ACM",
      "mapped_pdf": "bird2011dtm.pdf",
      "notes": "Auto-mapped via PDF investigation, score: 1.50",
      "extracted_paper_info": {
        "tldr": "Quantifies how code ownership—especially the number of low‑expertise (minor) contributors and the proportion held by the top owner—relates to pre- and post-release failures in Windows Vista and Windows 7 and how ownership affects defect prediction.",
        "details": {
          "topic": "Code ownership and software quality",
          "problem": "When many low-expertise developers make small contributions to a component or ownership is fragmented, coordination and domain-knowledge gaps may increase defects; organizations need evidence about how ownership affects quality so they can change process and policy.",
          "approach": "Analyzed commit histories, source metrics, and pre-/post-release failure records for Windows Vista and Windows 7; defined ownership metrics (Minor, Major, Total, Ownership), ran correlation and multiple linear regression models controlling for size/churn/complexity, performed dependency analysis with a static tool (MaX) and randomized graph rewiring to test major-minor-dependency significance, and evaluated network-based defect prediction while removing minor or major contribution edges.",
          "key_insights": [
            "The number of minor (low‑ownership) contributors strongly and positively correlates with both pre-release and post-release failures even after controlling for size, churn, and complexity.",
            "Higher top-owner proportion (Ownership) is associated with fewer failures but has a smaller effect than the count of minor contributors.",
            "Minor-contributor edges carry most of the predictive signal in contribution-network based defect predictors; removing them drastically reduces performance (e.g., recall dropped from ~90% to ~58% and precision from ~85% to ~44% in one evaluation).",
            "A large fraction of minor contributions occur because developers who are major contributors to one binary make minor edits to dependent binaries (observed ~52% vs ~24% expected by chance), explaining part of why minor contributors appear."
          ],
          "implications": "Ownership metrics are cheap, actionable indicators that teams and managers can use to prioritize code review and QA (focus inspections on changes by minor contributors, route changes through major owners, prioritize low-ownership components), inform defect-prediction models and resourcing, and motivate process changes; results are most directly applicable to industrial settings with strong ownership practices but suggest broader value in measuring and managing ownership across projects."
        }
      },
      "tags": [
        "defect-prediction-and-quality",
        "repository-mining",
        "network-analysis",
        "statistical-analysis"
      ],
      "booktitle": "SIGSOFT/FSE'11 19th ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE-19) and ESEC'11: 13th European Software Engineering Conference (ESEC-13), Szeged, Hungary, September 5-9, 2011",
      "publisher": "ACM",
      "pages": "4--14",
      "doi": "10.1145/2025113.2025119",
      "url": "https://doi.org/10.1145/2025113.2025119",
      "editor": "Tibor Gyimóthy and Andreas Zeller",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/BirdNMGD11,\n  author       = {Christian Bird and\n                  Nachiappan Nagappan and\n                  Brendan Murphy and\n                  Harald C. Gall and\n                  Premkumar T. Devanbu},\n  editor       = {Tibor Gyim{\\'{o}}thy and\n                  Andreas Zeller},\n  title        = {Don't touch my code!: examining the effects of ownership on software\n                  quality},\n  booktitle    = {SIGSOFT/FSE'11 19th {ACM} {SIGSOFT} Symposium on the Foundations of\n                  Software Engineering {(FSE-19)} and ESEC'11: 13th European Software\n                  Engineering Conference (ESEC-13), Szeged, Hungary, September 5-9,\n                  2011},\n  pages        = {4--14},\n  publisher    = {{ACM}},\n  year         = {2011},\n  url          = {https://doi.org/10.1145/2025113.2025119},\n  doi          = {10.1145/2025113.2025119},\n  timestamp    = {Tue, 29 Dec 2020 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/BirdNMGD11.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}",
      "awards": [
        "Test of Time Award (10 years)"
      ]
    },
    "DBLP:books/oreilly/11/Bird11": {
      "status": "NO_PDF",
      "type": "incollection",
      "title": "Conway's Corollary",
      "authors": "Christian Bird",
      "year": "2011",
      "venue": "Making Software - What Really Works, and Why We Believe It",
      "mapped_pdf": null,
      "notes": null,
      "booktitle": "Making Software - What Really Works, and Why We Believe It",
      "series": "Theory in practice",
      "publisher": "O'Reilly",
      "pages": "187--206",
      "editor": "Andy Oram and Greg Wilson",
      "raw_bibtex": "@incollection{DBLP:books/oreilly/11/Bird11,\n  author       = {Christian Bird},\n  editor       = {Andy Oram and\n                  Greg Wilson},\n  title        = {Conway's Corollary},\n  booktitle    = {Making Software - What Really Works, and Why We Believe It},\n  series       = {Theory in practice},\n  pages        = {187--206},\n  publisher    = {O'Reilly},\n  year         = {2011},\n  timestamp    = {Thu, 14 May 2020 15:40:03 +0200},\n  biburl       = {https://dblp.org/rec/books/oreilly/11/Bird11.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/msr/RahmanBD10": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Clones: What is that smell?",
      "authors": "Foyzur Rahman and Christian Bird and Premkumar T. Devanbu",
      "year": "2010",
      "venue": "Proceedings of the 7th International Working Conference on Mining\n                  Software Repositories, {MSR",
      "mapped_pdf": "rahman2010cws.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Empirically evaluates whether code clones increase defect proneness by analyzing clone occurrence in bug-fix data across four large open-source C projects.",
        "details": {
          "topic": "Code clones and software quality",
          "problem": "Code duplication is widely considered a 'bad smell' that increases maintenance burden and defect risk, but there is little direct, large-scale evidence tying clones to higher defect rates.",
          "approach": "The authors ran DECKARD clone detection on monthly snapshots of four C open-source projects (Apache httpd, Evolution, Gimp, Nautilus) using conservative and liberal parameters; they linked bug-fix revisions from issue trackers to source changes, mapped changed lines back to staging snapshots, computed the fraction of buggy lines that were cloned (bug clone ratio), and used statistical tests (paired Wilcoxon, Benjamini–Hochberg corrections) plus case studies to answer three RQs about clone contribution to bugs, over-representation in buggy code, and defect density by clone group size.",
          "key_insights": [
            "Most bugs contain little or no cloned code: in three projects over 80% of bugs involved no cloned lines, and in the fourth about 80% had low clone ratios.",
            "Cloned lines are under-represented in buggy code compared to the overall snapshot clone ratio — cloned code tended to be less defect-prone than non-cloned code.",
            "Prolific clone groups (more copies) are not more buggy than small groups; larger groups often show lower defect density per cloned line."
          ],
          "implications": "The results challenge the blanket view that cloning is harmful: researchers and tool builders should prioritize clone-aware maintenance and detection (e.g., tracking and consistent propagation) over aggressive automatic refactoring, and consider using cloned content as a potential negative signal in bug-prediction models — while remaining cautious about generalizing beyond the studied open-source C projects and accounting for limitations in bug-linking and clone detection."
        }
      },
      "tags": [
        "defect-prediction-and-quality",
        "repository-mining",
        "open-source-software",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 7th International Working Conference on Mining Software Repositories, MSR 2010 (Co-located with ICSE), Cape Town, South Africa, May 2-3, 2010, Proceedings",
      "publisher": "IEEE Computer Society",
      "pages": "72--81",
      "doi": "10.1109/MSR.2010.5463343",
      "url": "https://doi.org/10.1109/MSR.2010.5463343",
      "editor": "Jim Whitehead and Thomas Zimmermann",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/RahmanBD10,\n  author       = {Foyzur Rahman and\n                  Christian Bird and\n                  Premkumar T. Devanbu},\n  editor       = {Jim Whitehead and\n                  Thomas Zimmermann},\n  title        = {Clones: What is that smell?},\n  booktitle    = {Proceedings of the 7th International Working Conference on Mining\n                  Software Repositories, {MSR} 2010 (Co-located with ICSE), Cape Town,\n                  South Africa, May 2-3, 2010, Proceedings},\n  pages        = {72--81},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2010},\n  url          = {https://doi.org/10.1109/MSR.2010.5463343},\n  doi          = {10.1109/MSR.2010.5463343},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/RahmanBD10.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}",
      "awards": [
        "Best Paper Award"
      ]
    },
    "DBLP:conf/msr/PosnettBD10": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "THEX: Mining metapatterns from java",
      "authors": "Daryl Posnett and Christian Bird and Premkumar T. Devanbu",
      "year": "2010",
      "venue": "Proceedings of the 7th International Working Conference on Mining\n                  Software Repositories, {MSR",
      "mapped_pdf": "posnett2010tmm.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "THEX is a bytecode-based tool that detects structural object-oriented metapatterns (TEMPLATE/HOOK motifs) in Java programs using structural analysis and symbolic execution, achieving over 90% recall on evaluated codebases.",
        "details": {
          "topic": "Metapattern detection in object-oriented software / software architecture mining",
          "problem": "Design pattern detection is often imprecise, hard to scale, and sensitive to intent; there is a need for a scalable, reliable way to find structural design motifs (metapatterns) that capture reusable inter-class structures.",
          "approach": "The authors built THEX, a Java bytecode analyzer that (1) reconstructs class hierarchies to find candidate HOOK classes (those with overridden methods), (2) treats each class as a TEMPLATE and uses symbolic execution on bytecode (extended ASM) with lightweight inter-procedural tracking to follow dataflow from fields/locals/arguments to hook method calls, (3) classifies detected TEMPLATE/HOOK pairs into metapattern types (CONNECTION, RECURSIVE CONNECTION, UNIFICATION, etc.), and (4) evaluated THEX on the Huston design-pattern catalog and JHotDraw 5.1, reporting recall/precision statistics and scalability (e.g., whole Eclipse analyzed in <30 minutes).",
          "key_insights": [
            "THEX reliably finds structural metapatterns: 100% recall/precision on the small Huston catalog and ~94% recall on JHotDraw, indicating strong detection of canonical motifs embedded in design patterns.",
            "Operating on bytecode with symbolic execution enables scalable, language-agnostic analysis (JVM languages) with linear time in methods and modest memory, allowing large codebases (Eclipse) to be analyzed quickly.",
            "Metapatterns capture core structural relationships shared across many GOF patterns, making them easier to detect mechanically than full design-pattern intent; however, THEX misses cases that require deeper multi-level inter-procedural reasoning or use custom containers/indirect accessors."
          ],
          "implications": "THEX provides a practical, scalable way to extract structural design motifs for empirical studies of architecture and evolution, supports researchers investigating the impact of design on developer coordination and quality, and offers practitioners a bytecode-based tool for discovering decoupling structures and potential refactor targets across large JVM codebases; limitations around custom containers and deep inter-procedural cases highlight areas for future refinement."
        }
      },
      "tags": [
        "program-analysis",
        "dataset-and-tooling",
        "case-study"
      ],
      "booktitle": "Proceedings of the 7th International Working Conference on Mining Software Repositories, MSR 2010 (Co-located with ICSE), Cape Town, South Africa, May 2-3, 2010, Proceedings",
      "publisher": "IEEE Computer Society",
      "pages": "122--125",
      "doi": "10.1109/MSR.2010.5463349",
      "url": "https://doi.org/10.1109/MSR.2010.5463349",
      "editor": "Jim Whitehead and Thomas Zimmermann",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/PosnettBD10,\n  author       = {Daryl Posnett and\n                  Christian Bird and\n                  Premkumar T. Devanbu},\n  editor       = {Jim Whitehead and\n                  Thomas Zimmermann},\n  title        = {{THEX:} Mining metapatterns from java},\n  booktitle    = {Proceedings of the 7th International Working Conference on Mining\n                  Software Repositories, {MSR} 2010 (Co-located with ICSE), Cape Town,\n                  South Africa, May 2-3, 2010, Proceedings},\n  pages        = {122--125},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2010},\n  url          = {https://doi.org/10.1109/MSR.2010.5463349},\n  doi          = {10.1109/MSR.2010.5463349},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/PosnettBD10.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/msr/NiaBDF10": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Validity of network analyses in Open Source Projects",
      "authors": "Roozbeh Nia and Christian Bird and Premkumar T. Devanbu and Vladimir Filkov",
      "year": "2010",
      "venue": "Proceedings of the 7th International Working Conference on Mining\n                  Software Repositories, {MSR",
      "mapped_pdf": "nia2010vna.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Quantitatively evaluates how temporal aggregation (transitive faults) and missing links in mailing-list reply-to networks affect common social network metrics in three OSS projects and finds those metrics are largely robust.",
        "details": {
          "topic": "Validity of social network analysis on open-source mailing-list data",
          "problem": "Network metrics computed from reply-to email archives may be distorted by temporal aggregation (causing spurious inferred information flow) and by unobserved/missing links, raising questions about the validity of SNA-based findings.",
          "approach": "The authors mined reply-to email archives from three OSS projects (Apache, Perl, MySQL), built directed information-flow networks, varied aggregation intervals from 1 hour to project lifespan to measure 'transitive faults' (2-paths with decreasing timestamps), and evaluated metric stability (number of 2-paths, betweenness, clustering) via Spearman rank correlations; they also simulated missing links using three models (Time Window, Erdős–Rényi, Preferential Attachment) with Monte Carlo trials and measured changes in top-10% node rankings.",
          "key_insights": [
            "Transitive faults can be common (worst-case ≈ 50%) and increase with aggregation, but node rankings based on 2-path counts remain highly correlated with and without those faults for non-trivial aggregation intervals.",
            "Augmenting networks with many 'missing' edges under Time Window, ER, and PA models does not substantially change top-ranked nodes by betweenness or clustering (high Spearman correlations), i.e., those metrics are robust to modeled missing links.",
            "Stability depends on activity density and time-window choice: very small aggregation intervals and sparse projects (e.g., MySQL at hourly granularity) reduce stability, so selection of epoch size and per-project robustness checks matter."
          ],
          "implications": "The results give empirical support that commonly used SNA measures (clustering coefficient, 2-path counts, betweenness) can be resilient to realistic data deficiencies in mailing-list–derived OSS networks, so prior and future studies using these metrics can have greater confidence—but researchers should still validate metric robustness for their specific data, remember that metric stability does not guarantee task utility, and apply the authors' transitive-fault and augmentation tests when feasible."
        }
      },
      "tags": [
        "developer-social-networks",
        "network-analysis",
        "open-source-software",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 7th International Working Conference on Mining Software Repositories, MSR 2010 (Co-located with ICSE), Cape Town, South Africa, May 2-3, 2010, Proceedings",
      "publisher": "IEEE Computer Society",
      "pages": "201--209",
      "doi": "10.1109/MSR.2010.5463342",
      "url": "https://doi.org/10.1109/MSR.2010.5463342",
      "editor": "Jim Whitehead and Thomas Zimmermann",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/NiaBDF10,\n  author       = {Roozbeh Nia and\n                  Christian Bird and\n                  Premkumar T. Devanbu and\n                  Vladimir Filkov},\n  editor       = {Jim Whitehead and\n                  Thomas Zimmermann},\n  title        = {Validity of network analyses in Open Source Projects},\n  booktitle    = {Proceedings of the 7th International Working Conference on Mining\n                  Software Repositories, {MSR} 2010 (Co-located with ICSE), Cape Town,\n                  South Africa, May 2-3, 2010, Proceedings},\n  pages        = {201--209},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2010},\n  url          = {https://doi.org/10.1109/MSR.2010.5463342},\n  doi          = {10.1109/MSR.2010.5463342},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/NiaBDF10.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/BarrBHMR10": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "On the shoulders of giants",
      "authors": "Earl T. Barr and Christian Bird and Eric Hyatt and Tim Menzies and Gregorio Robles",
      "year": "2010",
      "venue": "Proceedings of the Workshop on Future of Software Engineering Research,\n                  FoSER 2010, at the 18th {ACM",
      "mapped_pdf": "barr2010sg.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Argues that software engineering research should facilitate broader sharing of data and tools to improve reproducibility, reduce redundant work, and accelerate innovation, and proposes practical mechanisms (partial sharing, registry, escrow, market) plus standards and hosting options to mitigate costs and risks.",
        "details": {
          "topic": "Data and tool sharing / reproducibility in software engineering",
          "problem": "Although sharing of methods is expected, researchers rarely publish the raw data and usable tools needed for replication because preparing artifacts is costly and risks being scooped, which hinders replication, reuse, and faster progress in the field.",
          "approach": "A position and analysis paper: reviews the current state (citing empirical audits like Robles' MSR replication study), compares practices in other fields, catalogs costs and benefits of sharing, and proposes concrete, practical mechanisms (partial sharing, public registry, escrow with embargo, market-based access), plus standards and hosting suggestions and discussion of IP/sanitization issues.",
          "key_insights": [
            "Actual sharing is rare and replication is therefore difficult—e.g., only a tiny fraction of MSR experimental papers provided data/tools for replication.",
            "Researchers' main barriers are the cost of preparing usable artifacts and the risk of losing publication opportunities; these are real but addressable.",
            "Incremental and mixed solutions (binary-only or restricted analysis, public registries, escrow with timed release, or paid-access markets) can balance societal benefit and individual incentives.",
            "Standards for packaging (VMs, compendia), reliable hosting, and clear policies from publishers/funders materially reduce friction and increase the impact of shared artifacts."
          ],
          "implications": "Adopting the proposed mechanisms and policies could increase confidence in empirical results, lower barriers to entry for new researchers, reduce duplicated effort, and promote evidence-based software engineering and technology transfer; doing so will require community decisions on embargo lengths, hosting responsibilities, formats, IP handling, and further research into effective V&V and sanitization practices."
        }
      },
      "tags": [
        "dataset-and-tooling",
        "tool-adoption-and-trust"
      ],
      "booktitle": "Proceedings of the Workshop on Future of Software Engineering Research, FoSER 2010, at the 18th ACM SIGSOFT International Symposium on Foundations of Software Engineering, 2010, Santa Fe, NM, USA, November 7-11, 2010",
      "publisher": "ACM",
      "pages": "23--28",
      "doi": "10.1145/1882362.1882368",
      "url": "https://doi.org/10.1145/1882362.1882368",
      "editor": "Gruia-Catalin Roman and Kevin J. Sullivan",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/BarrBHMR10,\n  author       = {Earl T. Barr and\n                  Christian Bird and\n                  Eric Hyatt and\n                  Tim Menzies and\n                  Gregorio Robles},\n  editor       = {Gruia{-}Catalin Roman and\n                  Kevin J. Sullivan},\n  title        = {On the shoulders of giants},\n  booktitle    = {Proceedings of the Workshop on Future of Software Engineering Research,\n                  FoSER 2010, at the 18th {ACM} {SIGSOFT} International Symposium on\n                  Foundations of Software Engineering, 2010, Santa Fe, NM, USA, November\n                  7-11, 2010},\n  pages        = {23--28},\n  publisher    = {{ACM}},\n  year         = {2010},\n  url          = {https://doi.org/10.1145/1882362.1882368},\n  doi          = {10.1145/1882362.1882368},\n  timestamp    = {Wed, 07 Dec 2022 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/BarrBHMR10.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/BachmannBRDB10": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "The missing links: bugs and bug-fix commits",
      "authors": "Adrian Bachmann and Christian Bird and Foyzur Rahman and Premkumar T. Devanbu and Abraham Bernstein",
      "year": "2010",
      "venue": "Proceedings of the 18th {ACM",
      "mapped_pdf": "bachmann2010mlb.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Empirically evaluates the correctness and bias of automated links between bug reports and commits by manually annotating 493 Apache commits with a tool (Linkster), revealing many unlinked bug-fixes and developer-driven linking bias that can distort research and prediction models.",
        "details": {
          "topic": "Bias and data quality in bug-report-to-commit linking",
          "problem": "Studies that rely on automatically linking bug reports to source-code commits assume those links are complete and representative, but developers do not always record bug-fix references in commit logs and project practices (mailing lists, backports, cross-project fixes) may hide or misattribute fixes, producing biased and incomplete datasets.",
          "approach": "Built Linkster to support manual reverse-engineering of links, engaged an Apache core developer to exhaustively annotate all commits in a representative six-week period (493 commits), compared manual annotations to an automated linking algorithm, analyzed sources of missing links (mailing lists, backports, cross-project fixes), and evaluated effects of linking bias on a defect-prediction algorithm (BugCache).",
          "key_insights": [
            "Many bug fixes are not recorded in the bug tracker: a substantial fraction are discussed only on mailing lists or not documented anywhere, so automated linking misses important fixes.",
            "Automated heuristics reliably find explicit bug-ID references in commit messages but suffer false-negatives due to time-window constraints, backports, and absent references.",
            "Developers vary significantly in whether they link commits to bug reports, and factors like experience, ownership, and size of change appear to influence linking behavior, producing commit-feature bias.",
            "Linking bias materially affects downstream tools (e.g., BugCache): adding manually discovered fixes changes prediction accuracy and can both reveal and improve predictive performance."
          ],
          "implications": "Researchers and practitioners should treat linked bug-commit datasets as incomplete and potentially biased: studies using them need validation against ground truth, tooling should ingest additional sources (mailing lists, cross-project trackers) and support manual annotation, and defect-prediction or empirical conclusions must account for reporting and commit-feature bias or risk invalid inferences."
        }
      },
      "tags": [
        "repository-mining",
        "defect-prediction-and-quality",
        "dataset-and-tooling"
      ],
      "booktitle": "Proceedings of the 18th ACM SIGSOFT International Symposium on Foundations of Software Engineering, 2010, Santa Fe, NM, USA, November 7-11, 2010",
      "publisher": "ACM",
      "pages": "97--106",
      "doi": "10.1145/1882291.1882308",
      "url": "https://doi.org/10.1145/1882291.1882308",
      "editor": "Gruia-Catalin Roman and André van der Hoek",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/BachmannBRDB10,\n  author       = {Adrian Bachmann and\n                  Christian Bird and\n                  Foyzur Rahman and\n                  Premkumar T. Devanbu and\n                  Abraham Bernstein},\n  editor       = {Gruia{-}Catalin Roman and\n                  Andr{\\'{e}} van der Hoek},\n  title        = {The missing links: bugs and bug-fix commits},\n  booktitle    = {Proceedings of the 18th {ACM} {SIGSOFT} International Symposium on\n                  Foundations of Software Engineering, 2010, Santa Fe, NM, USA, November\n                  7-11, 2010},\n  pages        = {97--106},\n  publisher    = {{ACM}},\n  year         = {2010},\n  url          = {https://doi.org/10.1145/1882291.1882308},\n  doi          = {10.1145/1882291.1882308},\n  timestamp    = {Tue, 01 Feb 2022 10:45:16 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/BachmannBRDB10.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/BirdBRB10": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "LINKSTER: enabling efficient manual inspection and annotation of mined data",
      "authors": "Christian Bird and Adrian Bachmann and Foyzur Rahman and Abraham Bernstein",
      "year": "2010",
      "venue": "Proceedings of the 18th {ACM",
      "mapped_pdf": "bird2010lee.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "LINKSTER is a Python/PyQt tool that integrates source code repositories, mailing lists, and bug trackers to make manual inspection, linking, and annotation of mined software engineering data faster and more practical.",
        "details": {
          "topic": "Manual inspection and annotation of mined software engineering data",
          "problem": "Manual inspection and labeling of mined software engineering artifacts is time-consuming, error-prone, and awkward because data necessary for understanding changes (commits, blame history, mailing-list discussion, and bug reports) live in separate systems and existing tooling focuses on automated mining rather than manual annotation.",
          "approach": "The authors implemented LINKSTER, a desktop application (Python + PyQt) that connects to a repository and a database containing mined repository, mailing-list, and bug-tracking records; it presents synchronized commit, blame/diff, bug, and email views, supports drag-and-drop linking and structured/free-form annotations, records annotations back to the database, and was evaluated via usage in real work (an Apache developer annotated 677 commits in one day) and use in empirical studies.",
          "key_insights": [
            "Integrating multiple artifacts (commits, blame, bug reports, emails) in a single interactive UI substantially reduces the friction of manual linking and annotation.",
            "Synchronized blame/diff views and per-line provenance make it practical to identify bug-introducing commits and annotate their status (guilty/innocent/unsure), improving label quality for studies.",
            "Drag-and-drop linking and stored annotations enable faster, repeatable manual curation that complements automatic heuristics and supports evaluation of those heuristics.",
            "The tool scales to substantial manual effort (example: 677 commits linked/annotated in one day), indicating manual methods become feasible when supported by appropriate tooling."
          ],
          "implications": "Providing an integrated, annotation-friendly environment lowers the cost of producing high-quality labeled datasets, helps researchers validate and refine heuristic or predictive methods, enables more accurate empirical studies of development processes, and gives practitioners a practical way to inspect historical changes and create curated provenance that can feed tools or training data."
        }
      },
      "tags": [
        "dataset-and-tooling",
        "repository-mining",
        "field-deployment"
      ],
      "booktitle": "Proceedings of the 18th ACM SIGSOFT International Symposium on Foundations of Software Engineering, 2010, Santa Fe, NM, USA, November 7-11, 2010",
      "publisher": "ACM",
      "pages": "369--370",
      "doi": "10.1145/1882291.1882352",
      "url": "https://doi.org/10.1145/1882291.1882352",
      "editor": "Gruia-Catalin Roman and André van der Hoek",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/BirdBRB10,\n  author       = {Christian Bird and\n                  Adrian Bachmann and\n                  Foyzur Rahman and\n                  Abraham Bernstein},\n  editor       = {Gruia{-}Catalin Roman and\n                  Andr{\\'{e}} van der Hoek},\n  title        = {{LINKSTER:} enabling efficient manual inspection and annotation of\n                  mined data},\n  booktitle    = {Proceedings of the 18th {ACM} {SIGSOFT} International Symposium on\n                  Foundations of Software Engineering, 2010, Santa Fe, NM, USA, November\n                  7-11, 2010},\n  pages        = {369--370},\n  publisher    = {{ACM}},\n  year         = {2010},\n  url          = {https://doi.org/10.1145/1882291.1882352},\n  doi          = {10.1145/1882291.1882352},\n  timestamp    = {Tue, 06 Nov 2018 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/BirdBRB10.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/icse/BirdNDGM09": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Does distributed development affect software quality? An empirical case study of Windows Vista",
      "authors": "Christian Bird and Nachiappan Nagappan and Premkumar T. Devanbu and Harald C. Gall and Brendan Murphy",
      "year": "2009",
      "venue": "31st International Conference on Software Engineering, {ICSE",
      "mapped_pdf": "bird2009dddb.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "An empirical study of Windows Vista shows that geographically distributed in-house development had little to no effect on post-release failure rates once team size and other factors are controlled.",
        "details": {
          "topic": "Geographically distributed software development and software quality",
          "problem": "Conventional wisdom holds that geographically distributed teams produce lower-quality software (more post-release failures) than collocated teams; the study asks whether distribution within a single company increases post-release failures and whether distributed components differ in complexity or other characteristics.",
          "approach": "The authors analyzed development and post-release data from Windows Vista: thousands of binaries and developers, commit locations (59 buildings, 21 campuses across continents), and six months of post-release failure records. Binaries were categorized by geographic dispersion (building → world) using commit shares (75% threshold for level assignment) and also binarized into distributed vs collocated at multiple levels. They computed code metrics (size, complexity, churn, dependencies, test coverage), team metrics (number of developers, ownership), performed manual inspections, and applied statistical tests (Mann–Whitney, Spearman correlations, logistic and linear regression) including models that control for number of developers.",
          "key_insights": [
            "Distributed binaries had only a small raw increase in failures (~8–10%), and that effect largely disappears or becomes negligible when controlling for the number of developers on a binary.",
            "Component characteristics (complexity, churn, dependencies, test coverage) were very similar between distributed and collocated binaries; managers did not systematically assign simpler or less critical components to distributed teams.",
            "Organizational practices—shared tools/processes, strong code ownership, common schedules, liaisons and travel, and organizational integration across sites—likely mitigated many pitfalls of geographic distribution.",
            "Organizational distribution matters more than geographic distribution: how work is organized and owned is a stronger predictor of post-release defects than physical location."
          ],
          "implications": "For researchers: distribution alone is not a reliable predictor of post-release defects—future work should isolate causal mechanisms and test generalizability beyond single-company, in-house projects. For practitioners and managers: in-house global development can achieve collocated-quality outcomes by investing in common tools and processes, clear end-to-end ownership, frequent synchronous communication (rotating schedules/liaisons/travel), and organizational integration; also monitor team size and coordination overhead since they drive much of the observed quality differences."
        }
      },
      "tags": [
        "repository-mining",
        "defect-prediction-and-quality",
        "engineering-management",
        "statistical-analysis"
      ],
      "booktitle": "31st International Conference on Software Engineering, ICSE 2009, May 16-24, 2009, Vancouver, Canada, Proceedings",
      "publisher": "IEEE",
      "pages": "518--528",
      "doi": "10.1109/ICSE.2009.5070550",
      "url": "https://doi.org/10.1109/ICSE.2009.5070550",
      "raw_bibtex": "@inproceedings{DBLP:conf/icse/BirdNDGM09,\n  author       = {Christian Bird and\n                  Nachiappan Nagappan and\n                  Premkumar T. Devanbu and\n                  Harald C. Gall and\n                  Brendan Murphy},\n  title        = {Does distributed development affect software quality? An empirical\n                  case study of Windows Vista},\n  booktitle    = {31st International Conference on Software Engineering, {ICSE} 2009,\n                  May 16-24, 2009, Vancouver, Canada, Proceedings},\n  pages        = {518--528},\n  publisher    = {{IEEE}},\n  year         = {2009},\n  url          = {https://doi.org/10.1109/ICSE.2009.5070550},\n  doi          = {10.1109/ICSE.2009.5070550},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/icse/BirdNDGM09.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}",
      "awards": [
        "ACM Distinguished Paper"
      ]
    },
    "DBLP:conf/issre/BirdNGMD09": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Putting It All Together: Using Socio-technical Networks to Predict Failures",
      "authors": "Christian Bird and Nachiappan Nagappan and Harald C. Gall and Brendan Murphy and Premkumar T. Devanbu",
      "year": "2009",
      "venue": "{ISSRE",
      "mapped_pdf": "bird2009pat.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Combining developer contribution and code dependency information into a single socio-technical network yields substantially better prediction of which software components will have post-release failures.",
        "details": {
          "topic": "Socio-technical networks for software defect prediction",
          "problem": "Identifying which components are likely to fail after release is expensive and prior automated predictors used either code dependency structure or developer-contribution data in isolation, missing interactions between who works on what and how components depend on each other.",
          "approach": "The authors build three graph views (dependency network, developer contribution bipartite network, and a merged socio-technical network) for binaries/plugins, compute a range of social-network metrics (e.g., betweenness, degree, closeness, eigenvector, structural-hole and ego measures, weighted/unweighted variants), apply PCA to address multicollinearity, and train logistic regression models to predict post-release failure-proneness. They evaluate on Windows Vista (thousands of binaries) and six releases of Eclipse (plugins), using repeated random train/test splits and cross-release prediction, and report precision, recall, F-score, AUC and Nagelkerke R^2.",
          "key_insights": [
            "Network measures computed on the combined socio-technical graph correlate with post-release failures more strongly than measures from dependency-only or contribution-only graphs.",
            "Prediction models using socio-technical (or combined) metrics consistently achieve higher precision, recall and F-scores (precision/recall up to ~85% in some releases) than prior single-view approaches across both Windows Vista and Eclipse.",
            "Models trained on one release can be used to predict fault-prone components in the next release when metrics are standardized, showing practical applicability for release-to-release risk prediction."
          ],
          "implications": "For researchers: socio-technical topology is a valuable signal beyond traditional code metrics and should be incorporated into defect-prediction models; for practitioners and developers: using combined developer–dependency graphs lets teams better prioritize testing, code review and resource allocation (including training or coordination interventions), and models can be trained on past releases to prospectively identify high-risk components in new releases."
        }
      },
      "tags": [
        "defect-prediction-and-quality",
        "network-analysis",
        "repository-mining"
      ],
      "booktitle": "ISSRE 2009, 20th International Symposium on Software Reliability Engineering, Mysuru, Karnataka, India, 16-19 November 2009",
      "publisher": "IEEE Computer Society",
      "pages": "109--119",
      "doi": "10.1109/ISSRE.2009.17",
      "url": "https://doi.org/10.1109/ISSRE.2009.17",
      "raw_bibtex": "@inproceedings{DBLP:conf/issre/BirdNGMD09,\n  author       = {Christian Bird and\n                  Nachiappan Nagappan and\n                  Harald C. Gall and\n                  Brendan Murphy and\n                  Premkumar T. Devanbu},\n  title        = {Putting It All Together: Using Socio-technical Networks to Predict\n                  Failures},\n  booktitle    = {{ISSRE} 2009, 20th International Symposium on Software Reliability\n                  Engineering, Mysuru, Karnataka, India, 16-19 November 2009},\n  pages        = {109--119},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2009},\n  url          = {https://doi.org/10.1109/ISSRE.2009.17},\n  doi          = {10.1109/ISSRE.2009.17},\n  timestamp    = {Fri, 24 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/issre/BirdNGMD09.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}",
      "awards": [
        "30 Year Highlight (26 most influential papers in the past 30 years)"
      ]
    },
    "DBLP:conf/msr/BirdRBHGD09": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "The promises and perils of mining git",
      "authors": "Christian Bird and Peter C. Rigby and Earl T. Barr and David J. Hamilton and Daniel M. Germán and Premkumar T. Devanbu",
      "year": "2009",
      "venue": "Proceedings of the 6th International Working Conference on Mining\n                  Software Repositories, {MSR",
      "mapped_pdf": "bird2009ppm.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "The paper catalogs the opportunities and risks of mining git (a decentralized SCM), showing git yields richer provenance and author data but requires careful, DAG-aware methods because history can be reordered, hidden, or lost.",
        "details": {
          "topic": "Mining decentralized version control (git) for software engineering research",
          "problem": "Decentralized source control (git) produces richer and different kinds of repository data than centralized SCMs (like SVN), and researchers risk misinterpreting commits, branches, merges and attribution unless they understand git's semantics and workflows.",
          "approach": "The authors compare conceptual differences between git and SVN, enumerate promises and perils of mining git (e.g., implicit branches, rebasing, fast-forward merges, private logs), demonstrate empirical analyses on multiple projects (including a 30-project sample and case studies such as Linux and Ruby on Rails), measure heuristic recall for detecting merge sources, analyze author/sign-off networks, examine commit-size changes after migration, and provide tools and practical guidance for mining git repositories.",
          "key_insights": [
            "Git enables recovery of richer history (implicit and explicit branches, merges, authorship, signed-off-by metadata, and content movement) and better origin/lineage tracking (e.g., git blame -C -M).",
            "Decentralization creates mining perils: history can be rewritten by rebasing, merges can be hidden by fast-forward or flattened histories, branch origin is often unrecorded, and public clones may miss private developer logs or destroyed branches.",
            "Practical heuristics and mining of multiple repositories (and, when available, private logs) can recover most merge/source information (the authors report ~97.9% recall on 2,971 merges), but some information loss is unavoidable.",
            "Git offers performance and storage benefits and simplifies migration from other SCMs, making large-scale analysis more feasible, but analysts must adopt DAG-aware methods rather than assuming a linear mainline."
          ],
          "implications": "Researchers and practitioners should adapt analysis tools and models to git's DAG-based, decentralized semantics: mine multiple developer repositories (or private logs) when possible, use heuristics to infer merges and provenance while reporting uncertainty, account for rebasing and fast-forward behaviors, and leverage git's richer attribution and content-tracking to study roles, workflows, and provenance but be cautious about drawing conclusions from single repository snapshots."
        }
      },
      "tags": [
        "repository-mining",
        "version-control-and-branching",
        "open-source-software"
      ],
      "booktitle": "Proceedings of the 6th International Working Conference on Mining Software Repositories, MSR 2009 (Co-located with ICSE), Vancouver, BC, Canada, May 16-17, 2009, Proceedings",
      "publisher": "IEEE Computer Society",
      "pages": "1--10",
      "doi": "10.1109/MSR.2009.5069475",
      "url": "https://doi.org/10.1109/MSR.2009.5069475",
      "editor": "Michael W. Godfrey and Jim Whitehead",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/BirdRBHGD09,\n  author       = {Christian Bird and\n                  Peter C. Rigby and\n                  Earl T. Barr and\n                  David J. Hamilton and\n                  Daniel M. Germ{\\'{a}}n and\n                  Premkumar T. Devanbu},\n  editor       = {Michael W. Godfrey and\n                  Jim Whitehead},\n  title        = {The promises and perils of mining git},\n  booktitle    = {Proceedings of the 6th International Working Conference on Mining\n                  Software Repositories, {MSR} 2009 (Co-located with ICSE), Vancouver,\n                  BC, Canada, May 16-17, 2009, Proceedings},\n  pages        = {1--10},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2009},\n  url          = {https://doi.org/10.1109/MSR.2009.5069475},\n  doi          = {10.1109/MSR.2009.5069475},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/BirdRBHGD09.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}",
      "awards": [
        "Most Influential Paper Award (10 years)"
      ]
    },
    "DBLP:conf/sdm/BirdBN09": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Structure and Dynamics of Research Collaboration in Computer Science",
      "authors": "Christian Bird and Earl T. Barr and Andre Nash and Premkumar T. Devanbu and Vladimir Filkov and Zhendong Su",
      "year": "2009",
      "venue": "Proceedings of the {SIAM",
      "mapped_pdf": "bird2009sdr.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Analyzes DBLP-derived collaboration networks across computer science subareas with network-science methods to quantify differences in interdisciplinarity, community structure, centralization, author overlap and migration over time.",
        "details": {
          "topic": "Research collaboration networks in computer science",
          "problem": "Informal beliefs exist about how different CS subareas collaborate and interact (e.g., which are interdisciplinary, which are centralized or fragmented), but there is little quantitative, longitudinal evidence to compare areas or to track migration and overlap of researchers.",
          "approach": "The authors parsed a Feb 2008 DBLP dump, mapped first-tier conferences to predefined CS subareas, cleaned author names, and built temporal collaboration graphs. They applied network measures (degree distributions, assortativity and a proposed longitudinal assortativity, betweenness centrality and graph-level centralization, modularity-based community detection), PCA on author publication profiles to quantify interdisciplinarity, and asymmetric overlap and migration metrics to study area-to-area author movement and co-publication patterns over time.",
          "key_insights": [
            "Collaboration graphs across subareas are long-tailed/scale-free and similar in degree distribution, so degree alone is not discriminative of subarea style.",
            "Interdisciplinarity and integration vary strongly: systems, data mining (e.g., SDM) and software engineering (e.g., ICSE) attract broadly interdisciplinary authors, while theory and cryptography (e.g., FOCS/STOC/CRYPTO) are more tightly integrated and less interdisciplinary.",
            "Community and centralization patterns differ: many areas show early pioneer-dominated centralization followed by diffusion, but security (SEC) exhibits rapidly increasing betweenness centralization dominated by a few researchers/institution(s); conversely databases and theory are more integrated (low modularity) while software engineering is surprisingly fragmented (higher modularity).",
            "Longitudinal overlap and migration reveal directional ties between areas (e.g., DB→AI increases, PL→NET flows), confirming folklore about area convergence and exposing which pairs of areas share or exchange authors."
          ],
          "implications": "Provides quantitative diagnostics for the health and structure of CS subfields useful to researchers choosing fields, to departments and students assessing collaboration styles, and to funders or program organizers designing interventions; highlights potential concerns (high centralization in security, high assortativity in cryptography) that may merit outreach, mentoring, or policy actions; and offers methods (longitudinal assortativity, asymmetric overlap, PCA-based interdisciplinarity) for ongoing monitoring and comparative studies."
        }
      },
      "tags": [
        "developer-social-networks",
        "network-analysis",
        "repository-mining",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the SIAM International Conference on Data Mining, SDM 2009, April 30 - May 2, 2009, Sparks, Nevada, USA",
      "publisher": "SIAM",
      "pages": "826--837",
      "doi": "10.1137/1.9781611972795.71",
      "url": "https://doi.org/10.1137/1.9781611972795.71",
      "raw_bibtex": "@inproceedings{DBLP:conf/sdm/BirdBN09,\n  author       = {Christian Bird and\n                  Earl T. Barr and\n                  Andre Nash and\n                  Premkumar T. Devanbu and\n                  Vladimir Filkov and\n                  Zhendong Su},\n  title        = {Structure and Dynamics of Research Collaboration in Computer Science},\n  booktitle    = {Proceedings of the {SIAM} International Conference on Data Mining,\n                  {SDM} 2009, April 30 - May 2, 2009, Sparks, Nevada, {USA}},\n  pages        = {826--837},\n  publisher    = {{SIAM}},\n  year         = {2009},\n  url          = {https://doi.org/10.1137/1.9781611972795.71},\n  doi          = {10.1137/1.9781611972795.71},\n  timestamp    = {Tue, 30 Nov 2021 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/sdm/BirdBN09.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/BirdBADBFD09": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Fair and balanced?: bias in bug-fix datasets",
      "authors": "Christian Bird and Adrian Bachmann and Eirik Aune and John Duffy and Abraham Bernstein and Vladimir Filkov and Premkumar T. Devanbu",
      "year": "2009",
      "venue": "Proceedings of the 7th joint meeting of the European Software Engineering\n                  Conference and the {ACM",
      "mapped_pdf": "bird2009fbb.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Empirical bug-fix datasets extracted from version control and bug trackers are systematically biased (over- or under-representing certain bug types, fixers, and process attributes), and that bias can degrade the validity of hypothesis tests and the performance of defect-prediction models.",
        "details": {
          "topic": "Bias and data quality in bug-fix/defect datasets",
          "problem": "Researchers and tools rely on historical bug-fix records linked between bug trackers and source-control commits, but only a subset of actual bug fixes are linked; if the linked subset is unrepresentative, conclusions and predictive models built from it may be invalid or perform poorly.",
          "approach": "The authors mined and linked SCM and bug-tracker data for multiple open-source projects (Eclipse variants, Apache, NetBeans, OpenOffice, Gnome, AspectJ), improved pattern-matching of commit messages to bug IDs with manual validation, defined formal notions of 'bug feature bias' and 'commit feature bias', ran statistical tests (χ², Fisher exact, Kolmogorov–Smirnov) to detect bias over features (severity, fixer experience, verification, etc.), and evaluated the impact of observed bias by training/testing the BugCache defect predictor on intentionally biased sub-samples.",
          "key_insights": [
            "Strong, repeatable bug-feature bias: linked fixes tend to over-represent less-severe bugs and fixes by more experienced closers and are more likely to be verified in several projects (statistically significant across datasets).",
            "Bias is dataset-specific: AspectJ's linked set showed little bias because most fixes were closed by a few disciplined developers who linked consistently.",
            "Commit-feature bias (bias in the originating commits identified by blame) cannot be determined automatically without expensive post-hoc effort, limiting full bias assessment.",
            "Defect-prediction performance (tested with BugCache) is affected by training-set bias: models trained on samples biased toward particular severities or closers perform better on similar bug types and worse on under-represented types."
          ],
          "implications": "Biased linked bug-fix datasets threaten the external validity of empirical findings and the generalizability and fairness of automated defect predictors; practitioners and researchers should (a) treat linked datasets cautiously, (b) improve linking practices or curate unbiased or corrected samples (manual linking, enforced tooling), and (c) develop and apply bias-correction or robust modelling techniques (simulation, joint models of linking and defect occurrence) before drawing conclusions or deploying predictors."
        }
      },
      "tags": [
        "defect-prediction-and-quality",
        "repository-mining",
        "statistical-analysis",
        "dataset-and-tooling"
      ],
      "booktitle": "Proceedings of the 7th joint meeting of the European Software Engineering Conference and the ACM SIGSOFT International Symposium on Foundations of Software Engineering, 2009, Amsterdam, The Netherlands, August 24-28, 2009",
      "publisher": "ACM",
      "pages": "121--130",
      "doi": "10.1145/1595696.1595716",
      "url": "https://doi.org/10.1145/1595696.1595716",
      "editor": "Hans van Vliet and Valérie Issarny",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/BirdBADBFD09,\n  author       = {Christian Bird and\n                  Adrian Bachmann and\n                  Eirik Aune and\n                  John Duffy and\n                  Abraham Bernstein and\n                  Vladimir Filkov and\n                  Premkumar T. Devanbu},\n  editor       = {Hans van Vliet and\n                  Val{\\'{e}}rie Issarny},\n  title        = {Fair and balanced?: bias in bug-fix datasets},\n  booktitle    = {Proceedings of the 7th joint meeting of the European Software Engineering\n                  Conference and the {ACM} {SIGSOFT} International Symposium on Foundations\n                  of Software Engineering, 2009, Amsterdam, The Netherlands, August\n                  24-28, 2009},\n  pages        = {121--130},\n  publisher    = {{ACM}},\n  year         = {2009},\n  url          = {https://doi.org/10.1145/1595696.1595716},\n  doi          = {10.1145/1595696.1595716},\n  timestamp    = {Tue, 01 Feb 2022 10:45:16 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/BirdBADBFD09.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}",
      "awards": [
        "Test of Time Award (10 years)"
      ]
    },
    "DBLP:conf/msr/PattisonBD08": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Talk and work: a preliminary report",
      "authors": "David S. Pattison and Christian Bird and Premkumar T. Devanbu",
      "year": "2008",
      "venue": "Proceedings of the 2008 International Working Conference on Mining\n                  Software Repositories, {MSR",
      "mapped_pdf": "pattison2008twp.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Mining four open-source projects, the authors show a strong cumulative correlation between how often software entities are mentioned in developer mailing-list emails and how often they are modified in the repository, but that correlation is much weaker when measured over short (three-month) intervals.",
        "details": {
          "topic": "Developer communication vs. code changes in open-source software",
          "problem": "Do the amount of discussions about software entities (functions, methods, classes) remain independent of how much those entities are used or changed, and how does the relationship between discussion and code change behave over time?",
          "approach": "The authors mined version-control hunks and archived mailing-list messages from four OSS projects (Ant, Apache, Postgres, Python); extracted software entity names (keyterms) using a static-analysis tool; filtered out email patches; counted keyterm occurrences in hunks and emails; applied frequency culling; and analyzed correlations between talk (email mentions) and work (hunk mentions) both cumulatively over each project's lifetime and across successive three-month intervals.",
          "key_insights": [
            "Cumulatively over a project's life there is a striking, consistent positive correlation across projects: keyterms that appear more often in code changes are also mentioned more often in mailing-list discussions.",
            "When analyzed in three-month intervals the talk–work correlation weakens substantially and varies by project (stronger in Ant and Python, weaker in Apache and Postgres), indicating temporal mismatch between discussion and change activity.",
            "A plausible explanation is that important functions receive concentrated design/discussion early (or conversely receive discussion later if initially under-reviewed), producing strong cumulative correlation even when short-term correlations are inconsistent."
          ],
          "implications": "For researchers and practitioners, email mention counts can be a useful cumulative indicator of which software entities attract attention or risk, but short-term analysis must account for temporal shifts; the results suggest the value of early design discussion and documentation to reduce later coordination costs and imply that temporal granularity matters when using communication data to predict or prioritize maintenance effort."
        }
      },
      "tags": [
        "repository-mining",
        "open-source-software",
        "developer-social-networks",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 2008 International Working Conference on Mining Software Repositories, MSR 2008 (Co-located with ICSE), Leipzig, Germany, May 10-11, 2008, Proceedings",
      "publisher": "ACM",
      "pages": "113--116",
      "doi": "10.1145/1370750.1370776",
      "url": "https://doi.org/10.1145/1370750.1370776",
      "editor": "Ahmed E. Hassan and Michele Lanza and Michael W. Godfrey",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/PattisonBD08,\n  author       = {David S. Pattison and\n                  Christian Bird and\n                  Premkumar T. Devanbu},\n  editor       = {Ahmed E. Hassan and\n                  Michele Lanza and\n                  Michael W. Godfrey},\n  title        = {Talk and work: a preliminary report},\n  booktitle    = {Proceedings of the 2008 International Working Conference on Mining\n                  Software Repositories, {MSR} 2008 (Co-located with ICSE), Leipzig,\n                  Germany, May 10-11, 2008, Proceedings},\n  pages        = {113--116},\n  publisher    = {{ACM}},\n  year         = {2008},\n  url          = {https://doi.org/10.1145/1370750.1370776},\n  doi          = {10.1145/1370750.1370776},\n  timestamp    = {Fri, 11 Jul 2025 17:36:18 +0200},\n  biburl       = {https://dblp.org/rec/conf/msr/PattisonBD08.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/BirdPDFD08": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Latent social structure in open source projects",
      "authors": "Christian Bird and David S. Pattison and Raissa M. D'Souza and Vladimir Filkov and Premkumar T. Devanbu",
      "year": "2008",
      "venue": "Proceedings of the 16th {ACM",
      "mapped_pdf": "bird2008lss.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Large, successful open-source projects self-organize into statistically significant latent subcommunities in their developer mailing-list networks, and these subcommunities are more pronounced in product-related discussions and correlate with actual code collaboration.",
        "details": {
          "topic": "Community structure in open-source developer networks",
          "problem": "Open source projects lack formal org charts, so it's unclear whether and how meaningful subgroups form, whether those subgroups relate to technical work, and how communication topics (product vs process) affect social structure.",
          "approach": "The authors mined developer mailing lists and version-control repositories for five mature projects (Apache HTTPD, Ant, Python, Perl, PostgreSQL), constructed weighted email social networks in 3-month windows, adapted Newman's modularity algorithm for weighted/multi-edge graphs, filtered high-betweenness 'manager' nodes, classified messages as product vs process via static code-term extraction, tested modularity significance against degree-preserving random graphs, and validated subcommunities against commit co-occurrence and directory-distance analyses plus manual case studies.",
          "key_insights": [
            "All studied projects exhibit strong, statistically significant community structure (modularity Q ≈ 0.4–0.8) versus randomized networks.",
            "Networks built from product-related messages are significantly more modular than those from process messages or all messages, indicating subcommunities center on technical/code topics.",
            "Developers within the same email-derived subcommunity tend to collaborate more (share more committed files) than developers from different subcommunities in four of five projects (Perl data inconclusive).",
            "Directory-distance analysis did not consistently show tighter localization of work within subcommunities, but case studies reveal both localized and cross-cutting task-focused groups."
          ],
          "implications": "For researchers: provides an empirical basis to study socio-technical congruence, subcommunity dynamics, and automated aspect-mining; for developers and project managers: suggests encouraging and supporting organic subcommunity formation (especially around product work), using social signals to find relevant collaborators or onboard newcomers, and leveraging social-network analysis to inform coordination and tooling (e.g., recommender systems); for practitioners: shows communication topic matters—broad participation suits process issues while technical tasks naturally cluster into smaller working groups."
        }
      },
      "tags": [
        "developer-social-networks",
        "open-source-software",
        "repository-mining",
        "network-analysis",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering, 2008, Atlanta, Georgia, USA, November 9-14, 2008",
      "publisher": "ACM",
      "pages": "24--35",
      "doi": "10.1145/1453101.1453107",
      "url": "https://doi.org/10.1145/1453101.1453107",
      "editor": "Mary Jean Harrold and Gail C. Murphy",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/BirdPDFD08,\n  author       = {Christian Bird and\n                  David S. Pattison and\n                  Raissa M. D'Souza and\n                  Vladimir Filkov and\n                  Premkumar T. Devanbu},\n  editor       = {Mary Jean Harrold and\n                  Gail C. Murphy},\n  title        = {Latent social structure in open source projects},\n  booktitle    = {Proceedings of the 16th {ACM} {SIGSOFT} International Symposium on\n                  Foundations of Software Engineering, 2008, Atlanta, Georgia, USA,\n                  November 9-14, 2008},\n  pages        = {24--35},\n  publisher    = {{ACM}},\n  year         = {2008},\n  url          = {https://doi.org/10.1145/1453101.1453107},\n  doi          = {10.1145/1453101.1453107},\n  timestamp    = {Tue, 01 Feb 2022 10:45:16 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/BirdPDFD08.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/apvis/OgawaMBDG07": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Visualizing social interaction in open source software projects",
      "authors": "Michael Ogawa and Kwan-Liu Ma and Christian Bird and Premkumar T. Devanbu and Alex Gourley",
      "year": "2007",
      "venue": "{APVIS",
      "mapped_pdf": "ogawa2007vsi.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "A visualization technique that clusters monthly email reply networks and uses a modified Sankey diagram linked to repository sparklines to reveal how social groups form, split, merge and relate to development activity in open-source projects.",
        "details": {
          "topic": "Visualization of evolving social networks in open-source software",
          "problem": "Open-source projects generate large, long-running email and repository histories; existing visualizations either show isolated snapshots or cluttered layers and do not emphasize how social groups transition over time or how communication relates to code changes.",
          "approach": "Construct monthly time-slice reply networks from mailing-list archives, cluster each timestep with the MCL algorithm, and display clusters as discretized nodes in a vertically flowing Sankey diagram whose edges show people moving between clusters; link that view to a file-repository view (CVS) with per-file sparklines showing edits and provide interactive selection, highlighting and message inspection; validate and explore the method via case studies of Apache and PostgreSQL email/repository archives.",
          "key_insights": [
            "A cluster-based Sankey representation emphasizes transitions (splits, merges, persistence) between social groups better than small-multiples or layered approaches and can reveal temporal dynamics across many timesteps at once.",
            "Case studies showed meaningful correspondences between communication structure and development events: Apache exhibited fragmentation during Apache 2.0 development followed by re-convergence at alpha release, while PostgreSQL displayed a stable core of persistent contributors with many casual posters aggregated into the core.",
            "Interactive linking of mailing-list clusters to repository sparklines and message headers enables rapid exploration of who worked on which files, when conversations were about particular features/releases, and how code and communication relate.",
            "The method exposes limitations: per-timestep (greedy) clustering can break temporal continuity and drawing many crossing flows raises scalability/layout challenges requiring improved ordering or edge-rendering strategies."
          ],
          "implications": "Researchers and project managers can use this technique to detect and interpret formation, fragmentation, and reassembly of developer communities, correlate communication bursts with releases or development milestones, and identify core vs. peripheral contributors; the approach is generalizable to other evolving networks but needs enhancements (smoother temporal clustering and improved layout/edge handling) for larger-scale datasets and automated event detection."
        }
      },
      "tags": [
        "developer-social-networks",
        "network-analysis",
        "open-source-software",
        "repository-mining"
      ],
      "booktitle": "APVIS 2007, 6th International Asia-Pacific Symposium on Visualization 2007, Sydney, Australia, 5-7 February 2007",
      "publisher": "IEEE Computer Society",
      "pages": "25--32",
      "doi": "10.1109/APVIS.2007.329305",
      "url": "https://doi.org/10.1109/APVIS.2007.329305",
      "editor": "Seok-Hee Hong and Kwan-Liu Ma",
      "raw_bibtex": "@inproceedings{DBLP:conf/apvis/OgawaMBDG07,\n  author       = {Michael Ogawa and\n                  Kwan{-}Liu Ma and\n                  Christian Bird and\n                  Premkumar T. Devanbu and\n                  Alex Gourley},\n  editor       = {Seok{-}Hee Hong and\n                  Kwan{-}Liu Ma},\n  title        = {Visualizing social interaction in open source software projects},\n  booktitle    = {{APVIS} 2007, 6th International Asia-Pacific Symposium on Visualization\n                  2007, Sydney, Australia, 5-7 February 2007},\n  pages        = {25--32},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2007},\n  url          = {https://doi.org/10.1109/APVIS.2007.329305},\n  doi          = {10.1109/APVIS.2007.329305},\n  timestamp    = {Thu, 27 Apr 2023 14:57:18 +0200},\n  biburl       = {https://dblp.org/rec/conf/apvis/OgawaMBDG07.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/msr/BirdGDSH07": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Open Borders? Immigration in Open Source Projects",
      "authors": "Christian Bird and Alex Gourley and Premkumar T. Devanbu and Anand Swaminathan and Greta Hsu",
      "year": "2007",
      "venue": "Fourth International Workshop on Mining Software Repositories, {MSR",
      "mapped_pdf": "bird2007qso.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Quantitatively analyzes how tenure, demonstrated technical contribution, and social status affect the timing and likelihood that mailing-list participants become committers in open-source projects using hazard-rate models on Apache, Postgres, and Python.",
        "details": {
          "topic": "Open-source project immigration / onboarding",
          "problem": "Volunteer-led projects must attract, evaluate and admit external contributors into the core developer group, but prior work is mostly qualitative and we lack statistical evidence about which behaviors (time on list, patching, social standing) influence who gets admitted and when.",
          "approach": "Developed a theory of immigration and applied piecewise-constant proportional hazard (survival) models to mined mailing-list and repository data from Apache, Postgres, and Python; constructed monthly social networks (normalized indegree), counted patch submissions and messages, controlled for project age and developer population, and tested effects on time from first mailing-list post to first commit.",
          "key_insights": [
            "Tenure dependence is often non‑monotonic: in Apache and Postgres the immigration hazard rises then falls with time (peak around ~1 year), while Python showed no significant tenure effect.",
            "Demonstrated technical contributions (patch submissions) significantly increase immigration probability in Postgres and especially Python (≈10% per patch in Python), but were not significant in Apache.",
            "Social status/activity (normalized indegree) positively and significantly increases the chance of becoming a developer across all three projects, though effect sizes vary by project.",
            "Effects vary by project governance, formality of immigration norms and technical complexity, implying institutional context shapes which signals matter most."
          ],
          "implications": "For researchers: demonstrates survival analysis as a rigorous method to study role migration in FLOSS and highlights the need to consider project-level institutional differences; for project stewards: suggests formalizing signals (encouraging visible patch submissions and social engagement) can improve newcomer selection and retention; for potential contributors: active, visible technical contributions and community engagement materially increase the odds of gaining commit access, though the importance of each signal depends on project culture."
        }
      },
      "tags": [
        "open-source-software",
        "repository-mining",
        "developer-social-networks",
        "statistical-analysis"
      ],
      "booktitle": "Fourth International Workshop on Mining Software Repositories, MSR 2007 (ICSE Workshop), Minneapolis, MN, USA, May 19-20, 2007, Proceedings",
      "publisher": "IEEE Computer Society",
      "pages": "6",
      "doi": "10.1109/MSR.2007.23",
      "url": "https://doi.org/10.1109/MSR.2007.23",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/BirdGDSH07,\n  author       = {Christian Bird and\n                  Alex Gourley and\n                  Premkumar T. Devanbu and\n                  Anand Swaminathan and\n                  Greta Hsu},\n  title        = {Open Borders? Immigration in Open Source Projects},\n  booktitle    = {Fourth International Workshop on Mining Software Repositories, {MSR}\n                  2007 {(ICSE} Workshop), Minneapolis, MN, USA, May 19-20, 2007, Proceedings},\n  pages        = {6},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2007},\n  url          = {https://doi.org/10.1109/MSR.2007.23},\n  doi          = {10.1109/MSR.2007.23},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/BirdGDSH07.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/msr/BirdGD07": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Detecting Patch Submission and Acceptance in OSS Projects",
      "authors": "Christian Bird and Alex Gourley and Premkumar T. Devanbu",
      "year": "2007",
      "venue": "Fourth International Workshop on Mining Software Repositories, {MSR",
      "mapped_pdf": "bird2007dps.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Automatic methods to detect patch submissions on project mailing lists and determine whether those patches were applied to source repositories, demonstrated on Apache, Python, PostgreSQL and (submission-only) MySQL.",
        "details": {
          "topic": "Mining patch submission and acceptance in open source projects",
          "problem": "Patch submission via mailing lists is a key entry path for newcomers to OSS, but there has been little automated extraction and matching of those mailed patches to repository changes to study who submits patches and which are accepted.",
          "approach": "The authors mined full mailing-list archives and repository histories, used regular expressions and heuristics to extract patch hunks from emails, tokenized patches and candidate files (with language-specific scanners), applied matching that tolerates comment changes and identifier renamings, set a tunable hunk-match threshold (≈75%) to mark acceptance, and evaluated the tool on Apache, Python, PostgreSQL and MySQL (submission-only) datasets with manual precision checks and recall estimates against CVS acknowledgements.",
          "key_insights": [
            "The extraction + matching pipeline achieves high precision (97% on a random sample of identified applications) but recall is limited (lower-bound ~46% when compared to CVS acknowledgements) because many accepted patches are modified prior to commit.",
            "Non-developers submit a large share of patches (e.g., across studied projects many submissions came from non-devs) and a substantial subset of those are accepted (hundreds of acceptances in Apache, Python, PostgreSQL).",
            "Robust matching requires token-level comparison, comment-insensitive matching, and handling identifier-renaming; naive line-based reverse-apply approaches miss many real applications."
          ],
          "implications": "Providing an automated, reasonably-precise way to link mailed patches to repository commits enables quantitative study of newcomer onboarding, reviewer/contributor roles, hotspot files/areas in codebases, and release-time dynamics; it also supports tools for provenance, contributor metrics, and improving patch-review workflows, while future work should focus on improving recall for modified/renamed commits."
        }
      },
      "tags": [
        "repository-mining",
        "open-source-software",
        "dataset-and-tooling",
        "code-review"
      ],
      "booktitle": "Fourth International Workshop on Mining Software Repositories, MSR 2007 (ICSE Workshop), Minneapolis, MN, USA, May 19-20, 2007, Proceedings",
      "publisher": "IEEE Computer Society",
      "pages": "26",
      "doi": "10.1109/MSR.2007.6",
      "url": "https://doi.org/10.1109/MSR.2007.6",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/BirdGD07,\n  author       = {Christian Bird and\n                  Alex Gourley and\n                  Premkumar T. Devanbu},\n  title        = {Detecting Patch Submission and Acceptance in {OSS} Projects},\n  booktitle    = {Fourth International Workshop on Mining Software Repositories, {MSR}\n                  2007 {(ICSE} Workshop), Minneapolis, MN, USA, May 19-20, 2007, Proceedings},\n  pages        = {26},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2007},\n  url          = {https://doi.org/10.1109/MSR.2007.6},\n  doi          = {10.1109/MSR.2007.6},\n  timestamp    = {Thu, 23 Mar 2023 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/BirdGD07.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/sigsoft/SaulFDB07": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Recommending random walks",
      "authors": "Zachary M. Saul and Vladimir Filkov and Premkumar T. Devanbu and Christian Bird",
      "year": "2007",
      "venue": "Proceedings of the 6th joint meeting of the European Software Engineering\n                  Conference and the {ACM",
      "mapped_pdf": "saul2007rrw.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Use random-walk (HITS-like) ranking on an enriched callgraph neighborhood to recommend related API functions, outperforming prior structural (Suade) and frequent-itemset methods on an Apache dataset.",
        "details": {
          "topic": "Callgraph-based API recommendation / program understanding",
          "problem": "Given a single function in a large codebase, help developers find other related functions when documentation or history data may be absent or unreliable.",
          "approach": "Introduce FRAN, which builds an enriched base set around a query function (parents, siblings, spouses) and ranks nodes using a random-walk/HITS eigenvector approach; compare it to a frequent-itemset recommender (FRIAR, association-rule mining on call targets) and a reimplementation of Suade; evaluate quantitatively on a CodeSurfer-generated callgraph of Apache httpd-2.0 using the portability-layer module grouping as an oracle, plus case studies and statistical tests (p-values, F1, Wilcoxon).",
          "key_insights": [
            "A purely structural random-walk ranking (FRAN) on an enriched neighborhood returns more and better-ranked related functions than Suade and often outperforms a frequent-itemset mining approach.",
            "Structural information alone (callgraph links) is a reliable signal: FRAN's rankings are statistically significant compared to random selection from the candidate set.",
            "FRAN and FRIAR are complementary: FRAN works better for small base sets (few callers), FRIAR for large base sets; a simple switch (CAR-B) combining them improves overall F1.",
            "FRAN is computationally fast and practical for interactive use, and generalizes to other program relationship graphs."
          ],
          "implications": "Developers and tool builders can use callgraph-only, random-walk ranking to produce accurate, fast API/function recommendations even when textual or historical artifacts are missing; combining structural and data-mining signals yields further gains and can be integrated into IDEs or analysis tools to speed program understanding and reduce errors."
        }
      },
      "tags": [
        "recommendation-systems",
        "program-analysis",
        "repository-mining",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 6th joint meeting of the European Software Engineering Conference and the ACM SIGSOFT International Symposium on Foundations of Software Engineering, 2007, Dubrovnik, Croatia, September 3-7, 2007",
      "publisher": "ACM",
      "pages": "15--24",
      "doi": "10.1145/1287624.1287629",
      "url": "https://doi.org/10.1145/1287624.1287629",
      "editor": "Ivica Crnkovic and Antonia Bertolino",
      "raw_bibtex": "@inproceedings{DBLP:conf/sigsoft/SaulFDB07,\n  author       = {Zachary M. Saul and\n                  Vladimir Filkov and\n                  Premkumar T. Devanbu and\n                  Christian Bird},\n  editor       = {Ivica Crnkovic and\n                  Antonia Bertolino},\n  title        = {Recommending random walks},\n  booktitle    = {Proceedings of the 6th joint meeting of the European Software Engineering\n                  Conference and the {ACM} {SIGSOFT} International Symposium on Foundations\n                  of Software Engineering, 2007, Dubrovnik, Croatia, September 3-7,\n                  2007},\n  pages        = {15--24},\n  publisher    = {{ACM}},\n  year         = {2007},\n  url          = {https://doi.org/10.1145/1287624.1287629},\n  doi          = {10.1145/1287624.1287629},\n  timestamp    = {Tue, 01 Feb 2022 10:45:16 +0100},\n  biburl       = {https://dblp.org/rec/conf/sigsoft/SaulFDB07.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "DBLP:conf/msr/BirdGDGS06": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Mining email social networks",
      "authors": "Christian Bird and Alex Gourley and Premkumar T. Devanbu and Michael Gertz and Anand Swaminathan",
      "year": "2006",
      "venue": "Proceedings of the 2006 International Workshop on Mining Software\n                  Repositories, {MSR",
      "mapped_pdf": "bird2006mes.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Analyzed Apache developer mailing-list email archives, resolved aliasing, constructed a reply-based social network and matched it to CVS commits to show that email activity and network centrality strongly correlate with source-code contributions and that developers occupy higher-status positions than non-developers.",
        "details": {
          "topic": "Mining email social networks in open-source software",
          "problem": "Communication and coordination in software projects are hard to observe in closed settings; the authors aim to use public mailing-list archives to study social interactions, relate them to development activity, and overcome practical challenges such as alias resolution and linking email identities to CVS accounts.",
          "approach": "Parsed ~101k messages from the Apache HTTP Server developer mailing list (1999 onwards), extracted reply relationships to build a directed social network, resolved aliases using an automated name/email similarity clustering followed by manual post-processing, matched email identities to CVS commit accounts, and computed network measures (in-/out-degree, betweenness) and Spearman/t-test correlations between email activity and source/document change activity.",
          "key_insights": [
            "Email participation and reply-based in-/out-degree distributions are long-tailed (small-world/scale-free): a few people generate and attract most activity.",
            "There is a very strong correlation between number of messages sent and number of distinct respondents (Spearman ≈ 0.97).",
            "Among committers (n=73), message volume and social-centrality (especially betweenness) strongly correlate with source-code changes (Spearman ≈ 0.80 for messages vs source changes; betweenness ≈ 0.757 with source changes).",
            "Developers have significantly higher centrality than non-developers (large, significant differences in betweenness, in-degree and out-degree); document changes correlate less strongly with social measures than source changes."
          ],
          "implications": "Public mailing-list archives can be reliably mined (with careful alias resolution) to reveal coordination structures and identify key contributors; social-network metrics from email can serve researchers and project managers as proxies for developer status and activity, help detect brokers or bottlenecks, and guide interventions or further causal/time-series studies linking communication and code evolution."
        }
      },
      "tags": [
        "developer-social-networks",
        "network-analysis",
        "repository-mining",
        "open-source-software"
      ],
      "booktitle": "Proceedings of the 2006 International Workshop on Mining Software Repositories, MSR 2006, Shanghai, China, May 22-23, 2006",
      "publisher": "ACM",
      "pages": "137--143",
      "doi": "10.1145/1137983.1138016",
      "url": "https://doi.org/10.1145/1137983.1138016",
      "editor": "Stephan Diehl and Harald C. Gall and Ahmed E. Hassan",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/BirdGDGS06,\n  author       = {Christian Bird and\n                  Alex Gourley and\n                  Premkumar T. Devanbu and\n                  Michael Gertz and\n                  Anand Swaminathan},\n  editor       = {Stephan Diehl and\n                  Harald C. Gall and\n                  Ahmed E. Hassan},\n  title        = {Mining email social networks},\n  booktitle    = {Proceedings of the 2006 International Workshop on Mining Software\n                  Repositories, {MSR} 2006, Shanghai, China, May 22-23, 2006},\n  pages        = {137--143},\n  publisher    = {{ACM}},\n  year         = {2006},\n  url          = {https://doi.org/10.1145/1137983.1138016},\n  doi          = {10.1145/1137983.1138016},\n  timestamp    = {Tue, 29 Dec 2020 18:36:57 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/BirdGDGS06.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}",
      "awards": [
        "Most Influential Paper Award (10 years)"
      ]
    },
    "DBLP:conf/msr/BirdGDGS06a": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "Mining email social networks in Postgres",
      "authors": "Christian Bird and Alex Gourley and Premkumar T. Devanbu and Michael Gertz and Anand Swaminathan",
      "year": "2006",
      "venue": "Proceedings of the 2006 International Workshop on Mining Software\n                  Repositories, {MSR",
      "mapped_pdf": "bird2006mesp.pdf",
      "notes": null,
      "extracted_paper_info": {
        "tldr": "Mined Postgres mailing-list and CVS history to construct an email-based social network and show that social-network metrics strongly correlate with development activity and that developers occupy higher-status network positions.",
        "details": {
          "topic": "Social network analysis of open-source developer communication",
          "problem": "Understand how mailing-list communication and social-network position relate to actual development activity in an open-source project, and handle noisy data such as multiple email aliases.",
          "approach": "Parsed ~110k Postgres mailing-list messages (restricted to period with message-ID headers), resolved email aliases with heuristic clustering and manual verification to produce ~3,293 identities, built a reply-based social network, computed node metrics (in-degree, out-degree, betweenness), matched identities to CVS accounts and 83k source/document changes, and ran statistical analyses (Spearman correlations, significance tests) plus distributional analysis.",
          "key_insights": [
            "Developers have markedly higher in-degree, out-degree, and betweenness (about an order of magnitude) than non-developers, indicating higher social status in the mailing-list network.",
            "Social-network metrics are highly correlated with CVS activity (source changes) — for Postgres document changes also correlate strongly, unlike in prior Apache results.",
            "Message- and developer-level activity distributions exhibit power-law behavior, supporting the validity of the mining approach."
          ],
          "implications": "For researchers, the work validates cross-project mining methods and shows social metrics can serve as proxies or predictors of development activity; for project managers and tool builders, monitoring mailing-list interactions can help identify central contributors and coordination patterns; practically, accurate alias resolution and awareness of project-specific practices (e.g., docs vs. source roles) are crucial when applying these analyses."
        }
      },
      "tags": [
        "developer-social-networks",
        "network-analysis",
        "repository-mining",
        "statistical-analysis"
      ],
      "booktitle": "Proceedings of the 2006 International Workshop on Mining Software Repositories, MSR 2006, Shanghai, China, May 22-23, 2006",
      "publisher": "ACM",
      "pages": "185--186",
      "doi": "10.1145/1137983.1138033",
      "url": "https://doi.org/10.1145/1137983.1138033",
      "editor": "Stephan Diehl and Harald C. Gall and Ahmed E. Hassan",
      "raw_bibtex": "@inproceedings{DBLP:conf/msr/BirdGDGS06a,\n  author       = {Christian Bird and\n                  Alex Gourley and\n                  Premkumar T. Devanbu and\n                  Michael Gertz and\n                  Anand Swaminathan},\n  editor       = {Stephan Diehl and\n                  Harald C. Gall and\n                  Ahmed E. Hassan},\n  title        = {Mining email social networks in Postgres},\n  booktitle    = {Proceedings of the 2006 International Workshop on Mining Software\n                  Repositories, {MSR} 2006, Shanghai, China, May 22-23, 2006},\n  pages        = {185--186},\n  publisher    = {{ACM}},\n  year         = {2006},\n  url          = {https://doi.org/10.1145/1137983.1138033},\n  doi          = {10.1145/1137983.1138033},\n  timestamp    = {Mon, 07 Dec 2020 00:00:00 +0100},\n  biburl       = {https://dblp.org/rec/conf/msr/BirdGDGS06a.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}"
    },
    "Miller2026MaybeWe": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "``Maybe We Need Some More Examples:'' Individual and Team Drivers of Developer GenAI Tool Use",
      "authors": "Courtney Miller and Rudrajit Choudhuri and Mara Ulloa and Sankeerti Haniyur and Robert DeLine and Margaret-Anne Storey and Emerson Murphy-Hill and Christian Bird and Jenna L. Butler",
      "year": "2026",
      "venue": "Proceedings of the International Conference on Software Engineering (ICSE)",
      "mapped_pdf": "Miller2026MaybeWe.pdf",
      "notes": "To appear",
      "found_pdf": true,
      "found_date": "2025-10-01 12:55:04",
      "extracted_paper_info": {
        "tldr": "Paired interviews of 54 developers show that differences in GenAI tool use arise from individual mindsets and strategies (e.g., seeing the tool as a collaborator vs a feature, experimenting vs conserving) and from team/organizational support, producing a 'Productivity Pressure Paradox' where managerial expectations for immediate gains block the learning needed to realize those gains.",
        "details": {
          "topic": "Developer adoption and integration of generative AI tools in software engineering",
          "problem": "Despite broad availability of GenAI tools, adoption is uneven and it's unclear why developers on the same team adopt tools differently or why organizational push for productivity often fails to deliver expected gains.",
          "approach": "Sequential semi-structured paired interviews with 54 developers (27 pairs) from the same teams selected using internal telemetry (GitHub Copilot usage) were analyzed via iterative thematic qualitative analysis and member checking to compare frequent vs. infrequent users within matched team contexts.",
          "key_insights": [
            "Mindset divides: frequent users often frame GenAI as a collaborator with realistic expectations, while infrequent users treat it as a utility feature and hold misaligned expectations.",
            "Engagement patterns differ: frequent users adopt experimental, continuous integration and self-directed learning approaches; infrequent users take conservative, task-limited approaches and engage minimally in learning.",
            "Responses to failure diverge: frequent users show adaptive persistence (refining prompts, breaking tasks down), whereas infrequent users are more likely to quickly abandon GenAI approaches.",
            "Organizational effects and the 'Productivity Pressure Paradox': leadership messaging, context-specific resources, social learning, and protected time can amplify or dampen individual adoption, and expecting immediate productivity without scaffolding prevents the skill development required to realize productivity gains."
          ],
          "implications": "Organizations should shift responsibility from individual developers to systematic support—providing clear messaging, team-specific demos, shared learning structures, and protected experimentation time—to realize GenAI productivity benefits; researchers should study temporal adoption dynamics, mental-model interventions, and pedagogical changes to cultivate AI-fluency among developers."
        }
      },
      "tags": [
        "ai-assisted-programming",
        "tool-adoption-and-trust",
        "interviews",
        "developer-productivity"
      ],
      "raw_bibtex": "@misc{miller2025maybeneedexamples,\n  author    = {Courtney Miller and Rudrajit Choudhuri and Mara Ulloa and Sankeerti Haniyur and Robert DeLine and Margaret{-}Anne Storey and Emerson Murphy{-}Hill and Christian Bird and Jenna L. Butler},\n  title     = {{\\\"Maybe We Need Some More Examples:\\\" Individual and Team Drivers of Developer GenAI Tool Use}},\n  year      = {2025},\n  note      = {Manuscript under submission. Preprint available at arXiv:2507.21280},\n  url       = {https://arxiv.org/abs/2507.21280}\n}",
      "under_submission": true
    },
    "Choudhuri2026AIWhere": {
      "status": "MAPPED",
      "type": "inproceedings",
      "title": "AI Where It Matters: Where, Why, and How Developers Want AI Support in Daily Work",
      "authors": "Rudrajit Choudhuri and Carmen Badea and Christian Bird and Jenna L. Butler and Robert DeLine and Brian Houck",
      "year": "2026",
      "venue": "Proceedings of the International Conference on Software Engineering (ICSE), Software Engineering in Practice (SEIP) Track",
      "mapped_pdf": "AI-Where-It_Matters.pdf",
      "notes": "Under submission",
      "found_pdf": true,
      "found_date": "2025-10-01 12:58:41",
      "extracted_paper_info": {
        "tldr": "Examines where, why, and how software developers want generative AI support across different engineering tasks, showing that developers' task appraisals predict AI adoption and shape context-sensitive Responsible AI priorities.",
        "details": {
          "topic": "Generative AI in software engineering (developer tools)",
          "problem": "There is limited, task-aware guidance about which parts of developers' work should be supported or left human, and how to design AI tools responsibly so they augment rather than undermine developer agency, expertise, and safety.",
          "approach": "A large-scale mixed-methods study of 860 Microsoft developers: a grounded taxonomy of software engineering tasks, a survey measuring four task appraisals (value, identity, accountability, demands), forced-choice prioritization of Responsible AI (RAI) principles, mixed-effects regression to link appraisals to openness/use, hierarchical clustering to group tasks, and reflexive thematic analysis of free-text responses (with member checking).",
          "key_insights": [
            "Task appraisals predict AI adoption: higher perceived value, accountability, and task demands increase openness to and use of AI, while identity alignment reduces openness but can increase selective, complementary use.",
            "Tasks cluster into distinct groups (Core work; People & AI-building; Ops & Coordination) and fall into four zones (Build, Improve, Sustain, De-prioritize), revealing where need outpaces current use and where AI should focus on augmentation versus abstention.",
            "Responsible-AI priorities are context-dependent: systems-facing work demands reliability, safety, privacy/security, transparency, goal maintenance, and steerability, while human-facing tasks elevate fairness and inclusiveness and often remain human-led.",
            "Individual differences matter: juniors and AI-experienced, risk-tolerant, and technophilic developers are more receptive to AI, and experience shifts priorities toward steerability, reliability, and transparency."
          ],
          "implications": "Designers and teams should take a task-aware, augmentation-first approach: prioritize reliability, security, transparency/provenance, goal maintenance and steerability for system-facing and high-stakes tasks; use AI to reduce toil in ops while preserving human oversight for identity- and relationship-centric work; instrument task-aware personas and adjustable autonomy, and focus research on useful transparency, goal-drift prevention, and interruption/rollback mechanisms to preserve developer agency and meaningful work."
        }
      },
      "tags": [
        "ai-for-software-engineering",
        "ai-assisted-programming",
        "surveys",
        "tool-adoption-and-trust"
      ],
      "raw_bibtex": "@misc{choudhuri2026aiwhereitmatters,\n  author    = {Rudrajit Choudhuri and Carmen Badea and Christian Bird and Jenna L. Butler and Robert DeLine and Brian Houck},\n  title     = {AI Where It Matters: Where, Why, and How Developers Want AI Support in Daily Work},\n  year      = {2025},\n  note      = {Manuscript under submission},\n  url       = {https://www.cabird.com/AI_where_it_matters/paper.pdf}\n}",
      "under_submission": true
    }
  },
  "pdfs": {
    "allamanis2014learning.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/AllamanisBBS14",
      "notes": null,
      "markdown_file": "markdowns/allamanis2014learning.md"
    },
    "allamanis2015suggesting.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/AllamanisBBS15",
      "notes": null,
      "markdown_file": "markdowns/allamanis2015suggesting.md"
    },
    "allamanis2018loopidioms.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/tse/AllamanisBBDMS18",
      "notes": null,
      "markdown_file": "markdowns/allamanis2018loopidioms.md"
    },
    "amershi2018se4ml.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/AmershiBBDGKNN019",
      "notes": null,
      "markdown_file": "markdowns/amershi2018se4ml.md"
    },
    "asthana2019whodo.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/AsthanaKBBBMMA19",
      "notes": null,
      "markdown_file": "markdowns/asthana2019whodo.md"
    },
    "bacchelli2013eoc.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/BacchelliB13",
      "notes": null,
      "markdown_file": "markdowns/bacchelli2013eoc.md"
    },
    "bachmann2010mlb.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/BachmannBRDB10",
      "notes": null,
      "markdown_file": "markdowns/bachmann2010mlb.md"
    },
    "barnett2015helping.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/BarnettBBL15",
      "notes": null,
      "markdown_file": "markdowns/barnett2015helping.md"
    },
    "barr2010sg.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/BarrBHMR10",
      "notes": null,
      "markdown_file": "markdowns/barr2010sg.md"
    },
    "barr2012cid.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/fase/BarrBRHGD12",
      "notes": null,
      "markdown_file": "markdowns/barr2012cid.md"
    },
    "barr2013shapes.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/issta/BarrBM13",
      "notes": null,
      "markdown_file": "markdowns/barr2013shapes.md"
    },
    "bird2006mes.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/BirdGDGS06",
      "notes": null,
      "markdown_file": "markdowns/bird2006mes.md"
    },
    "bird2006mesp.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/BirdGDGS06a",
      "notes": null,
      "markdown_file": "markdowns/bird2006mesp.md"
    },
    "bird2007dps.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/BirdGD07",
      "notes": null,
      "markdown_file": "markdowns/bird2007dps.md"
    },
    "bird2007obi.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/BirdGDSH07",
      "notes": null,
      "markdown_file": "markdowns/bird2007obi.md"
    },
    "bird2007qso.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/BirdGDSH07",
      "notes": null,
      "markdown_file": "markdowns/bird2007qso.md"
    },
    "bird2008lss.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/BirdPDFD08",
      "notes": null,
      "markdown_file": "markdowns/bird2008lss.md"
    },
    "bird2009ddd.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/BirdNDGM09",
      "notes": null,
      "markdown_file": "markdowns/bird2009ddd.md"
    },
    "bird2009dddb.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/BirdNDGM09",
      "notes": null,
      "markdown_file": "markdowns/bird2009dddb.md"
    },
    "bird2009fbb.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/BirdBADBFD09",
      "notes": null,
      "markdown_file": "markdowns/bird2009fbb.md"
    },
    "bird2009pat.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/issre/BirdNGMD09",
      "notes": null,
      "markdown_file": "markdowns/bird2009pat.md"
    },
    "bird2009ppm.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/BirdRBHGD09",
      "notes": null,
      "markdown_file": "markdowns/bird2009ppm.md"
    },
    "bird2009sdr.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sdm/BirdBN09",
      "notes": null,
      "markdown_file": "markdowns/bird2009sdr.md"
    },
    "bird2010lee.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/BirdBRB10",
      "notes": null,
      "markdown_file": "markdowns/bird2010lee.md"
    },
    "bird2011dtm.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/BirdNMGD11",
      "notes": null,
      "markdown_file": "markdowns/bird2011dtm.md"
    },
    "bird2011ese.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/cscw/BirdMNZ11",
      "notes": null,
      "markdown_file": "markdowns/bird2011ese.md"
    },
    "bird2011scc.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icsm/Bird11",
      "notes": null,
      "markdown_file": "markdowns/bird2011scc.md"
    },
    "bird2011tbg.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/BirdZT11",
      "notes": null,
      "markdown_file": "markdowns/bird2011tbg.md"
    },
    "bird2012avb.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/BirdZ12",
      "notes": null,
      "markdown_file": "markdowns/bird2012avb.md"
    },
    "bird2012www.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/BirdN12",
      "notes": null,
      "markdown_file": "markdowns/bird2012www.md"
    },
    "bird2014rac.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/BirdRZNZ14",
      "notes": null,
      "markdown_file": "markdowns/bird2014rac.md"
    },
    "bird2015cfa.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/BirdCG15",
      "notes": null,
      "markdown_file": "markdowns/bird2015cfa.md"
    },
    "bird2016bias.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:books/el/16/Bird16a",
      "notes": null,
      "markdown_file": "markdowns/bird2016bias.md"
    },
    "bird2016interviews.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:books/el/16/Bird16",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 12:24:28",
      "markdown_file": "markdowns/bird2016interviews.md"
    },
    "bird_cv.pdf": {
      "status": "NO_BIBTEX",
      "has_text": true,
      "mapped_bibtex": null,
      "notes": null
    },
    "bosu2015useful.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/BosuGB15",
      "notes": null,
      "markdown_file": "markdowns/bosu2015useful.md"
    },
    "bosu2017review.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/tse/BosuCBOC17",
      "notes": null,
      "markdown_file": "markdowns/bosu2017review.md"
    },
    "christakis2016developers.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/kbse/ChristakisB16",
      "notes": null,
      "markdown_file": "markdowns/christakis2016developers.md"
    },
    "codeflow2018.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/queue/CzerwonkaGBPC18",
      "notes": null,
      "markdown_file": "markdowns/codeflow2018.md"
    },
    "devanbu2016evidence.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/Devanbu0B16",
      "notes": null,
      "markdown_file": "markdowns/devanbu2016evidence.md"
    },
    "devanbu2018belief.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/software/DevanbuZB18",
      "notes": null,
      "markdown_file": "markdowns/devanbu2018belief.md"
    },
    "ford2017personas.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/esem/FordZBN17",
      "notes": null,
      "markdown_file": "markdowns/ford2017personas.md"
    },
    "gao2017javascript.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/GaoBB17",
      "notes": null,
      "markdown_file": "markdowns/gao2017javascript.md"
    },
    "gupta2014energy.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/esem/GuptaZBNBE14",
      "notes": null,
      "markdown_file": "markdowns/gupta2014energy.md"
    },
    "harper2013ecscw.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/ecscw/HarperBZM13",
      "notes": null,
      "markdown_file": "markdowns/harper2013ecscw.md"
    },
    "hellendoorn2018deep.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/HellendoornBBA18",
      "notes": null,
      "markdown_file": "markdowns/hellendoorn2018deep.md"
    },
    "henkel2020docker.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/HenkelBLR20",
      "notes": null,
      "markdown_file": "markdowns/henkel2020docker.md"
    },
    "henkel2020dockermsr.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/HenkelBLR20",
      "notes": null,
      "markdown_file": "markdowns/henkel2020dockermsr.md"
    },
    "henley2018cfar.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/chi/HenleyMCFB18",
      "notes": null,
      "markdown_file": "markdowns/henley2018cfar.md"
    },
    "hindle2012rri.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icsm/HindleBZN12",
      "notes": null,
      "markdown_file": "markdowns/hindle2012rri.md"
    },
    "hindle2014topics.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/ese/HindleBZN15",
      "notes": null,
      "markdown_file": "markdowns/hindle2014topics.md"
    },
    "hong2011uds.pdf": {
      "status": "MAPPED",
      "has_text": false,
      "mapped_bibtex": "DBLP:conf/icsm/HongKCB11",
      "notes": "PDF extraction failed",
      "markdown_file": "markdowns/hong2011uds.md"
    },
    "johnson2019environment.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/tse/JohnsonZB21",
      "notes": null,
      "markdown_file": "markdowns/johnson2019environment.md"
    },
    "kalliamvakou2018managers.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/tse/KalliamvakouBZB19",
      "notes": null,
      "markdown_file": "markdowns/kalliamvakou2018managers.md"
    },
    "kocaguneli2013distributed.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/KocaguneliZBNM13",
      "notes": null,
      "markdown_file": "markdowns/kocaguneli2013distributed.md"
    },
    "kochhar2020moving.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/tse/KochharKNZB21",
      "notes": null,
      "markdown_file": "markdowns/kochhar2020moving.md"
    },
    "kovalenko2019revrec.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/tse/KovalenkoTPBB20",
      "notes": null,
      "markdown_file": "markdowns/kovalenko2019revrec.md"
    },
    "macleod2018codereviewing.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/software/MacLeodGSBC18",
      "notes": null,
      "markdown_file": "markdowns/macleod2018codereviewing.md"
    },
    "manotas2016green.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/ManotasBZSJSPC16",
      "notes": null,
      "markdown_file": "markdowns/manotas2016green.md"
    },
    "mehta2020rex.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/nsdi/MehtaB0BMAABK20",
      "notes": null,
      "markdown_file": "markdowns/mehta2020rex.md"
    },
    "menzies2011ise.pdf": {
      "status": "NO_BIBTEX",
      "has_text": true,
      "mapped_bibtex": null,
      "notes": null
    },
    "meyer2019today.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/tse/MeyerBBZ21",
      "notes": null,
      "markdown_file": "markdowns/meyer2019today.md"
    },
    "mlpaper.pdf": {
      "status": "NO_BIBTEX",
      "has_text": true,
      "mapped_bibtex": null,
      "notes": null
    },
    "mukadam2013gerrit.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/MukadamBR13",
      "notes": null,
      "markdown_file": "markdowns/mukadam2013gerrit.md"
    },
    "murphy2013agile.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/esem/MurphyBZWNB13",
      "notes": null,
      "markdown_file": "markdowns/murphy2013agile.md"
    },
    "murphyhill2013dbf.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/Murphy-HillZBN13",
      "notes": null,
      "markdown_file": "markdowns/murphyhill2013dbf.md"
    },
    "murphyhill2015design.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/tse/Murphy-HillZBN15",
      "notes": null,
      "markdown_file": "markdowns/murphyhill2015design.md"
    },
    "muslu2014dvcs.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/MusluBNC14",
      "notes": null,
      "markdown_file": "markdowns/muslu2014dvcs.md"
    },
    "musson2013software.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/software/MussonRFBBG13",
      "notes": null,
      "markdown_file": "markdowns/musson2013software.md"
    },
    "nagappan2013diversity.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/NagappanZB13",
      "notes": null,
      "markdown_file": "markdowns/nagappan2013diversity.md"
    },
    "nia2010vna.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/NiaBDF10",
      "notes": null,
      "markdown_file": "markdowns/nia2010vna.md"
    },
    "nolte2018you-slides.pdf": {
      "status": "NO_BIBTEX",
      "has_text": true,
      "mapped_bibtex": null,
      "notes": null
    },
    "nolte2018you.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/pacmhci/NoltePFBSH18",
      "notes": null,
      "markdown_file": "markdowns/nolte2018you.md"
    },
    "ogawa2007vsi.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/apvis/OgawaMBDG07",
      "notes": null,
      "markdown_file": "markdowns/ogawa2007vsi.md"
    },
    "parnin2011jga.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/ParninBM11",
      "notes": null,
      "markdown_file": "markdowns/parnin2011jga.md"
    },
    "parnin2012auj.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/ese/ParninBM13",
      "notes": null,
      "markdown_file": "markdowns/parnin2012auj.md"
    },
    "pattison2008twp.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/PattisonBD08",
      "notes": null,
      "markdown_file": "markdowns/pattison2008twp.md"
    },
    "phillips2014build.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/PhillipsZB14",
      "notes": null,
      "markdown_file": "markdowns/phillips2014build.md"
    },
    "posnett2010esi.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/ese/PosnettBD11",
      "notes": null,
      "markdown_file": "markdowns/posnett2010esi.md"
    },
    "posnett2010tmm.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/PosnettBD10",
      "notes": null,
      "markdown_file": "markdowns/posnett2010tmm.md"
    },
    "rahman2010cws.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/RahmanBD10",
      "notes": null,
      "markdown_file": "markdowns/rahman2010cws.md"
    },
    "rahman2012cwt.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/ese/RahmanBD12",
      "notes": null,
      "markdown_file": "markdowns/rahman2012cwt.md"
    },
    "ray2015uniqueness.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/RayNBNZ15",
      "notes": null,
      "markdown_file": "markdowns/ray2015uniqueness.md"
    },
    "rigby2013convergent.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/RigbyB13",
      "notes": null,
      "markdown_file": "markdowns/rigby2013convergent.md"
    },
    "rigby2013releng.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/RigbyBBDG13",
      "notes": null,
      "markdown_file": "markdowns/rigby2013releng.md"
    },
    "saraiva2015ngram.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/SaraivaBZ15",
      "notes": null,
      "markdown_file": "markdowns/saraiva2015ngram.md"
    },
    "saul2007rrw.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/sigsoft/SaulFDB07",
      "notes": null,
      "markdown_file": "markdowns/saul2007rrw.md"
    },
    "shihab2012ebs.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/esem/ShihabBZ12",
      "notes": null,
      "markdown_file": "markdowns/shihab2012ebs.md"
    },
    "smith2013chase.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/SmithLMBZ13",
      "notes": null,
      "markdown_file": "markdowns/smith2013chase.md"
    },
    "smith2015homegrown.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/SmithBZ15",
      "notes": null,
      "markdown_file": "markdowns/smith2015homegrown.md"
    },
    "smith2016beliefs.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/SmithB016",
      "notes": null,
      "markdown_file": "markdowns/smith2016beliefs.md"
    },
    "storey2020productivity.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/tse/StoreyZBCMK21",
      "notes": null,
      "markdown_file": "markdowns/storey2020productivity.md"
    },
    "than2018designing.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/software/Pe-ThanNFBSH19",
      "notes": null,
      "markdown_file": "markdowns/than2018designing.md"
    },
    "than2020hackathon.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/hhci/Pe-ThanNFBSH22",
      "notes": null,
      "markdown_file": "markdowns/than2020hackathon.md"
    },
    "washburn2016games.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/icse/ManotasBZSJSPC16",
      "notes": null,
      "markdown_file": "markdowns/washburn2016games.md"
    },
    "zanjani2015developer.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/msr/ZanjaniKB15",
      "notes": null,
      "markdown_file": "markdowns/zanjani2015developer.md"
    },
    "zanjani2016recommending.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:journals/tse/ZanjaniKB16",
      "notes": null,
      "markdown_file": "markdowns/zanjani2016recommending.md"
    },
    "zeller2011ffl.pdf": {
      "status": "MAPPED",
      "has_text": true,
      "mapped_bibtex": "DBLP:conf/promise/ZellerZB11",
      "notes": null,
      "markdown_file": "markdowns/zeller2011ffl.md"
    },
    "zimmermann2012ccs.pdf": {
      "status": "NO_BIBTEX",
      "has_text": true,
      "mapped_bibtex": null,
      "notes": null
    },
    "kim2013jot.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:journals/jot/KimMPBG13",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 10:43:31",
      "markdown_file": "markdowns/kim2013jot.md"
    },
    "adams2015releng.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:journals/software/AdamsBBMKM15",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 10:44:27",
      "markdown_file": "markdowns/adams2015releng.md"
    },
    "svyatkovskiy2022merge.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:conf/sigsoft/SvyatkovskiyFGM22",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 10:49:29",
      "markdown_file": "markdowns/svyatkovskiy2022merge.md"
    },
    "ford2022covid.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:journals/tosem/FordSZBJMBHN22",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 10:50:18",
      "markdown_file": "markdowns/ford2022covid.md"
    },
    "maddila2022cone.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:journals/tosem/MaddilaNBGD22",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 10:51:45",
      "markdown_file": "markdowns/maddila2022cone.md"
    },
    "taking_flight.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:journals/queue/BirdFZFKLG22",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 10:54:45",
      "markdown_file": "markdowns/taking_flight.md"
    },
    "taking_flight_cacm.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:journals/cacm/BirdFZFKLG23",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 10:56:52",
      "markdown_file": "markdowns/taking_flight_cacm.md"
    },
    "PICSE-BrittanyJohnson-ICSESEIP2023.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:conf/icse/JohnsonBFFZ23",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 11:00:08",
      "markdown_file": "markdowns/PICSE-BrittanyJohnson-ICSESEIP2023.md"
    },
    "zhang2023coral.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:conf/icse/ZhangMBBRAJHD23",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 11:00:47",
      "markdown_file": "markdowns/zhang2023coral.md"
    },
    "dinella2023deepmerge.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:journals/tse/DinellaMSBNL23",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 11:01:26",
      "markdown_file": "markdowns/dinella2023deepmerge.md"
    },
    "butler2024okr.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:conf/icse/Butler0B24",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 11:02:15",
      "markdown_file": "markdowns/butler2024okr.md"
    },
    "washburn2016postmortems.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:conf/icse/WashburnSN0B16",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 11:05:45",
      "markdown_file": "markdowns/washburn2016postmortems.md"
    },
    "Crowdsourcing_for_Software_Engineering.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:journals/software/StolLB17",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 11:44:38",
      "markdown_file": "markdowns/Crowdsourcing_for_Software_Engineering.md"
    },
    "Release_Engineering_3.0.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:journals/software/AdamsBBDKMO18",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 11:47:49",
      "markdown_file": "markdowns/Release_Engineering_3.0.md"
    },
    "nahar.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:conf/icse-seip/NaharKBPZB25",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 11:49:26",
      "markdown_file": "markdowns/nahar.md"
    },
    "program_merge_cacm.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:journals/cacm/LahiriSBMC25",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 12:04:51",
      "markdown_file": "markdowns/program_merge_cacm.md"
    },
    "program_merge_queue.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:journals/queue/LahiriSBMC24",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 12:06:10",
      "markdown_file": "markdowns/program_merge_queue.md"
    },
    "arun-differential-testing.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:conf/sigsoft/VajjalaVBBDDDEF25",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 12:18:47",
      "markdown_file": "markdowns/arun-differential-testing.md"
    },
    "Automatic_Diff_Labeler.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:conf/icse-seip/VajjalaVBBDDDEFHMSSZ25",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 12:21:24",
      "markdown_file": "markdowns/Automatic_Diff_Labeler.md"
    },
    "_FSE_24__Replicating_Software_Engineering_Research_with_LLMs.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "DBLP:journals/pacmse/LiangBBDFF024",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 12:23:08",
      "markdown_file": "markdowns/_FSE_24__Replicating_Software_Engineering_Research_with_LLMs.md"
    },
    "Miller2026MaybeWe.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "Miller2026MaybeWe",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 12:55:04",
      "markdown_file": "markdowns/Miller2026MaybeWe.md"
    },
    "AI-Where-It_Matters.pdf": {
      "status": "MAPPED",
      "mapped_bibtex": "Choudhuri2026AIWhere",
      "has_text": false,
      "newly_found": true,
      "found_date": "2025-10-01 12:58:41",
      "markdown_file": "markdowns/AI-Where-It_Matters.md"
    }
  },
  "mappings": [
    {
      "bib_key": "DBLP:conf/icse/HenkelBLR20",
      "pdf_file": "henkel2020docker.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/msr/HenkelBLR20",
      "pdf_file": "henkel2020dockermsr.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/nsdi/MehtaB0BMAABK20",
      "pdf_file": "mehta2020rex.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/AsthanaKBBBMMA19",
      "pdf_file": "asthana2019whodo.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:journals/software/MacLeodGSBC18",
      "pdf_file": "macleod2018codereviewing.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:journals/software/DevanbuZB18",
      "pdf_file": "devanbu2018belief.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:journals/tse/AllamanisBBDMS18",
      "pdf_file": "allamanis2018loopidioms.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/HellendoornBBA18",
      "pdf_file": "hellendoorn2018deep.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:journals/tse/BosuCBOC17",
      "pdf_file": "bosu2017review.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/esem/FordZBN17",
      "pdf_file": "ford2017personas.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/icse/GaoBB17",
      "pdf_file": "gao2017javascript.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:journals/tse/ZanjaniKB16",
      "pdf_file": "zanjani2016recommending.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/icse/SmithB016",
      "pdf_file": "smith2016beliefs.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/icse/ManotasBZSJSPC16",
      "pdf_file": "manotas2016green.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/kbse/ChristakisB16",
      "pdf_file": "christakis2016developers.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:books/el/16/Bird16a",
      "pdf_file": "bird2016bias.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/icse/BarnettBBL15",
      "pdf_file": "barnett2015helping.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/icse/SmithBZ15",
      "pdf_file": "smith2015homegrown.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/msr/RayNBNZ15",
      "pdf_file": "ray2015uniqueness.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/msr/ZanjaniKB15",
      "pdf_file": "zanjani2015developer.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/msr/BosuGB15",
      "pdf_file": "bosu2015useful.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/msr/BirdCG15",
      "pdf_file": "bird2015cfa.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/AllamanisBBS15",
      "pdf_file": "allamanis2015suggesting.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/SaraivaBZ15",
      "pdf_file": "saraiva2015ngram.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/esem/GuptaZBNBE14",
      "pdf_file": "gupta2014energy.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/icse/BirdRZNZ14",
      "pdf_file": "bird2014rac.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/icse/PhillipsZB14",
      "pdf_file": "phillips2014build.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/AllamanisBBS14",
      "pdf_file": "allamanis2014learning.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:journals/software/MussonRFBBG13",
      "pdf_file": "musson2013software.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/ecscw/HarperBZM13",
      "pdf_file": "harper2013ecscw.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/esem/MurphyBZWNB13",
      "pdf_file": "murphy2013agile.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/icse/RigbyBBDG13",
      "pdf_file": "rigby2013releng.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/icse/SmithLMBZ13",
      "pdf_file": "smith2013chase.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/icse/BacchelliB13",
      "pdf_file": "bacchelli2013eoc.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/icse/KocaguneliZBNM13",
      "pdf_file": "kocaguneli2013distributed.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/issta/BarrBM13",
      "pdf_file": "barr2013shapes.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:46"
    },
    {
      "bib_key": "DBLP:conf/msr/MukadamBR13",
      "pdf_file": "mukadam2013gerrit.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/RigbyB13",
      "pdf_file": "rigby2013convergent.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/NagappanZB13",
      "pdf_file": "nagappan2013diversity.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:journals/ese/RahmanBD12",
      "pdf_file": "rahman2012cwt.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/esem/ShihabBZ12",
      "pdf_file": "shihab2012ebs.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/fase/BarrBRHGD12",
      "pdf_file": "barr2012cid.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/icsm/HindleBZN12",
      "pdf_file": "hindle2012rri.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/msr/BirdN12",
      "pdf_file": "bird2012www.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/BirdZ12",
      "pdf_file": "bird2012avb.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/cscw/BirdMNZ11",
      "pdf_file": "bird2011ese.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/icse/BirdZT11",
      "pdf_file": "bird2011tbg.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/icsm/Bird11",
      "pdf_file": "bird2011scc.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/msr/ParninBM11",
      "pdf_file": "parnin2011jga.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/promise/ZellerZB11",
      "pdf_file": "zeller2011ffl.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/msr/RahmanBD10",
      "pdf_file": "rahman2010cws.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/msr/NiaBDF10",
      "pdf_file": "nia2010vna.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/BarrBHMR10",
      "pdf_file": "barr2010sg.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/BachmannBRDB10",
      "pdf_file": "bachmann2010mlb.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/icse/BirdNDGM09",
      "pdf_file": "bird2009ddd.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/issre/BirdNGMD09",
      "pdf_file": "bird2009pat.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/msr/BirdRBHGD09",
      "pdf_file": "bird2009ppm.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/sdm/BirdBN09",
      "pdf_file": "bird2009sdr.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/BirdBADBFD09",
      "pdf_file": "bird2009fbb.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/msr/PattisonBD08",
      "pdf_file": "pattison2008twp.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/BirdPDFD08",
      "pdf_file": "bird2008lss.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/apvis/OgawaMBDG07",
      "pdf_file": "ogawa2007vsi.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/msr/BirdGDSH07",
      "pdf_file": "bird2007obi.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/msr/BirdGD07",
      "pdf_file": "bird2007dps.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/SaulFDB07",
      "pdf_file": "saul2007rrw.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/msr/BirdGDGS06",
      "pdf_file": "bird2006mes.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/msr/BirdGDGS06a",
      "pdf_file": "bird2006mesp.pdf",
      "confidence": "auto-high",
      "verified_date": "2025-10-01 09:47:47"
    },
    {
      "bib_key": "DBLP:conf/icse/AmershiBBDGKNN019",
      "pdf_file": "amershi2018se4ml.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:06:06"
    },
    {
      "bib_key": "DBLP:journals/queue/CzerwonkaGBPC18",
      "pdf_file": "codeflow2018.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:06:46"
    },
    {
      "bib_key": "DBLP:conf/icse/Devanbu0B16",
      "pdf_file": "devanbu2016evidence.pdf",
      "confidence": "medium",
      "verified_date": "2025-10-01 10:08:28"
    },
    {
      "bib_key": "DBLP:journals/tse/JohnsonZB21",
      "pdf_file": "johnson2019environment.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:08:36",
      "notes": "Auto-mapped via PDF investigation, score: 2.10"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/BirdNMGD11",
      "pdf_file": "bird2011dtm.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:08:49",
      "notes": "Auto-mapped via PDF investigation, score: 1.50"
    },
    {
      "bib_key": "DBLP:journals/ese/HindleBZN15",
      "pdf_file": "hindle2014topics.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:08:49",
      "notes": "Auto-mapped via PDF investigation, score: 1.80"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/BirdBRB10",
      "pdf_file": "bird2010lee.pdf",
      "confidence": "medium",
      "verified_date": "2025-10-01 10:09:12"
    },
    {
      "bib_key": "DBLP:conf/icse/BirdNDGM09",
      "pdf_file": "bird2009dddb.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:09:28"
    },
    {
      "bib_key": "DBLP:conf/msr/BirdGDSH07",
      "pdf_file": "bird2007qso.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:09:52"
    },
    {
      "bib_key": "DBLP:journals/tse/KalliamvakouBZB19",
      "pdf_file": "kalliamvakou2018managers.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:14:47",
      "notes": "Auto-mapped via PDF investigation, score: 2.10"
    },
    {
      "bib_key": "DBLP:journals/tse/KochharKNZB21",
      "pdf_file": "kochhar2020moving.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:14:54",
      "notes": "Auto-mapped via PDF investigation, score: 2.10"
    },
    {
      "bib_key": "DBLP:journals/tse/KovalenkoTPBB20",
      "pdf_file": "kovalenko2019revrec.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:15:01",
      "notes": "Auto-mapped via PDF investigation, score: 1.50"
    },
    {
      "bib_key": "DBLP:journals/tse/MeyerBBZ21",
      "pdf_file": "meyer2019today.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:15:07",
      "notes": "Auto-mapped via PDF investigation, score: 1.40"
    },
    {
      "bib_key": "DBLP:journals/tse/MeyerBBZ21",
      "pdf_file": "meyer2019today.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:17:35"
    },
    {
      "bib_key": "DBLP:conf/icse/Murphy-HillZBN13",
      "pdf_file": "murphyhill2013dbf.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:21:18"
    },
    {
      "bib_key": "DBLP:journals/tse/Murphy-HillZBN15",
      "pdf_file": "murphyhill2015design.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:21:39"
    },
    {
      "bib_key": "DBLP:conf/icse/MusluBNC14",
      "pdf_file": "muslu2014dvcs.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:22:24"
    },
    {
      "bib_key": "DBLP:journals/pacmhci/NoltePFBSH18",
      "pdf_file": "nolte2018you.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:23:05"
    },
    {
      "bib_key": "DBLP:journals/ese/ParninBM13",
      "pdf_file": "parnin2012auj.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:23:37"
    },
    {
      "bib_key": "DBLP:conf/icsm/HongKCB11",
      "pdf_file": "hong2011uds.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:31:11"
    },
    {
      "bib_key": "DBLP:journals/ese/PosnettBD11",
      "pdf_file": "posnett2010esi.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:33:13"
    },
    {
      "bib_key": "DBLP:conf/msr/PosnettBD10",
      "pdf_file": "posnett2010tmm.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:33:44"
    },
    {
      "bib_key": "DBLP:journals/tse/StoreyZBCMK21",
      "pdf_file": "storey2020productivity.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:34:00"
    },
    {
      "bib_key": "DBLP:journals/software/Pe-ThanNFBSH19",
      "pdf_file": "than2018designing.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:34:15"
    },
    {
      "bib_key": "DBLP:journals/hhci/Pe-ThanNFBSH22",
      "pdf_file": "than2020hackathon.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:34:38"
    },
    {
      "bib_key": "DBLP:conf/icse/ManotasBZSJSPC16",
      "pdf_file": "washburn2016games.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:34:53"
    },
    {
      "bib_key": "DBLP:journals/jot/KimMPBG13",
      "pdf_file": "kim2013jot.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:43:31",
      "found": true
    },
    {
      "bib_key": "DBLP:journals/software/AdamsBBMKM15",
      "pdf_file": "adams2015releng.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:44:27",
      "found": true
    },
    {
      "bib_key": "DBLP:conf/chi/HenleyMCFB18",
      "pdf_file": "henley2018cfar.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:48:49"
    },
    {
      "bib_key": "DBLP:conf/sigsoft/SvyatkovskiyFGM22",
      "pdf_file": "svyatkovskiy2022merge.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:49:29",
      "found": true
    },
    {
      "bib_key": "DBLP:journals/tosem/FordSZBJMBHN22",
      "pdf_file": "ford2022covid.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:50:18",
      "found": true
    },
    {
      "bib_key": "DBLP:journals/tosem/MaddilaNBGD22",
      "pdf_file": "maddila2022cone.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:51:45",
      "found": true
    },
    {
      "bib_key": "DBLP:journals/queue/BirdFZFKLG22",
      "pdf_file": "taking_flight.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:54:45",
      "found": true
    },
    {
      "bib_key": "DBLP:journals/cacm/BirdFZFKLG23",
      "pdf_file": "taking_flight_cacm.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 10:56:52",
      "found": true
    },
    {
      "bib_key": "DBLP:conf/icse/JohnsonBFFZ23",
      "pdf_file": "PICSE-BrittanyJohnson-ICSESEIP2023.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 11:00:08",
      "found": true
    },
    {
      "bib_key": "DBLP:conf/icse/ZhangMBBRAJHD23",
      "pdf_file": "zhang2023coral.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 11:00:47",
      "found": true
    },
    {
      "bib_key": "DBLP:journals/tse/DinellaMSBNL23",
      "pdf_file": "dinella2023deepmerge.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 11:01:26",
      "found": true
    },
    {
      "bib_key": "DBLP:conf/icse/Butler0B24",
      "pdf_file": "butler2024okr.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 11:02:15",
      "found": true
    },
    {
      "bib_key": "DBLP:conf/icse/WashburnSN0B16",
      "pdf_file": "washburn2016postmortems.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 11:05:45",
      "found": true
    },
    {
      "bib_key": "DBLP:journals/software/StolLB17",
      "pdf_file": "Crowdsourcing_for_Software_Engineering.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 11:44:38",
      "found": true
    },
    {
      "bib_key": "DBLP:journals/software/AdamsBBDKMO18",
      "pdf_file": "Release_Engineering_3.0.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 11:47:49",
      "found": true
    },
    {
      "bib_key": "DBLP:conf/icse-seip/NaharKBPZB25",
      "pdf_file": "nahar.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 11:49:26",
      "found": true
    },
    {
      "bib_key": "DBLP:journals/cacm/LahiriSBMC25",
      "pdf_file": "program_merge_cacm.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 12:04:51",
      "found": true
    },
    {
      "bib_key": "DBLP:journals/queue/LahiriSBMC24",
      "pdf_file": "program_merge_queue.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 12:06:10",
      "found": true
    },
    {
      "bib_key": "DBLP:conf/sigsoft/VajjalaVBBDDDEF25",
      "pdf_file": "arun-differential-testing.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 12:18:47",
      "found": true
    },
    {
      "bib_key": "DBLP:conf/icse-seip/VajjalaVBBDDDEFHMSSZ25",
      "pdf_file": "Automatic_Diff_Labeler.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 12:21:24",
      "found": true
    },
    {
      "bib_key": "DBLP:journals/pacmse/LiangBBDFF024",
      "pdf_file": "_FSE_24__Replicating_Software_Engineering_Research_with_LLMs.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 12:23:08",
      "found": true
    },
    {
      "bib_key": "DBLP:books/el/16/Bird16",
      "pdf_file": "bird2016interviews.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 12:24:28",
      "found": true
    },
    {
      "bib_key": "Miller2026MaybeWe",
      "pdf_file": "Miller2026MaybeWe.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 12:55:04",
      "found": true
    },
    {
      "bib_key": "Choudhuri2026AIWhere",
      "pdf_file": "AI-Where-It_Matters.pdf",
      "confidence": "high",
      "verified_date": "2025-10-01 12:58:41",
      "found": true
    }
  ]
}